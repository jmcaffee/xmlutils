/* **************************************************************************
 * File: data/AUGuideline.xml.gdl
 * Guideline generated: 12/05/2007 10:25:21
 *
 * *************************************************************************/

	




// +++++++++++++++++++++++++++ DPM Definitions +++++++++++++++++++++++++++
		
	dpm	money	acquisitionCost		"Acquisition Cost";
	dpm	money	ActualDisposableIncome		"Actual Disposable Income";
	dpm	numeric	ActualDisposableIncome1		"Actual Disposable Income 1";
	dpm	numeric	ActualDisposableIncome2		"Actual Disposable Income 2";
	dpm	numeric	ActualDisposableIncome3		"Actual Disposable Income 3";
	dpm	numeric	ActualDisposableIncome4		"Actual Disposable Income 4";
	dpm	numeric	ActualDisposableIncome5		"Actual Disposable Income 5";
	dpm	text	amortType1st		"Amort Type 1st";
	dpm	text	AmortType2nd		"Amort Type 2nd";
	dpm	text	ApplyMarginAdjs		"ApplyMarginAdjs";
	dpm	numeric	appraisalvalue		"appraisalvalue";
	dpm	text	AssetReqd		"Asset Reqd";
	dpm	text	Bankruptcy13		"Bankruptcy13";
	dpm	text	Bankruptcy7		"Bankruptcy7";
	dpm	numeric	BasePrice1st		"Base Price 1st";
	dpm	numeric	BaseRate1st		"Base Rate 1st";
	dpm	numeric	BaseRate2nd		"Base Rate 2nd";
	dpm	text	BKExists7Yrs		"BK Exists 7 Yrs";
	dpm	text	BorrowerType		"Borrower Type";
	dpm	date	Chapter13FileDate		"Chapter13FileDate";
	dpm	date	Chapter7FileDate		"Chapter7FileDate";
	dpm	numeric	ClosingCostReqd		"Closing Cost Reqd";
	dpm	money	combinedLoanAmount		"Combined Loan Amount";
	dpm	date	DateOfForeclosure		"DateOfForeclosure";
	dpm	text	Dbg120DayLate2		"Dbg120DayLate2";
	dpm	text	Dbg30DayLate2		"Dbg30DayLate2";
	dpm	text	Dbg60DayLate2		"Dbg60DayLate2";
	dpm	text	Dbg90DayLate2		"Dbg90DayLate2";
	dpm	text	DbgCombo		"DbgCombo";
	dpm	text	DbgLienNumber		"DbgLienNumber";
	dpm	text	DbgLoanAmount		"DbgLoanAmount";
	dpm	text	DbgPropType		"DbgPropType";
	dpm	text	DbgRolling30s2		"DbgRolling30s2";
	dpm	numeric	dExtensionPeriod1st		"dExtensionPeriod1st";
	dpm	numeric	dExtensionPeriod2nd		"dExtensionPeriod2nd";
	dpm	money	DisposableIncome		"Disposable Income";
	dpm	text	DocTypeAbbrev		"Doc Type Abbrev";
	dpm	numeric	DownPymtReqdAmt		"Down Pymt Reqd Amt";
	dpm	text	dUserTypeNotFound		"USER TYPE NOT FOUND";
	dpm	numeric	EarnestDepositPerc		"Earnest Deposit Perc";
	dpm	money	EstimatedCashtoBorrower		"Estimated Cash to Borrower";
	dpm	boolean	f40due30		"f40due30";
	dpm	boolean	f50due30		"f50due30";
	dpm	numeric	fBkTdlCk		"fBkTdlCk";
	dpm	text	FCExists7Yrs		"FC Exists 7 Yrs";
	dpm	numeric	FinalPrice1st		"Final Price 1st";
	dpm	numeric	FinalPrice2nd		"Final Price 2nd";
	dpm	boolean	fIsFullDoc		"fIsFullDoc";
	dpm	boolean	fIsSelfEmployed		"fIsSelfEmployed";
	dpm	text	fIsStatedDoc		"fIsStatedDoc";
	dpm	boolean	fIsSubFin		"fIsSubFin";
	dpm	numeric	fivePercOfLA		"fivePercOfLA";
	dpm	numeric	fLimitLTV80Zip		"fLimitLTV80Zip";
	dpm	numeric	fLimitLTV85Zip		"fLimitLTV85Zip";
	dpm	numeric	fLimitLTVZip		"fLimitLTVZip";
	dpm	numeric	fLimitRuralZip		"fLimitRuralZip";
	dpm	boolean	ForeignNationalIndicator		"Foreign National Indicator";
	dpm	text	ForNatNoFICOBorr1		"ForNat No FICO Borr 1";
	dpm	text	ForNatNoFICOBorr2		"ForNat No FICO Borr 2";
	dpm	text	ForNatNoFICOBorr3		"ForNat No FICO Borr 3";
	dpm	text	ForNatNoFICOBorr4		"ForNat No FICO Borr 4";
	dpm	text	ForNatNoFICOBorr5		"ForNat No FICO Borr 5";
	dpm	money	FourMoReserves		"Four Mo Reserves";
	dpm	boolean	FTHB		"FTHB";
	dpm	text	fTLNotReqd-2		"fTLNotReqd-2";
	dpm	text	fTLNotReqd-3		"fTLNotReqd-3";
	dpm	text	fTLNotReqd-4		"fTLNotReqd-4";
	dpm	text	fTLNotReqd-5		"fTLNotReqd-5";
	dpm	text	GdlExpireDate		"GdlExpireDate";
	dpm	numeric	globalParam		"Global Parameter";
	dpm	boolean	HasEmployment		"HasEmployment";
	dpm	boolean	hasSubFinancing		"hasSubFinancing";
	dpm	text	IndexType		"Index Type";
	dpm	money	IneligibleFullDocInc		"Ineligible Full Doc Inc";
	dpm	money	IneligibleLimitedDocInc		"Ineligible Limited Doc Inc";
	dpm	money	IneligibleStatedInc		"Ineligible Stated Inc";
	dpm	numeric	IOTerm		"IO Term";
	dpm	boolean	isCashOut		"isCashOut";
	dpm	boolean	isCondo		"isCondo";
	dpm	boolean	isFixed		"isFixed";
	dpm	boolean	isForeignNatl		"isForeignNatl";
	dpm	boolean	isFTHB		"isFTHB";
	dpm	boolean	isHudRepo		"isHudRepo";
	dpm	boolean	isInterestOnly		"isInterestOnly";
	dpm	boolean	isLeasehold		"isLeasehold";
	dpm	boolean	isMixedUse		"isMixedUse";
	dpm	boolean	isNoEscrow		"isNoEscrow";
	dpm	boolean	isNoMI		"isNoMI";
	dpm	boolean	isNonWarrantable		"isNonWarrantable";
	dpm	boolean	isRestrictedState		"isRestrictedState";
	dpm	boolean	isSelfEmployed		"isSelfEmployed";
	dpm	numeric	LiquidReserves		"Liquid Reserves";
	dpm	date	LMCBD_31		"LMCBD_31";
	dpm	date	LMCBD_359		"LMCBD_359";
	dpm	money	loanAmount1st		"Loan Amount 1st";
	dpm	money	loanAmount2nd		"Loan Amount 2nd";
	dpm	numeric	LoanBalance-1		"LoanBalance-1";
	dpm	numeric	LoanTerm1st		"Loan Term 1st";
	dpm	numeric	LoanTerm2nd		"Loan Term 2nd";
	dpm	numeric	lockPeriod1st		"lockPeriod1st";
	dpm	numeric	LockPeriod1st		"Lock Period 1st";
	dpm	numeric	lockPeriod2nd		"lockPeriod2nd";
	dpm	numeric	LockPeriod2nd		"Lock Period 2nd";
	dpm	numeric	MarginAdj-NoMI-CashOut		"Margin Adj-No MI-Cash Out";
	dpm	numeric	MarginAdj-NoMI-NumberofUnits		"Margin Adj-No MI-Number of Units";
	dpm	numeric	MarginAdj-NoMI-Occupancy		"Margin Adj-No MI-Occupancy";
	dpm	numeric	MarginAdj-NoMIARMFICO620-659		"Margin Adj-No MI ARM FICO 620-659";
	dpm	numeric	MarginAdj-NoMIARMFICOGtEq660		"Margin Adj-No MI ARM FICO Gt Eq 660";
	dpm	numeric	MarginAdj1st-NoMIARMFICO620-659		"Margin Adj 1st-No MI ARM FICO 620-659";
	dpm	numeric	MaxBaseRate		"Max Base Rate";
	dpm	money	MaxCashOut		"Max Cash Out";
	dpm	percentage	MaxCLTV2		"Max CLTV2";
	dpm	money	MaxCombinedLnAmt		"Max Combined Ln Amt";
	dpm	numeric	MaxPaymentShock		"Max Payment Shock";
	dpm	numeric	maxPrice1st		"Max Price 1st";
	dpm	numeric	MaxPrice2nd		"Max Price 2nd";
	dpm	numeric	MinCBScore		"Min CBScore";
	dpm	percentage	MinDownPayment		"Min Down Payment";
	dpm	numeric	MinMaxAbbrev		"Min Max Abbrev";
	dpm	numeric	MinReservesRequired		"Min Reserves Required";
	dpm	numeric	MinScoreCombo		"Min Score Combo";
	dpm	numeric	Nbr120Days		"Nbr120Days";
	dpm	numeric	Nbr30Days		"Nbr30Days";
	dpm	numeric	Nbr60Days		"Nbr60Days";
	dpm	numeric	Nbr90Days		"Nbr90Days";
	dpm	text	NoMIFlag		"No MI Flag";
	dpm	text	NoMIPriceReqd		"No MI Price Reqd";
	dpm	text	OneUnitFlag		"One Unit Flag";
	dpm	boolean	OptA2YrPPStateFlag		"OptA2YrPPStateFlag";
	dpm	numeric	PaymentShock		"Payment Shock";
	dpm	numeric	PaymentShockTimes		"PaymentShockTimes";
	dpm	numeric	PrBorrFICOAdvAnnualIncome		"PrBorrFICOAdvAnnualIncome";
	dpm	text	PrepayIndicator1st		"Prepay Indicator 1st";
	dpm	text	PrepayIndicator2nd		"Prepay Indicator 2nd";
	dpm	numeric	PrepaymentIndicator		"Prepayment Indicator";
	dpm	money	PrepayTerm1st		"Prepay Term 1st";
	dpm	numeric	PrepayTerm2nd		"Prepay Term 2nd";
	dpm	numeric	PriceAdj-1stExtension		"Price Adj-1st Extension";
	dpm	numeric	PriceAdj-2ndExtension		"Price Adj-2nd Extension";
	dpm	numeric	PriceAdj1st-Total		"Price Adj 1st-Total";
	dpm	numeric	PriceCalcForMaxRate		"Price Calc For Max Rate";
	dpm	text	PrimaryBorrowerIndicator		"Primary Borrower Indicator";
	dpm	text	programType		"ProgramType";
	dpm	text	PropertyTypeAbbrev		"Property Type Abbrev";
	dpm	money	propertyValue		"Property Value";
	dpm	money	ProposedExpenses		"Proposed Expenses";
	dpm	text	purposeAbbrev		"Purpose Abbrev";
	dpm	numeric	rate1st		"Rate 1st";
	dpm	numeric	rate2nd		"Rate 2nd";
	dpm	numeric	RateAdj-BKlt24Months		"Rate Adj-BK lt 24 Months";
	dpm	numeric	RateAdj-BKlt24Months1st		"Rate Adj-BK lt 24 Months 1st";
	dpm	numeric	RateAdj-BKSeasoning		"Rate Adj-BK Seasoning";
	dpm	numeric	RateAdj-Impounds		"Rate Adj-Impounds";
	dpm	numeric	RateAdj-LTV1st		"Rate Adj-LTV 1st";
	dpm	numeric	RateAdj-NoMI-ARM		"Rate Adj-No MI-ARM";
	dpm	numeric	RateAdj-NoMI-CashOut		"Rate Adj-No MI-Cash Out";
	dpm	numeric	RateAdj-NoMI-Fixed		"Rate Adj-No MI-Fixed";
	dpm	numeric	RateAdj-NoMI-NumberofUnits		"Rate Adj-No MI-Number of Units";
	dpm	numeric	RateAdj-NoMI-Occupancy		"Rate Adj-No MI-Occupancy";
	dpm	numeric	RateAdj-NoMIARMFICO620-659		"Rate Adj-No MI ARM FICO 620-659";
	dpm	numeric	RateAdj-NoMIARMFICOGtEq660		"Rate Adj-No MI ARM FICO Gt Eq 660";
	dpm	numeric	RateAdj-NoMIFixedFICO620-659		"Rate Adj-No MI Fixed FICO 620-659";
	dpm	numeric	RateAdj-NoMIFixedFICOGtEq660		"Rate Adj-No MI Fixed FICO Gt Eq 660";
	dpm	numeric	RateAdj-Program2nd		"Rate Adj-Program 2nd";
	dpm	numeric	RateAdj-TotalNonPrice		"Rate Adj-Total Non Price";
	dpm	numeric	RateAdj-TotalNonPrice1st		"Rate Adj-Total Non Price 1st";
	dpm	numeric	RateAdj-TotalNonPrice2nd		"Rate Adj-Total Non Price 2nd";
	dpm	numeric	RateAdj-TXCashOutLoanSize		"Rate Adj-TX CashOut Loan Size";
	dpm	numeric	RateAdj1st-NoMI-ARM		"Rate Adj 1st-No MI-ARM";
	dpm	numeric	RateAdj1st-NoMI-CashOut		"Rate Adj 1st-No MI-Cash Out";
	dpm	numeric	RateAdj1st-NoMI-Fixed		"Rate Adj 1st-No MI-Fixed";
	dpm	numeric	RateAdj1st-NoMI-NumberofUnits		"Rate Adj 1st-No MI-Number of Units";
	dpm	numeric	RateAdj1st-NoMI-Occupancy		"Rate Adj 1st-No MI-Occupancy";
	dpm	numeric	RateAdj1st-NoMIARMFICO620-659		"Rate Adj 1st-No MI ARM FICO 620-659";
	dpm	numeric	RateAdj1st-NoMIARMFICOGtEq660		"Rate Adj 1st-No MI ARM FICO Gt Eq 660";
	dpm	numeric	RateAdj1st-NoMIFixedFICO620-659		"Rate Adj 1st-No MI Fixed FICO 620-659";
	dpm	numeric	RateAdj1st-NoMIFixedFICOGtEq660		"Rate Adj 1st-No MI Fixed FICO Gt Eq 660";
	dpm	numeric	rateAdj1st-Total		"Rate Adj 1st-Total";
	dpm	numeric	RateAdjTest		"Rate Adj Test";
	dpm	text	RateDisp		"Rate Disp";
	dpm	numeric	RepFICOBorr1		"Rep FICO Borr 1";
	dpm	numeric	RepFICOBorr2		"Rep FICO Borr 2";
	dpm	numeric	RepFICOBorr3		"Rep FICO Borr 3";
	dpm	numeric	RepFICOBorr4		"Rep FICO Borr 4";
	dpm	numeric	RepFICOBorr5		"Rep FICO Borr 5";
	dpm	numeric	reservesDiff		"reservesDiff";
	dpm	numeric	ReservesParameter		"Reserves Parameter";
	dpm	numeric	ReservesReqdAmt		"Reserves Reqd Amt";
	dpm	text	RetainResidence		"RetainResidence";
	dpm	text	ScoreCheck		"Score Check";
	dpm	numeric	SixMoReserves		"Six Mo Reserves";
	dpm	numeric	SubjectPropertyZipcode		"SubjectPropertyZipcode";
	dpm	numeric	ThresholdGenericState		"ThresholdGenericState";
	dpm	numeric	ThresholdIndex1st		"ThresholdIndex1st";
	dpm	numeric	ThresholdIndex2nd		"ThresholdIndex2nd";
	dpm	numeric	ThresholdMaxRate1st		"ThresholdMaxRate1st";
	dpm	numeric	ThresholdMaxRate2nd		"ThresholdMaxRate2nd";
	dpm	numeric	ThresholdNotRequired1st		"ThresholdNotRequired1st";
	dpm	numeric	ThresholdNotRequired2nd		"ThresholdNotRequired2nd";
	dpm	text	tmp1		"tmp1";
	dpm	numeric	tmp3		"tmp3";
	dpm	numeric	tmp_MaxCltv		"tmp_MaxCltv";
	dpm	numeric	tmp_MaxLtv		"tmp_MaxLtv";
	dpm	text	tmpFNScoreUsed		"tmpFNScoreUsed";
	dpm	numeric	tmpMA-NoMI-ARM		"tmpMA-No MI-ARM";
	dpm	numeric	tmpMA-NoMI-CashOut		"tmpMA-No MI-Cash Out";
	dpm	numeric	tmpMA-NoMI-NumberofUnits		"tmpMA-No MI-Number of Units";
	dpm	numeric	tmpMA-NoMI-Occupancy		"tmpMA-No MI-Occupancy";
	dpm	numeric	tmpMA-NoMIARMFICO620-659		"tmpMA-No MI ARM FICO 620-659";
	dpm	numeric	tmpMA-NoMIARMFICOGtEq660		"tmpMA-No MI ARM FICO Gt Eq 660";
	dpm	numeric	tmpPA-1stExtension		"tmpPA-1st Extension";
	dpm	numeric	tmpPA-2ndExtension		"tmpPA-2nd Extension";
	dpm	numeric	tmpRA-NoMI-ARM		"tmpRA-No MI-ARM";
	dpm	numeric	tmpRA-NoMI-CashOut		"tmpRA-No MI-Cash Out";
	dpm	numeric	tmpRA-NoMI-Fixed		"tmpRA-No MI-Fixed";
	dpm	numeric	tmpRA-NoMI-NumberofUnits		"tmpRA-No MI-Number of Units";
	dpm	numeric	tmpRA-NoMI-Occupancy		"tmpRA-No MI-Occupancy";
	dpm	numeric	tmpThresholdNotRequired		"tmpThresholdNotRequired";
	dpm	numeric	TotalBKCCCSLast6Yr		"Total BK CCCS Last 6 Yr";
	dpm	numeric	TotalCurrentHousingExpenses		"Total Current Housing Expenses";
	dpm	numeric	TotalDisposableIncome		"Total Disposable Income";
	dpm	numeric	TotalFCBKCCCSLast6Yr		"Total FC BK CCCS Last 6 Yr";
	dpm	money	TotalIncome		"Total Income";
	dpm	money	TotalIncomeAmt		"Total Income Amt";
	dpm	numeric	TotalIncomeAmt1		"Total Income Amt 1";
	dpm	numeric	TotalIncomeAmt2		"Total Income Amt 2";
	dpm	numeric	TotalIncomeAmt3		"Total Income Amt 3";
	dpm	numeric	TotalIncomeAmt4		"Total Income Amt 4";
	dpm	numeric	TotalIncomeAmt5		"Total Income Amt 5";
	dpm	money	TotalPayoffs		"Total Payoffs";
	dpm	money	TotalReserves		"Total Reserves";
	dpm	numeric	twoMoReserves		"twoMoReserves";
	dpm	numeric	YieldAdj1st		"YieldAdj1st";
	dpm	numeric	YieldAdj2nd		"YieldAdj2nd";




// +++++++++++++++++++++++++++ DSM Definitions +++++++++++++++++++++++++++
		
decision		dpm	text	BKCh13		"BKCh13";
decision		dpm	date	BKCh13FiledDate		"BKCh13FiledDate";
decision		dpm	text	BKCh7		"BKCh7";
decision		dpm	date	BKCh7FiledDate		"BKCh7FiledDate";
decision		dpm	numeric	CA2ndIndex		"CA2ndIndex";
decision		dpm	numeric	CA2ndIndexAdj		"CA2ndIndexAdj";
decision		dpm	numeric	CA2ndMaxRate		"CA2ndMaxRate";
decision		dpm	numeric	CLTV		"CLTV";
decision		dpm	numeric	creditScore		"Credit Score";
decision		dpm	numeric	cvBaseRate		"Base Rate";
decision		dpm	numeric	cvLoanTerm		"Loan Term";
decision		dpm	numeric	cvLockPeriod		"Lock Period";
decision		dpm	numeric	cvMaxPPRate		"Max PP Rate";
decision		dpm	numeric	cvMaxPrice		"Max Price";
decision		dpm	money	cvMtgNoUFMIP		"Loan Amount";
decision		dpm	money	cvPI		"PI";
decision		dpm	numeric	cvPrice		"Price";
decision		dpm	text	cvProgram		"Program";
decision		dpm	numeric	cvRate		"Rate";
decision		dpm	numeric	cvRateQual		"Rate Qual";
decision		dpm	numeric	DbgFlag		"DbgFlag";
decision		dpm	text	Decision		"Decision";
decision		dpm	text	DecisionValue		"Decision Value";
decision		dpm	numeric	DTI		"DTI";
decision		dpm	boolean	fEnableExceptionPricing		"fEnableExceptionPricing";
decision		dpm	boolean	fEnableExtensions		"fEnableExtensions";
decision		dpm	boolean	fEnablePeg		"fEnablePeg";
decision		dpm	text	fNonTraditionalTLReqd		"fNonTraditionalTLReqd";
decision		dpm	date	ForeclosureFiledDate		"ForeclosureFiledDate";
decision		dpm	numeric	LTV		"LTV";
decision		dpm	numeric	marginAdj-40YrTerm		"Margin Adj-40Yr Term";
decision		dpm	numeric	marginAdj-CashOut		"Margin Adj-Cash Out";
decision		dpm	numeric	marginAdj-CLTV		"Margin Adj-CLTV";
decision		dpm	numeric	marginAdj-DocumentType		"Margin Adj-Document Type";
decision		dpm	numeric	marginAdj-FICO		"Margin Adj-FICO";
decision		dpm	numeric	marginAdj-LoanAmount		"Margin Adj-Loan Amount";
decision		dpm	numeric	marginAdj-LTV		"Margin Adj-LTV";
decision		dpm	numeric	marginAdj-NegAm1st		"Margin Adj-Neg Am 1st";
decision		dpm	numeric	marginAdj-NewYorkProperties		"Margin Adj-New York Properties";
decision		dpm	numeric	marginAdj-NoEscrow		"Margin Adj-No Escrow";
decision		dpm	numeric	marginAdj-NumberOfUnits		"Margin Adj-Number of Units";
decision		dpm	numeric	marginAdj-Occupancy		"Margin Adj-Occupancy";
decision		dpm	numeric	marginAdj-Price		"Margin Adj-Price";
decision		dpm	numeric	marginAdj-PropertyType		"Margin Adj-Property Type";
decision		dpm	numeric	marginAdj-Total		"Margin Adj-Total";
decision		dpm	numeric	maxCLTV		"Max CLTV";
decision		dpm	numeric	maxDTI		"Max DTI";
decision		dpm	money	maxLoanAmount		"Max Loan Amount";
decision		dpm	money	maxLoanAmount2nd		"Max Loan Amount 2nd";
decision		dpm	numeric	maxLTV		"Max LTV";
decision		dpm	money	minLoanAmount		"Min Loan Amount";
decision		dpm	numeric	minScore		"Min Score";
decision		dpm	numeric	MortLate120Days		"MortLate120Days";
decision		dpm	numeric	MortLate30Days		"MortLate30Days";
decision		dpm	numeric	MortLate60Days		"MortLate60Days";
decision		dpm	numeric	MortLate90Days		"MortLate90Days";
decision		dpm	numeric	PaymentShockReservesReqd		"Payment Shock Reserves Reqd";
decision		dpm	numeric	pi1st		"PI 1st";
decision		dpm	numeric	pi2nd		"PI 2nd";
decision		dpm	numeric	PITI		"PITI";
decision		dpm	numeric	priceAdj-2YrPrePay		"Price Adj-2Yr PrePay";
decision		dpm	numeric	priceAdj-40DueIn30		"Price Adj-40 Due In 30";
decision		dpm	numeric	priceAdj-40YrTerm		"Price Adj-40Yr Term";
decision		dpm	numeric	priceAdj-5-6PricingSpecial		"Price Adj-5-6 Pricing Special";
decision		dpm	numeric	priceAdj-AltAPricingSpecial		"Price Adj-AltA Pricing Special";
decision		dpm	numeric	priceAdj-CashOut		"Price Adj-Cash Out";
decision		dpm	numeric	priceAdj-CLTV		"Price Adj-CLTV";
decision		dpm	numeric	priceAdj-CLTV-LoanAmount		"Price Adj-CLTV-LoanAmount";
decision		dpm	numeric	priceAdj-DocumentType		"Price Adj-Document Type";
decision		dpm	numeric	priceAdj-EscrowHoldback		"Price Adj-Escrow Holdback";
decision		dpm	numeric	priceAdj-Exception-Name1		"Price Adj Exception-Name 1";
decision		dpm	numeric	priceAdj-Exception-Name2		"Price Adj Exception-Name 2";
decision		dpm	numeric	priceAdj-Exception-Name3		"Price Adj Exception-Name 3";
decision		dpm	numeric	priceAdj-Exception-Name4		"Price Adj Exception-Name 4";
decision		dpm	numeric	priceAdj-Exception-Name5		"Price Adj Exception-Name 5";
decision		dpm	numeric	priceAdj-Exception-Name6		"Price Adj Exception-Name 6";
decision		dpm	numeric	priceAdj-Exception-Name7		"Price Adj Exception-Name 7";
decision		dpm	numeric	priceAdj-Exception-Name8		"Price Adj Exception-Name 8";
decision		dpm	numeric	priceAdj-Exception-Name9		"Price Adj Exception-Name 9";
decision		dpm	numeric	priceAdj-Exception-Value1		"Price Adj Exception-Value 1";
decision		dpm	numeric	priceAdj-Exception-Value2		"Price Adj Exception-Value 2";
decision		dpm	numeric	priceAdj-Exception-Value3		"Price Adj Exception-Value 3";
decision		dpm	numeric	priceAdj-Exception-Value4		"Price Adj Exception-Value 4";
decision		dpm	numeric	priceAdj-Exception-Value5		"Price Adj Exception-Value 5";
decision		dpm	numeric	priceAdj-Exception-Value6		"Price Adj Exception-Value 6";
decision		dpm	numeric	priceAdj-Exception-Value7		"Price Adj Exception-Value 7";
decision		dpm	numeric	priceAdj-Exception-Value8		"Price Adj Exception-Value 8";
decision		dpm	numeric	priceAdj-Exception-Value9		"Price Adj Exception-Value 9";
decision		dpm	numeric	priceAdj-Extension1		"Price Adj-Extension 1";
decision		dpm	numeric	priceAdj-Extension2		"Price Adj-Extension 2";
decision		dpm	numeric	priceAdj-FICO		"Price Adj-FICO";
decision		dpm	numeric	priceAdj-ForeignNational		"Price Adj-Foreign National";
decision		dpm	numeric	priceAdj-InterestOnly		"Price Adj-Interest Only";
decision		dpm	numeric	priceAdj-Investor		"Price Adj-Investor";
decision		dpm	numeric	priceAdj-LoanAmount		"Price Adj-Loan Amount";
decision		dpm	numeric	priceAdj-LTV		"Price Adj-LTV";
decision		dpm	numeric	priceAdj-MixedUse		"Price Adj-Mixed Use";
decision		dpm	numeric	priceAdj-NewYorkProperties		"Price Adj-New York Properties";
decision		dpm	numeric	priceAdj-NoEscrow		"Price Adj-No Escrow";
decision		dpm	numeric	priceAdj-NonWarrantableCondo		"Price Adj-Non Warrantable Condo";
decision		dpm	numeric	priceAdj-NOOLoanAmount		"Price Adj-NOO Loan Amount";
decision		dpm	numeric	priceAdj-NumberofUnits		"Price Adj-Number of Units";
decision		dpm	numeric	priceAdj-Occupancy		"Price Adj-Occupancy";
decision		dpm	numeric	priceAdj-PrepayTerm		"Price Adj-Prepay Term";
decision		dpm	numeric	priceAdj-PropertyType		"Price Adj-Property Type";
decision		dpm	numeric	priceAdj-Region		"Price Adj-Region";
decision		dpm	numeric	priceAdj-Rural		"Price Adj-Rural";
decision		dpm	numeric	priceAdj-SOACLTV		"Price Adj-SOA CLTV";
decision		dpm	numeric	priceAdj-SOASpecial		"Price Adj-SOA Special";
decision		dpm	numeric	priceAdj-Special		"Price Adj-Special";
decision		dpm	numeric	priceAdj-Special30FX80CLTV		"Price Adj-Special30FX80CLTV";
decision		dpm	numeric	priceAdj-Total		"Price Adj-Total";
decision		dpm	numeric	priceAdj-WaiveEscrow		"Price Adj-Waive Escrow";
decision		dpm	text	programName		"Program Name";
decision		dpm	text	propertyType		"Property Type";
decision		dpm	numeric	rateAdj-2YrARMSpecial		"Rate Adj-2Yr ARM Special";
decision		dpm	numeric	rateAdj-30Year		"Rate Adj-30 Year";
decision		dpm	numeric	rateAdj-40DueIn30		"Rate Adj-40 Due In 30";
decision		dpm	numeric	rateAdj-40YrTerm		"Rate Adj-40Yr Term";
decision		dpm	numeric	rateAdj-50DueIn30		"Rate Adj-50 Due In 30";
decision		dpm	numeric	rateAdj-ARM		"Rate Adj-ARM";
decision		dpm	numeric	rateAdj-BKLs24Months		"Rate Adj-BK Ls 24 Months";
decision		dpm	numeric	rateAdj-BKLs24Months1st		"Rate Adj-BK Ls 24 Months 1st";
decision		dpm	numeric	rateAdj-CashOut		"Rate Adj-Cash Out";
decision		dpm	numeric	rateAdj-CLTV		"Rate Adj-CLTV";
decision		dpm	numeric	rateAdj-DocumentType		"Rate Adj-Document Type";
decision		dpm	numeric	rateAdj-DTI		"Rate Adj-DTI";
decision		dpm	numeric	rateAdj-FICO		"Rate Adj-FICO";
decision		dpm	numeric	rateAdj-FullDocSpecial		"Rate Adj-Full Doc Special";
decision		dpm	numeric	rateAdj-InterestOnly		"Rate Adj-Interest Only";
decision		dpm	numeric	rateAdj-LoanAmount		"Rate Adj-Loan Amount";
decision		dpm	numeric	rateAdj-LTV		"Rate Adj-LTV";
decision		dpm	numeric	rateAdj-Margin		"Rate Adj-Margin";
decision		dpm	numeric	rateAdj-NegAm1st		"Rate Adj-Neg Am 1st";
decision		dpm	numeric	rateAdj-NewYorkProperties		"Rate Adj-New York Properties";
decision		dpm	numeric	rateAdj-NoEscrow		"Rate Adj-No Escrow";
decision		dpm	numeric	rateAdj-NonCAProperty		"Rate Adj-Non CA Property";
decision		dpm	numeric	rateAdj-NOOCLTV		"Rate Adj-NOO CLTV";
decision		dpm	numeric	rateAdj-NoPrepay		"Rate Adj-No Prepay";
decision		dpm	numeric	rateAdj-NumberOfUnits		"Rate Adj-Number of Units";
decision		dpm	numeric	rateAdj-Occupancy		"Rate Adj-Occupancy";
decision		dpm	numeric	rateAdj-PrepayTerm		"Rate Adj-Prepay Term";
decision		dpm	numeric	rateAdj-PropertyType		"Rate Adj-Property Type";
decision		dpm	numeric	rateAdj-PurchaseSpecial		"Rate Adj-Purchase Special";
decision		dpm	numeric	rateAdj-Purpose		"Rate Adj-Purpose";
decision		dpm	numeric	rateAdj-Rural		"Rate Adj-Rural";
decision		dpm	numeric	rateAdj-Special		"Rate Adj-Special";
decision		dpm	numeric	rateAdj-State		"Rate Adj-State";
decision		dpm	numeric	rateAdj-Total		"Rate Adj-Total";
decision		dpm	numeric	rateAdj-TXCashOut		"Rate Adj-TX CashOut";
decision		dpm	numeric	Reserves		"Reserves";
decision		dpm	numeric	reservesReqd		"Reserves Reqd";
decision		dpm	text	restrictionFlags		"Restriction Flags";
decision		dpm	numeric	TDLN-Late120s		"TDLN-Late120s";
decision		dpm	numeric	TDLN-Late120sx24		"TDLN-Late120sx24";
decision		dpm	numeric	TDLN-Late30s		"TDLN-Late30s";
decision		dpm	numeric	TDLN-Late30sx24		"TDLN-Late30sx24";
decision		dpm	numeric	TDLN-Late60s		"TDLN-Late60s";
decision		dpm	numeric	TDLN-Late60sx24		"TDLN-Late60sx24";
decision		dpm	numeric	TDLN-Late90s		"TDLN-Late90s";
decision		dpm	numeric	TDLN-Late90sx24		"TDLN-Late90sx24";
decision		dpm	numeric	TDLN-Rolling30s		"TDLN-Rolling30s";




// +++++++++++++++++++++++++++ PPM Definitions +++++++++++++++++++++++++++
		
	ppm	UNKNOWN	app	pAlimonyChildSupportIncome-AllApp		"Alimony/Child Support Income - All App";
	ppm	money	app	pAlterations		"Alterations";
	ppm	text	prd	pAmortizationType		"Amortization Type-PDT";
	ppm	money	app	pAppraisalValue		"Appraisal Value";
	ppm	money	app	pAssetBankAcctsAmt		"Asset-Bank Accts Amt";
	ppm	numeric	app	pAssetCashDeposits		"Cash Deposits-Assets";
	ppm	money	app	pAssetCD		"Asset-Certificate of Deposit";
	ppm	money	app	pAssetGiftNotDepositedAmt		"Asset-Gift Not Deposited Amt";
	ppm	numeric	app	pAssetNetEquityAmt		"Asset-Net Equity Amt";
	ppm	money	app	pAssetOtherLiquidAmt		"Asset-Other Liquid Amt";
	ppm	money	app	pAssetOtherNonLiquid		"Other Non Liquid Assets";
	ppm	money	app	pAssetRetirementFundsAmt		"Asset-Retiremt Funds Amt";
	ppm	money	app	pAssetStocksBondsMfundsAmt		"Asset-Stocks Bonds Mfunds Amt";
	ppm	money	app	pAssetTrustFundsAmt		"Asset-Trust Funds Amt";
	ppm	UNKNOWN	app	pBankruptcyChapter13		"Bankruptcy Chapter 13";
	ppm	UNKNOWN	crd	pBankruptcyChapter7		"Bankruptcy Chapter 7";
	ppm	UNKNOWN	crd	pBKFiled7YrsCount		"BK Filed 7 Yrs Count";
	ppm	UNKNOWN	app	pBorr1-EmployerCount		"Borr1-EmployerCount";
	ppm	numeric	app	pBorr1ID		"Borr # 1 ID";
	ppm	UNKNOWN	app	pBorr2-EmployerCount		"Borr2-EmployerCount";
	ppm	numeric	app	pBorr2ID		"Borr # 2 ID";
	ppm	UNKNOWN	app	pBorr3-EmployerCount		"Borr3-EmployerCount";
	ppm	numeric	app	pBorr3ID		"Borr # 3 ID";
	ppm	UNKNOWN	app	pBorr4-EmployerCount		"Borr4-EmployerCount";
	ppm	numeric	app	pBorr4ID		"Borr # 4 ID";
	ppm	UNKNOWN	app	pBorr5-EmployerCount		"Borr5-EmployerCount";
	ppm	numeric	app	pBorr5ID		"Borr # 5 ID";
	ppm	money	app	pCashDeposit		"Cash Deposit";
	ppm	UNKNOWN	crd	pCCCSFiledDuration		"CCCS Filed Duration";
	ppm	UNKNOWN	crd	pCh13FiledDate		"Ch13FiledDate";
	ppm	UNKNOWN	crd	pCh7FiledDate		"Ch7FiledDate";
	ppm	UNKNOWN	crd	pChapter13FiledDuration		"Chapter 13 Filed Duration";
	ppm	UNKNOWN	crd	pChapter7BKClosedDuration		"Chapter 7 BK Closed Duration";
	ppm	text	app	pCitizenshipBorr1		"Citizenship Borr #1";
	ppm	text	app	pCitizenshipBorr2		"Citizenship Borr #2";
	ppm	text	app	pCitizenshipBorr3		"Citizenship Borr #3";
	ppm	text	app	pCitizenshipBorr4		"Citizenship Borr #4";
	ppm	text	app	pCitizenshipBorr5		"Citizenship Borr #5";
	ppm	text	app	pCitizenshipCoBorr1		"Citizenship Co-Borr #1";
	ppm	text	app	pCitizenshipCoBorr2		"Citizenship Co-Borr #2";
	ppm	text	app	pCitizenshipCoBorr3		"Citizenship Co-Borr #3";
	ppm	text	app	pCitizenshipCoBorr4		"Citizenship Co-Borr #4";
	ppm	text	app	pCitizenshipOfPrimaryApplicant		"Citizenship of Primary Applicant";
	ppm	UNKNOWN	app	pCollCOAmt-Unpaid		"Coll CO Amt-Unpaid";
	ppm	UNKNOWN	app	pCollCOTrades$250		"Coll CO Trades $250";
	ppm	numeric	app	pCombo		"Combo";
	ppm	UNKNOWN	crd	pConsumerCounseling		"Consumer Counseling";
	ppm	UNKNOWN	crd	pConsumerDeliquentActs		"Consumer Deliquent Acts";
	ppm	money	crd	pConsumerPayoffs		"Consumer Payoffs";
	ppm	UNKNOWN	app	pCurrAddressState-Borr1		"Curr Address State-Borr 1";
	ppm	UNKNOWN	app	pCurrAddressState-Borr2		"Curr Address State-Borr 2";
	ppm	UNKNOWN	app	pCurrAddressState-Borr3		"Curr Address State-Borr 3";
	ppm	UNKNOWN	app	pCurrAddressState-Borr4		"Curr Address State-Borr 4";
	ppm	UNKNOWN	app	pCurrAddressState-Borr5		"Curr Address State-Borr 5";
	ppm	UNKNOWN	app	pCurrentAddressState-ForNatl		"Current Address State-For Natl";
	ppm	UNKNOWN	app	pCurrentAddressState-HghstIncBorr(RepScorewSingle)		"Current Address State-Hghst Inc Borr (Rep Score w/Single)";
	ppm	UNKNOWN	crd	pCurrentAddressState-LowRepScore(wSingle)Borrl		"Current Address State-Low Rep Score (w/Single) Borrl";
	ppm	UNKNOWN	app	pCurrentResidencePropertyStatus		"CurrentResidencePropertyStatus";
	ppm	UNKNOWN	app	pDecl-NonOcc-ForNatl		"Decl-Non Occ-For Natl";
	ppm	UNKNOWN	app	pDecl-NonOcc-HghstIncBorr(RepScorewSingle)		"Decl-Non Occ-Hghst Inc Borr (Rep Score w/Single)";
	ppm	UNKNOWN	app	pDecl-NonOcc-LowRepScore(wSingle)Borr		"Decl-Non Occ-Low Rep Score (w/Single) Borr";
	ppm	numeric	app	pDeclAlimony		"Decl-Alimony";
	ppm	numeric	app	pDeclBankruptcy		"Decl-Bankruptcy";
	ppm	text	app	pDeclBorr1AppNonOccupancy		"Decl-Borr1 App Non-Occupancy";
	ppm	text	app	pDeclBorr2AppNonOccupancy		"Decl-Borr2 App Non-Occupancy";
	ppm	text	app	pDeclBorr3AppNonOccupancy		"Decl-Borr3 App Non-Occupancy";
	ppm	text	app	pDeclBorr4AppNonOccupancy		"Decl-Borr4 App Non-Occupancy";
	ppm	text	app	pDeclBorr5AppNonOccupancy		"Decl-Borr5 App Non-Occupancy";
	ppm	numeric	app	pDeclBorrowedDownPmt		"Decl-Borrowed Down Pmt";
	ppm	numeric	app	pDeclComaker		"Decl-Co-maker";
	ppm	numeric	app	pDeclDelinquency		"Decl-Delinquency";
	ppm	numeric	app	pDeclForeclosureDeedInLieu		"Decl-ForeclosureDeedInLieu";
	ppm	numeric	app	pDeclJudgment		"Decl-Judgment";
	ppm	numeric	app	pDeclLawSuit		"Decl-LawSuit";
	ppm	numeric	app	pDeclObligatedLoanForeclosed		"Decl-Obligated Loan Foreclosed";
	ppm	numeric	app	pDeclPermResident		"Decl-Perm Resident";
	ppm	money	app	pDiscount		"Discount";
	ppm	UNKNOWN	app	pDividendsInterest-AllApp		"Dividends/Interest - All App";
	ppm	text	app	pDocumentType		"Document Type";
	ppm	UNKNOWN	app	pDownpaymentAmnt		"Downpayment Amnt";
	ppm	money	app	pEmployerAssistedHousing		"Employer Assisted Housing";
	ppm	UNKNOWN	app	pEquityfromSubProp		"Equity from Sub Prop";
	ppm	UNKNOWN	app	pEscrowHoldback		"Escrow Holdback";
	ppm	text	app	pEstateHeld		"Estate Held";
	ppm	money	app	pEstimatedClosingCosts		"Estimated Closing Costs";
	ppm	money	app	pEstimatedPrepaidItems		"Estimated Prepaid Items";
	ppm	UNKNOWN	crd	pFCFiled7YrsCount		"FC Filed 7 Yrs Count";
	ppm	text	prd	pFirstAdjTerm		"First Adjustment Term-PDT";
	ppm	UNKNOWN	crd	pForeclosure		"Foreclosure";
	ppm	UNKNOWN	crd	pForeclosureClosedDuration		"Foreclosure Closed Duration";
	ppm	UNKNOWN	crd	pForeclosureDate		"ForeclosureDate";
	ppm	UNKNOWN	app	pFosterCareIncome-AllApp		"Foster Care Income - All App";
	ppm	numeric	app	pFTHB		"FTHB";
	ppm	UNKNOWN	crd	pFTHB-ForNatl		"FTHB-For Natl";
	ppm	UNKNOWN	crd	pFTHB-HghstIncBorr(RepScorewSingle)		"FTHB-Hghst Inc Borr (Rep Score w/Single)";
	ppm	UNKNOWN	crd	pFTHB-LowRepScore(wSingle)Borr		"FTHB-Low Rep Score (w/Single) Borr";
	ppm	UNKNOWN	app	pGiftFunds		"Gift Funds";
	ppm	UNKNOWN	app	pGiftofEquity		"Gift of Equity";
	ppm	text	app	pGovRefiType		"GovernmentRefinanceType";
	ppm	UNKNOWN	app	pGrossRentSubProp		"Gross Rent SubProp";
	ppm	text	prd	pGuidelineExpireDate		"GuidelineExpireDate";
	ppm	text	app	pHudRepo		"HUD Repo";
	ppm	UNKNOWN	app	pIncome-NonOccCoBorr-NotForNatl		"Income-Non Occ CoBorr-Not For Natl";
	ppm	UNKNOWN	crd	pIncome-NonOccCoBorr-NotHghstIncBorr(RepScorewSingle)		"Income-Non Occ CoBorr-Not Hghst Inc Borr (Rep Score w/Single)";
	ppm	UNKNOWN	app	pIncome-NonOccCoBorr-NotLowRepScore(wSingle)Borr		"Income-Non Occ CoBorr-Not Low Rep Score (w/Single) Borr";
	ppm	UNKNOWN	app	pInheritedProperty		"Inherited Property";
	ppm	text	app	pIs1099EarnerPrimBorr		"Is 1099 Earner-Prim Borr";
	ppm	UNKNOWN	crd	pJudgmentAmt-Unpaid		"Judgment Amt-Unpaid";
	ppm	money	app	pLandValue		"Land Value";
	ppm	money	app	pLeasePurchaseFund		"Lease Purchase Fund";
	ppm	money	app	pLenderCredit		"Lender Credit";
	ppm	UNKNOWN	crd	pLienAmt-Unpaid		"Lien Amt-Unpaid";
	ppm	numeric	prd	pLienNumber		"Lien Number";
	ppm	money	app	pLoanAmount		"Loan Amount";
	ppm	UNKNOWN	app	pLocation		"Location";
	ppm	text	crd	pLockPeriod		"Lock Period";
	ppm	text	app	pManualCredit		"Manual Credit";
	ppm	UNKNOWN	app	pModelHomeLeaseback		"Model Home Leaseback";
	ppm	UNKNOWN	crd	pMortActsNoREOAssoc		"Mort Acts No REO Assoc";
	ppm	money	crd	pMortgagePayoffs		"Mortgage Payoffs";
	ppm	UNKNOWN	crd	pMtg120Last12inTLNwnoDerogs		"Mtg 120+ Last 12 in TLN w/ no Derogs";
	ppm	UNKNOWN	crd	pMtg30Last12inTLNwnoDerogs		"Mtg 30 Last 12 in TLN w/ no Derogs";
	ppm	UNKNOWN	crd	pMtg60Last12inTLNwnoDerogs		"Mtg 60 Last 12 in TLN w/ no Derogs";
	ppm	UNKNOWN	crd	pMtg90Last12inTLNwnoDerogs		"Mtg 90 Last 12 in TLN w/ no Derogs";
	ppm	UNKNOWN	crd	pMtgConsumer120Last12noDerogs		"Mtg Consumer 120+ Last 12 no Derogs";
	ppm	UNKNOWN	crd	pMtgConsumer120Last24noDerogs		"Mtg Consumer 120+ Last 24 no Derogs";
	ppm	UNKNOWN	crd	pMtgConsumer120Last36noDerogs		"Mtg Consumer 120+ Last 36 no Derogs";
	ppm	UNKNOWN	crd	pMtgConsumer120Last84noDerogs		"Mtg Consumer 120+ Last 84 no Derogs";
	ppm	UNKNOWN	crd	pMtgConsumer30Last12noDerogs		"Mtg Consumer 30 Last 12 no Derogs";
	ppm	UNKNOWN	crd	pMtgConsumer30Last12RollingnoDerogs		"Mtg Consumer 30 Last 12 Rolling no Derogs";
	ppm	UNKNOWN	crd	pMtgConsumer30Last24noDerogs		"Mtg Consumer 30 Last 24 no Derogs";
	ppm	UNKNOWN	crd	pMtgConsumer60Last12noDerogs		"Mtg Consumer 60 Last 12 no Derogs";
	ppm	UNKNOWN	crd	pMtgConsumer60Last24noDerogs		"Mtg Consumer 60 Last 24 no Derogs";
	ppm	UNKNOWN	crd	pMtgConsumer90Last12noDerogs		"Mtg Consumer 90 Last 12 no Derogs";
	ppm	UNKNOWN	crd	pMtgConsumer90Last24noDerogs		"Mtg Consumer 90 Last 24 no Derogs";
	ppm	UNKNOWN	app	pNo-ofApplicants		"No. of Applicants";
	ppm	UNKNOWN	app	pNo-ofLatesandDerogsin24Mos		"No. of Lates and Derogs in 24 Mos";
	ppm	UNKNOWN	app	pNo-ofLatesandDerogsin36Mos		"No. of Lates and Derogs in 36 Mos";
	ppm	UNKNOWN	app	pNo-ofLatesandDerogsin84Mos		"No. of Lates and Derogs in 84 Mos";
	ppm	UNKNOWN	crd	pNoDataInMtgPaymentPattern		"NoDataInMtgPaymentPattern";
	ppm	text	app	pNoMI		"No MI";
	ppm	text	app	pNonWarrantableCondo		"Non Warrantable Condo";
	ppm	UNKNOWN	app	pNotesReceivableInstallment-AllApp		"Notes Receivable Installment - All App";
	ppm	numeric	app	pNumberOfUnits		"No. of Units";
	ppm	text	app	pOccupancy		"Occupancy";
	ppm	UNKNOWN	crd	pofMortActs-ForNatl		"# of Mort Acts-For Natl";
	ppm	UNKNOWN	crd	pofMortActs-HghstIncBorr(RepScorewSingle)		"# of Mort Acts-Hghst Inc Borr (Rep Score w/Single)";
	ppm	UNKNOWN	crd	pofMortActs-LowRepScore(wSingle)Borr		"# of Mort Acts-Low Rep Score (w/Single) Borr";
	ppm	money	app	pOtherCredit		"Other Credit";
	ppm	numeric	app	pOtherFinancing		"Other Financing";
	ppm	numeric	app	pOtherLoanAmount		"Other Loan Amount";
	ppm	numeric	crd	pOutsideFinancing		"Outside Financing";
	ppm	UNKNOWN	crd	pOwnershipType-Borr1		"OwnershipType-Borr 1";
	ppm	UNKNOWN	app	pPensionRetirementIncome-AllApp		"Pension/Retirement Income - All App";
	ppm	money	app	pPmiMipFundingFee		"PMI MIP Funding Fee";
	ppm	text	app	pPmiMipFundingFeeFinanced		"PMI MIP Funding Fee Financed";
	ppm	UNKNOWN	crd	pPPSD-TodayDuration		"PPSD-TodayDuration";
	ppm	UNKNOWN	app	pPrBorrForNatlMid(wSingle)Score		"Pr Borr For Natl Mid (w/Single) Score";
	ppm	numeric	app	pPrBorrHghstIncSelfEmployment		"Pr Borr Hghst Inc Self Employment";
	ppm	UNKNOWN	app	pPrBorrLowScoreMid(wSingle)Score		"Pr Borr Low Score Mid (w/Single) Score";
	ppm	numeric	app	pPrepayTerm-Loan		"Prepay Term-Loan";
	ppm	numeric	app	pPresentFirstMortgagePI		"Present First Mortgage P and I";
	ppm	numeric	app	pPresentHazardInsurance		"Present Hazard Insurance";
	ppm	numeric	app	pPresentHoaDues		"Present Homeowner Assn. Dues";
	ppm	numeric	app	pPresentMonthlyRent		"Present Monthly Rent";
	ppm	numeric	app	pPresentMtgInsurance		"Present Mortgage Insurance";
	ppm	numeric	app	pPresentOtherFinancingPI		"Present Other Financing P and I";
	ppm	numeric	app	pPresentOtherHousingExpenses		"Present Other Housing Expenses";
	ppm	numeric	app	pPresentRealEstateTaxes		"Present Real Estate Taxes";
	ppm	numeric	app	pPrice		"Price";
	ppm	UNKNOWN	app	pPrimaryApplicantsSelfEmployment		"Primary Applicants Self Employment";
	ppm	UNKNOWN	app	pPrimaryEmplState-Borr1		"Primary Empl State-Borr 1";
	ppm	UNKNOWN	app	pPrimaryEmplState-Borr2		"Primary Empl State-Borr 2";
	ppm	UNKNOWN	app	pPrimaryEmplState-Borr3		"Primary Empl State-Borr 3";
	ppm	UNKNOWN	app	pPrimaryEmplState-Borr4		"Primary Empl State-Borr 4";
	ppm	UNKNOWN	app	pPrimaryEmplState-Borr5		"Primary Empl State-Borr 5";
	ppm	numeric	crd	pPrimeBorrHighestIncMidScore		"Pr Borr Hghst Inc Mid (w/Single) Score";
	ppm	text	prd	pProgramName		"Program Name";
	ppm	numeric	app	pPropertyOwnedDuration		"Prop Acqd Duration";
	ppm	text	app	pPropertyType		"Property Type";
	ppm	numeric	app	pProposedFloodInsurance		"Proposed Flood insurance";
	ppm	numeric	app	pProposedHazardInsurance		"Proposed Hazard Insurance";
	ppm	numeric	app	pProposedHoaDues		"Proposed Homeowner Assn. Dues";
	ppm	numeric	app	pProposedMtgInsurance		"Proposed Mortgage Insurance";
	ppm	numeric	app	pProposedOtherHousingExpenses		"Proposed Other Housing Expenses";
	ppm	numeric	app	pProposedRealEstateTaxes		"Proposed Real Estate Taxes";
	ppm	numeric	app	pProposedSubjectPropertyPayment		"Proposed SubProp Mo Payment";
	ppm	money	app	pPurchasePrice		"Purchase Price";
	ppm	text	app	pPurposeOfLoan		"Purpose of Loan";
	ppm	text	prd	pRateSheetDate2		"RateSheetDate2";
	ppm	text	app	pRefinanceType		"RefinanceType";
	ppm	money	app	pRelocationFunds		"Relocation Funds";
	ppm	UNKNOWN	app	pREMortDiffIncome-AllApp		"RE Mort Diff Income - All App";
	ppm	UNKNOWN	app	pREOswGrossRent		"REOs w/ Gross Rent";
	ppm	UNKNOWN	app	pREOswGrossRentnotSubProp		"REOs w/Gross Rent not Sub Prop";
	ppm	UNKNOWN	crd	pRepScore(wSingle)Borr1		"Rep Score (w/Single) Borr 1";
	ppm	UNKNOWN	crd	pRepScore(wSingle)Borr2		"Rep Score (w/Single) Borr 2";
	ppm	UNKNOWN	crd	pRepScore(wSingle)Borr3		"Rep Score (w/Single) Borr 3";
	ppm	UNKNOWN	crd	pRepScore(wSingle)Borr4		"Rep Score (w/Single) Borr 4";
	ppm	UNKNOWN	crd	pRepScore(wSingle)Borr5		"Rep Score (w/Single) Borr 5";
	ppm	money	app	pReviewValue		"ReviewValue";
	ppm	UNKNOWN	crd	pRolling30s		"Rolling 30s";
	ppm	UNKNOWN	app	pSelfEmployInd-CoApp1		"Self Employ Ind-Co App 1";
	ppm	UNKNOWN	app	pSelfEmployInd-CoApp2		"Self Employ Ind-Co App 2";
	ppm	UNKNOWN	app	pSelfEmployInd-CoApp3		"Self Employ Ind-Co App 3";
	ppm	UNKNOWN	app	pSelfEmployInd-CoApp4		"Self Employ Ind-Co App 4";
	ppm	money	app	pSellerCredit		"Seller Credit";
	ppm	money	app	pSellersContributionToClosingCost		"Sellers Contribution to Closing Cost";
	ppm	UNKNOWN	crd	pSingleScore-Primary		"SingleScore-Primary";
	ppm	UNKNOWN	app	pSocialSecurityDisabilityIncome-AllApp		"Social Security/Disability Income - All App";
	ppm	numeric	app	pSubFinancing		"Sub Financing";
	ppm	numeric	app	pSubFinancingPayment		"Sub Fin Mo Payments";
	ppm	UNKNOWN	app	pSubjectPropertyCity		"Subject Property City";
	ppm	text	app	pSubjectPropertyState		"State of the Subject Property";
	ppm	text	app	pSubjectPropertyZipcode		"SubjectPropertyZipcode";
	ppm	UNKNOWN	crd	pTaxLiensFiledin24Mos		"Tax Liens Filed in 24 Mos";
	ppm	UNKNOWN	crd	pTaxLiensFiledin36Mos		"Tax Liens Filed in 36 Mos";
	ppm	UNKNOWN	crd	pTaxLiensFiledin84Mos		"Tax Liens Filed in 84 Mos";
	ppm	UNKNOWN	app	pTotalGrossRent		"Total Gross Rent";
	ppm	money	app	pTotalIncome		"Total Income";
	ppm	money	app	pTrailingSpouseIncome		"Trailing Spouse Inc-All App";
	ppm	UNKNOWN	app	pTrustIncome-AllApp		"Trust Income - All App";
	ppm	UNKNOWN	app	pTypeofRefinance		"Type of Refinance";
	ppm	text	app	pUDFStr2		"UDFStr2";
	ppm	UNKNOWN	crd	pUniqueCreditModelCountBorrower1		"Unique Credit Model Count Borrower 1";
	ppm	text	app	pUserType		"User Type";
	ppm	UNKNOWN	crd	pValidMtgTrades-12MoHistPdCurrentBorr1		"Valid Mtg Trades-12 Mo Hist Pd Current Borr 1";
	ppm	UNKNOWN	crd	pValidMtgTrades-24MoHistPdCurrentBorr1		"Valid Mtg Trades-24 Mo Hist Pd Current Borr 1";
	ppm	UNKNOWN	crd	pValidTradtlTrades-24MoHistActive24MosBorr1		"Valid Tradtl Trades-24 Mo Hist Active 24 Mos Borr 1";
	ppm	UNKNOWN	app	pValidTradtlTrades-24MoHistActive24MosBorr2		"Valid Tradtl Trades-24 Mo Hist Active 24 Mos Borr 2";
	ppm	UNKNOWN	app	pValidTradtlTrades-24MoHistActive24MosBorr3		"Valid Tradtl Trades-24 Mo Hist Active 24 Mos Borr 3";
	ppm	UNKNOWN	app	pValidTradtlTrades-24MoHistActive24MosBorr4		"Valid Tradtl Trades-24 Mo Hist Active 24 Mos Borr 4";
	ppm	UNKNOWN	app	pValidTradtlTrades-24MoHistActive24MosBorr5		"Valid Tradtl Trades-24 Mo Hist Active 24 Mos Borr 5";
	ppm	UNKNOWN	crd	pValidTradtlTrades-24MoHistBorr1		"Valid Tradtl Trades-24 Mo Hist Borr 1";
	ppm	UNKNOWN	crd	pValidTradtlTrades-24MoHistBorr2		"Valid Tradtl Trades-24 Mo Hist Borr 2";
	ppm	UNKNOWN	crd	pValidTradtlTrades-24MoHistBorr3		"Valid Tradtl Trades-24 Mo Hist Borr 3";
	ppm	UNKNOWN	crd	pValidTradtlTrades-24MoHistBorr4		"Valid Tradtl Trades-24 Mo Hist Borr 4";
	ppm	UNKNOWN	crd	pValidTradtlTrades-24MoHistBorr5		"Valid Tradtl Trades-24 Mo Hist Borr 5";
	ppm	UNKNOWN	crd	pValidTradtlTrades-24MoHistOpenActive24MosBorr3		"Valid Tradtl Trades-24 Mo Hist Open Active 24 Mos Borr 3";
	ppm	UNKNOWN	crd	pValidTradtlTrades-36MoHistActive36MosBorr1		"Valid Tradtl Trades-36 Mo Hist Active 36 Mos Borr 1";
	ppm	UNKNOWN	crd	pValidTradtlTrades-36MoHistActive36MosBorr2		"Valid Tradtl Trades-36 Mo Hist Active 36 Mos Borr 2";
	ppm	UNKNOWN	crd	pValidTradtlTrades-36MoHistActive36MosBorr3		"Valid Tradtl Trades-36 Mo Hist Active 36 Mos Borr 3";
	ppm	UNKNOWN	crd	pValidTradtlTrades-36MoHistActive36MosBorr4		"Valid Tradtl Trades-36 Mo Hist Active 36 Mos Borr 4";
	ppm	UNKNOWN	crd	pValidTradtlTrades-36MoHistActive36MosBorr5		"Valid Tradtl Trades-36 Mo Hist Active 36 Mos Borr 5";
	ppm	UNKNOWN	crd	pValidTradtlTrades-MosRewd24PlusBorr1		"Valid Tradtl Trades-Mos Rewd 24 Plus Borr 1";
	ppm	UNKNOWN	crd	pValidTradtlTrades-MosRewd24PlusBorr2		"Valid Tradtl Trades-Mos Rewd 24 Plus Borr 2";
	ppm	UNKNOWN	crd	pValidTradtlTrades-MosRewd24PlusBorr3		"Valid Tradtl Trades-Mos Rewd 24 Plus Borr 3";
	ppm	UNKNOWN	crd	pValidTradtlTrades-MosRewd24PlusBorr4		"Valid Tradtl Trades-Mos Rewd 24 Plus Borr 4";
	ppm	UNKNOWN	crd	pValidTradtlTrades-MosRewd24PlusBorr5		"Valid Tradtl Trades-Mos Rewd 24 Plus Borr 5";
	ppm	UNKNOWN	crd	pVirtualForeclosureLast36		"Virtual Foreclosure Last 36";
	ppm	UNKNOWN	crd	pVirtualForeclosureLast72		"Virtual Foreclosure Last 72";
	ppm	UNKNOWN	crd	pVirtualForeclosureLast84		"Virtual Foreclosure Last 84";
	ppm	text	app	pWaiveEscrow		"Waive Escrow";
	ppm	text	app	pZoning		"Zoning";




/* ************************************************************************
                  -- Lookups that need to be imported --                  

lookup("G-LimitLTV80ZipRestrictions LK", pSubjectPropertyZipcode, globalParam);
lookup("G-LimitLTV85ZipRestrictions LK", pSubjectPropertyZipcode, globalParam);
lookup("G-Reserves NOO LK", pDocumentType, CLTV);
lookup("G-Reserves PriSec LK", DocTypeAbbrev, CLTV);
lookup("G-ThresholdArkansas2nd LK", globalParam, globalParam);
lookup("G-ThresholdGeneric1st LK", globalParam, globalParam);
lookup("G-ThresholdGeneric2nd LK", globalParam, globalParam);
lookup("G-ThresholdGenericState LK", pSubjectPropertyState, globalParam);
lookup("G-ThresholdIllinoisChicago1st LK", globalParam, globalParam);
lookup("G-ThresholdIllinoisChicago2nd LK", globalParam, globalParam);
lookup("G-ThresholdIndex1st LK", LoanTerm1st, globalParam);
lookup("G-ThresholdIndex2nd LK", LoanTerm2nd, globalParam);
lookup("G-ThresholdNotReqGenericLoanAmt LK", globalParam, pLoanAmount);
lookup("G-ThresholdNotReqGenericOccupancy LK", globalParam, pOccupancy);
lookup("G-ThresholdNotReqGenericPurpose1st LK", globalParam, pPurposeOfLoan);
lookup("G-ThresholdNotReqGenericPurpose2nd LK", globalParam, pPurposeOfLoan);
lookup("G-ThresholdNotRequiredLoanAmt LK", pSubjectPropertyState, pLoanAmount);
lookup("G-ThresholdNotRequiredOccupancy LK", pSubjectPropertyState, pOccupancy);
lookup("G-ThresholdNotRequiredPurpose1st LK", pSubjectPropertyState, pPurposeOfLoan);
lookup("G-ThresholdNotRequiredPurpose2nd LK", pSubjectPropertyState, pRateSheetDate2);
lookup("G-ThresholdRhodeIslandProvidence1st LK", globalParam, globalParam);
lookup("G-ThresholdRhodeIslandProvidence2nd LK", globalParam, globalParam);
lookup("G-ThresholdSpecificState1st LK", pSubjectPropertyState, globalParam);
lookup("G-ThresholdSpecificState2nd LK", pSubjectPropertyState, globalParam);
lookup("G-ThresholdTennesseeEQ20yr2nd LK", globalParam, globalParam);
lookup("G-ThresholdTennesseeGT20yr2nd LK", globalParam, globalParam);
lookup("G-ThresholdTennesseeLtE15yr2nd LK", globalParam, globalParam);
lookup("PoconoPaZips LK", pSubjectPropertyZipcode, globalParam);
lookup("RestrictedStateLK", pSubjectPropertyState, globalParam);
lookup("ZDbg-Debug Flags", pPrice, globalParam);


************************************************************************ */



		




// ++++++++++++++++++++++++++ Rule Definitions ++++++++++++++++++++++++++
		
alias(rule, AltA-AltA-CondRe-estdTLN1, "AltA- AltA-Cond Re-estd TLN 1");

/* ==========================================================================
 * AltA-AltA-CondRe-estdTLN1
 *
 *
 */
rule AltA-AltA-CondRe-estdTLN1()
    if(
        (LTV <= 80) &&
		((pBankruptcyChapter7 > 0) ||
		(pBankruptcyChapter13 > 0) ||
		(pConsumerCounseling > 0) ||
		(pForeclosure > 0)) &&
		((pValidTradtlTrades-24MoHistActive24MosBorr1 <= 3) ||
		((pBorr2ID > 0) &&
		(pValidTradtlTrades-24MoHistActive24MosBorr2 <= 3)) ||
		((pBorr3ID > 0) &&
		(pValidTradtlTrades-24MoHistActive24MosBorr3 <= 3)) ||
		((pBorr4ID > 0) &&
		(pValidTradtlTrades-24MoHistActive24MosBorr4 <= 3)) ||
		((pBorr5ID > 0) &&
		(pValidTradtlTrades-24MoHistActive24MosBorr5 <= 3)))
      )
    then
        
        condition(asset, docs, "Sufficient credit has not been reestablished per guidelines, mitigating factors must be present.");

    end
end	// rule AltA-AltA-CondRe-estdTLN1




alias(rule, AltA-AltA-CondRe-estdTLN2, "AltA- AltA-Cond Re-estd TLN 2");

/* ==========================================================================
 * AltA-AltA-CondRe-estdTLN2
 *
 *
 */
rule AltA-AltA-CondRe-estdTLN2()
    if(
        (LTV > 80) &&
		((pBankruptcyChapter7 > 0) ||
		(pBankruptcyChapter13 > 0) ||
		(pConsumerCounseling > 0) ||
		(pForeclosure > 0)) &&
		((pValidTradtlTrades-36MoHistActive36MosBorr1 <= 3) ||
		((pBorr2ID > 0) &&
		(pValidTradtlTrades-36MoHistActive36MosBorr2 <= 3)) ||
		((pBorr3ID > 0) &&
		(pValidTradtlTrades-36MoHistActive36MosBorr3 <= 3)) ||
		((pBorr4ID > 0) &&
		(pValidTradtlTrades-36MoHistActive36MosBorr4 <= 3)) ||
		((pBorr5ID > 0) &&
		(pValidTradtlTrades-36MoHistActive36MosBorr5 <= 3)))
      )
    then
        
        condition(asset, docs, "Sufficient credit has not been reestablished per guidelines, mitigating factors must be present.");

    end
end	// rule AltA-AltA-CondRe-estdTLN2





/* ==========================================================================
 * AltA-Cashout
 *
 *
 */
rule AltA-Cashout()
    if(
        (LTV > 80)
      )
    then
        

    end
end	// rule AltA-Cashout




alias(rule, AltA-CondAllLoansRule3, "AltA-Cond All Loans Rule 3");

/* ==========================================================================
 * AltA-CondAllLoansRule3
 *
 *
 */
rule AltA-CondAllLoansRule3()
    if(
        (pLoanAmount > 0)
      )
    then
        
        condition(property, funding, "Homeowners Insurance declaration page to include dwelling hazard, and flood coverage for all loan amounts or guaranteed replacement costs.");

    end
end	// rule AltA-CondAllLoansRule3




alias(rule, AltA-CondAllLoansRule4, "AltA-Cond All Loans Rule 4");

/* ==========================================================================
 * AltA-CondAllLoansRule4
 *
 *
 */
rule AltA-CondAllLoansRule4()
    if(
        (pLoanAmount > 0)
      )
    then
        
        condition(title, docs, "Closing Protection Letter from Title Company specific to transaction and copy of wiring instructions.");

    end
end	// rule AltA-CondAllLoansRule4




alias(rule, AltA-CondAllLoansRule5, "AltA-Cond All Loans Rule 5");

/* ==========================================================================
 * AltA-CondAllLoansRule5
 *
 *
 */
rule AltA-CondAllLoansRule5()
    if(
        ((FTHB == "Y") &&
		(pPurposeOfLoan == "Purchase") &&
		(pNumberOfUnits == 2))
      )
    then
        
        condition(property, docs, "Enhanced Desk Review in addition to the full appraisal is required.");

    end
end	// rule AltA-CondAllLoansRule5




alias(rule, AltA-CondConsumerDeliquentAccts, "AltA-Cond Consumer Deliquent Accts");

/* ==========================================================================
 * AltA-CondConsumerDeliquentAccts
 *
 *
 */
rule AltA-CondConsumerDeliquentAccts()
    if(
        (pConsumerDeliquentActs > 0)
      )
    then
        
        condition(credit, funding, "Revolving/Installment liabilities currently deliquent must be brought current prior to or at close.");

    end
end	// rule AltA-CondConsumerDeliquentAccts




alias(rule, AltA-CondDownPaymtNOORule, "AltA-Cond Down Paymt NOO Rule");

/* ==========================================================================
 * AltA-CondDownPaymtNOORule
 *
 *
 */
rule AltA-CondDownPaymtNOORule()
    if(
        (pPurposeOfLoan == "Purchase") &&
		(pOccupancy == "Investment") &&
		(pDocumentType != "SISA") &&
		(pDocumentType != "NINA") &&
		(pDocumentType != "No Doc")
      )
    then
        DownPymtReqdAmt = ".10" * propertyValue;
		
        condition(asset, docs, "Borrower must contribute minimum of 10% down payment to be sourced and seasoned for at least 60 days before the date of the loan application.");

    end
end	// rule AltA-CondDownPaymtNOORule




alias(rule, AltA-CondDownPaymtRule1, "AltA-Cond Down Paymt Rule 1");

/* ==========================================================================
 * AltA-CondDownPaymtRule1
 *
 *
 */
rule AltA-CondDownPaymtRule1()
    if(
        (pPurposeOfLoan == "Purchase") &&
		(pDocumentType != "SISA") &&
		(pDocumentType != "NINA") &&
		(pDocumentType != "No Doc") &&
		(CLTV <= 95) &&
		(CLTV > 80)
      )
    then
        DownPymtReqdAmt = 0.05 * propertyValue;
		
        condition(asset, docs, "Borrower must contribute minimum of 5% down payment to be sourced and seasoned for at least 60 days before the date of the loan application.");

    end
end	// rule AltA-CondDownPaymtRule1




alias(rule, AltA-CondDownPaymtRule2, "AltA-Cond Down Paymt Rule 2");

/* ==========================================================================
 * AltA-CondDownPaymtRule2
 *
 *
 */
rule AltA-CondDownPaymtRule2()
    if(
        (pPurposeOfLoan == "Purchase") &&
		(pDocumentType != "SISA") &&
		(pDocumentType != "NINA") &&
		(pDocumentType != "No Doc") &&
		(CLTV > 95) &&
		(CLTV < 100)
      )
    then
        DownPymtReqdAmt = 0.03 * propertyValue;
		
        condition(asset, docs, "Borrower must contribute minimum of 3% down payment to be sourced and seasoned for at least 60 days before the date of the loan application.");

    else
        DownPymtReqdAmt = 0;
		

    end
end	// rule AltA-CondDownPaymtRule2




alias(rule, AltA-CondEarnestDepositRule1, "AltA-Cond Earnest Deposit Rule 1");

/* ==========================================================================
 * AltA-CondEarnestDepositRule1
 *
 *
 */
rule AltA-CondEarnestDepositRule1()
    if(
        (pPurposeOfLoan == "Purchase") &&
		(EarnestDepositPerc > 2) &&
		(EarnestDepositPerc <= 10)
      )
    then
        
        condition(income, docs, "All earnest monies in excess of two (2) percent of the purchase price must be fully verified when the program require asset verification.");

    end
end	// rule AltA-CondEarnestDepositRule1




alias(rule, AltA-CondEarnestDepositRule2, "AltA-Cond Earnest Deposit Rule 2");

/* ==========================================================================
 * AltA-CondEarnestDepositRule2
 *
 *
 */
rule AltA-CondEarnestDepositRule2()
    if(
        (pPurposeOfLoan == "Purchase") &&
		(EarnestDepositPerc > 10)
      )
    then
        
        condition(income, docs, "Earnest Money verification required regardless of doc type when earnest money deposit > 10%.");

    end
end	// rule AltA-CondEarnestDepositRule2




alias(rule, AltA-CondForNatlRule1, "AltA-Cond For Natl Rule 1");

/* ==========================================================================
 * AltA-CondForNatlRule1
 *
 *
 */
rule AltA-CondForNatlRule1()
    if(
        (ForeignNationalIndicator == "Y")
      )
    then
        
        condition(credit, docs, "Foreign Nationals with diplomatic immunity are not eligible for financing.");
        condition(credit, docs, "If the borrower does not have a tax identification number or social security number, then a copy of the Certificate of Foreign Status (IRS form W-8 BEN) must be retained in the file.");
        condition(credit, docs, "A copy of the borrowers passport and visa must be obtained to verify eligibility.");
        condition(credit, docs, "Taxes and insurance must be impounded, unless prohibited by law.");

    end
end	// rule AltA-CondForNatlRule1




alias(rule, AltA-CondForNatlRule2, "AltA-Cond For Natl Rule 2");

/* ==========================================================================
 * AltA-CondForNatlRule2
 *
 *
 */
rule AltA-CondForNatlRule2()
    if(
        ((pCitizenshipBorr1 == "ForeignNational") &&
		(pValidTradtlTrades-24MoHistActive24MosBorr1 < 3)) ||
		((pCitizenshipBorr2 == "ForeignNational") &&
		(pValidTradtlTrades-24MoHistActive24MosBorr2 < 3)) ||
		((pCitizenshipBorr3 == "ForeignNational") &&
		(pValidTradtlTrades-24MoHistActive24MosBorr3 < 3)) ||
		((pCitizenshipBorr4 == "ForeignNational") &&
		(pValidTradtlTrades-24MoHistActive24MosBorr4 < 3)) ||
		((pCitizenshipBorr5 == "ForeignNational") &&
		(pValidTradtlTrades-24MoHistActive24MosBorr5 < 3))
      )
    then
        
        condition(credit, docs, "Credit report does not provide a minimum of 3 credit references that are at least 2 years old, 
therefore, two (2) original credit letters from a lending institution located in the country 
of origin must be obtained, or four (4) U.S. non-traditional trades for 24 months must be obtained.  
All documents must be translated into English and all currency converted to US dollars.");

    end
end	// rule AltA-CondForNatlRule2




alias(rule, AltA-CondForNatlRule3, "AltA-Cond For Natl Rule 3");

/* ==========================================================================
 * AltA-CondForNatlRule3
 *
 *
 */
rule AltA-CondForNatlRule3()
    if(
        ((pCitizenshipBorr1 == "ForeignNational") ||
		(pCitizenshipBorr2 == "ForeignNational") ||
		(pCitizenshipBorr3 == "ForeignNational") ||
		(pCitizenshipBorr4 == "ForeignNational") ||
		(pCitizenshipBorr5 == "ForeignNational")) &&
		(pOccupancy == "PrimaryResidence")
      )
    then
        
        condition(asset, docs, "Borrower's Visa must allow residency for at least 12 months.");

    end
end	// rule AltA-CondForNatlRule3




alias(rule, AltA-CondGeneralRule1, "AltA-Cond General Rule 1");

/* ==========================================================================
 * AltA-CondGeneralRule1
 *
 *
 */
rule AltA-CondGeneralRule1()
    if(
        (pLoanAmount <= 1000000) &&
		(pSubjectPropertyState != "CA") ||
		((pSubjectPropertyState == "CA") &&
		(combinedLoanAmount <= 1500000))
      )
    then
        
        condition(property, docs, "Full original appraisal to satisfy Lender guidelines including a copy of the appraisers license & E&O Insurance.");

    end
end	// rule AltA-CondGeneralRule1




alias(rule, AltA-CondGeneralRule2, "AltA-Cond General Rule 2");

/* ==========================================================================
 * AltA-CondGeneralRule2
 *
 *
 */
rule AltA-CondGeneralRule2()
    if(
        (pLoanAmount > 0)
      )
    then
        
        condition(title, docs, "Title Report within 90 days to include a 24 month Chain of Title.");

    end
end	// rule AltA-CondGeneralRule2




alias(rule, AltA-CondGiftFundsRule1, "AltA-Cond Gift Funds Rule 1");

/* ==========================================================================
 * AltA-CondGiftFundsRule1
 *
 *
 */
rule AltA-CondGiftFundsRule1()
    if(
        (pGiftFunds > 0)
      )
    then
        
        condition(property, docs, "The donor must execute a gift letter stating the donors name, address, relationship to the borrower (must be an immediate family member or other appropriate relation), amount of gift and that no repayment is expected.");
        condition(property, docs, "Verification of the transfer of gift funds is required via a bank statement to show deposit (to match the gift letter) for borrower.");

    end
end	// rule AltA-CondGiftFundsRule1




alias(rule, AltA-CondGiftFundsRule2, "AltA-Cond Gift Funds Rule 2");

/* ==========================================================================
 * AltA-CondGiftFundsRule2
 *
 *
 */
rule AltA-CondGiftFundsRule2()
    if(
        (purposeAbbrev == "P") &&
		(CLTV > 80) &&
		(pDownpaymentAmnt > 0) &&
		(pDownpaymentAmnt == pGiftFunds)
      )
    then
        
        condition(property, docs, "Proof of 12 months residency required.The entire down payment can not be in the form of gift funds unless it is from the family member who has resided with the borrower for at least 12 months, and who will reside in the subject property.");

    end
end	// rule AltA-CondGiftFundsRule2




alias(rule, AltA-CondGiftofEquityRule1, "AltA-Cond Gift of Equity Rule 1");

/* ==========================================================================
 * AltA-CondGiftofEquityRule1
 *
 *
 */
rule AltA-CondGiftofEquityRule1()
    if(
        (pGiftofEquity > 0) ||
		(pEquityfromSubProp > 0)
      )
    then
        
        condition(income, docs, "Gift of Equity must come from a family member or other appropriate relation.");

    end
end	// rule AltA-CondGiftofEquityRule1




alias(rule, AltA-CondGiftofEquityRule2, "AltA-Cond Gift of Equity Rule 2");

/* ==========================================================================
 * AltA-CondGiftofEquityRule2
 *
 *
 */
rule AltA-CondGiftofEquityRule2()
    if(
        (pGiftofEquity > 0) ||
		(pEquityfromSubProp > 0)
      )
    then
        
        condition(income, docs, "The donor must execute a gift letter stating the donors name and address, relationship to the borrower, amount of equity gift and that no repayment is expected.");

    end
end	// rule AltA-CondGiftofEquityRule2




alias(rule, AltA-CondGiftofEquityRule3, "AltA-Cond Gift of Equity Rule 3");

/* ==========================================================================
 * AltA-CondGiftofEquityRule3
 *
 *
 */
rule AltA-CondGiftofEquityRule3()
    if(
        (pGiftofEquity > 0) ||
		(pEquityfromSubProp > 0)
      )
    then
        
        condition(income, docs, "HUD-1 Settlement Statement must reflect the gift of equity.");

    end
end	// rule AltA-CondGiftofEquityRule3




alias(rule, AltA-CondGiftofEquityRule4, "AltA-Cond Gift of Equity Rule 4");

/* ==========================================================================
 * AltA-CondGiftofEquityRule4
 *
 *
 */
rule AltA-CondGiftofEquityRule4()
    if(
        (pGiftofEquity > 0) ||
		(pEquityfromSubProp > 0)
      )
    then
        
        condition(purchase, docs, "On purchase transactions, the contract of sale must also indicate the gift of equity.");

    end
end	// rule AltA-CondGiftofEquityRule4




alias(rule, AltA-ConditionsDocReqRule1, "AltA-Conditions Doc Req Rule 1");

/* ==========================================================================
 * AltA-ConditionsDocReqRule1
 *
 *
 */
rule AltA-ConditionsDocReqRule1()
    if(
        (pDocumentType == "Full Doc") &&
		((pPrimaryApplicantsSelfEmployment == 0) ||
		(pSelfEmployInd-CoApp1 == "N") ||
		(pSelfEmployInd-CoApp2 == "N") ||
		(pSelfEmployInd-CoApp3 == "N") ||
		(pSelfEmployInd-CoApp4 == "N"))
      )
    then
        
        condition(income, docs, "Written VOE, or most recent computer generated or typed paystub(s) covering 30 day period with YTD earnings.");
        condition(income, docs, "W2's from all employers for the past 2 years.");
        condition(income, funding, "Signed IRS Form 4506-T required at closing.");

    end
end	// rule AltA-ConditionsDocReqRule1




alias(rule, AltA-ConditionsDocReqRule10, "AltA-Conditions Doc Req Rule 10");

/* ==========================================================================
 * AltA-ConditionsDocReqRule10
 *
 *
 */
rule AltA-ConditionsDocReqRule10()
    if(
        (pDocumentType == "No Doc with Assets")
      )
    then
        
        condition(income, docs, "Completed, signed and dated final Fannie Mae 1003 Application covering a 2 year period with no employment or income stated.");
        condition(income, docs, "Selected document type is subject to pass reasonableness and will be considered as a part of the overall credit profile.");

    end
end	// rule AltA-ConditionsDocReqRule10




alias(rule, AltA-ConditionsDocReqRule11, "AltA-Conditions Doc Req Rule 11");

/* ==========================================================================
 * AltA-ConditionsDocReqRule11
 *
 *
 */
rule AltA-ConditionsDocReqRule11()
    if(
        ((pDocumentType == "No Ratio") ||
		(pDocumentType == "SISA") ||
		(pDocumentType == "NINA")) &&
		((pPrimaryApplicantsSelfEmployment > 0) ||
		(pSelfEmployInd-CoApp1 == "Y") ||
		(pSelfEmployInd-CoApp2 == "Y") ||
		(pSelfEmployInd-CoApp3 == "Y") ||
		(pSelfEmployInd-CoApp4 == "Y"))
      )
    then
        
        condition(income, docs, "CPA/Accountant letter for proof borrower has been self-employed in the same line of work for at least (2) two years, or (2) two years business license; both require verification that business is still active.");

    end
end	// rule AltA-ConditionsDocReqRule11




alias(rule, AltA-ConditionsDocReqRule2, "AltA-Conditions Doc Req Rule 2");

/* ==========================================================================
 * AltA-ConditionsDocReqRule2
 *
 *
 */
rule AltA-ConditionsDocReqRule2()
    if(
        (pDocumentType == "Full Doc") &&
		((pPrimaryApplicantsSelfEmployment > 0) ||
		(pSelfEmployInd-CoApp1 == "Y") ||
		(pSelfEmployInd-CoApp2 == "Y") ||
		(pSelfEmployInd-CoApp3 == "Y") ||
		(pSelfEmployInd-CoApp4 == "Y"))
      )
    then
        
        condition(income, docs, "Two (2) years tax returns, business & personal, including all schedules; YTD profit & loss.");
        condition(income, funding, "Tax returns with all schedules and profit and loss statements are required to be signed at closing.");
        condition(income, funding, "Signed IRS Form 4506-T required at closing.");

    end
end	// rule AltA-ConditionsDocReqRule2




alias(rule, AltA-ConditionsDocReqRule3, "AltA-Conditions Doc Req Rule 3");

/* ==========================================================================
 * AltA-ConditionsDocReqRule3
 *
 *
 */
rule AltA-ConditionsDocReqRule3()
    if(
        (pDocumentType == "Limited Doc")
      )
    then
        
        condition(income, docs, "Twelve (12) months consecutive personal bank statements - must include all pages.");
        condition(income, docs, "All the individuals on the bank statement must be borrower on the loan.");

    end
end	// rule AltA-ConditionsDocReqRule3




alias(rule, AltA-ConditionsDocReqRule4, "AltA-Conditions Doc Req Rule 4");

/* ==========================================================================
 * AltA-ConditionsDocReqRule4
 *
 *
 */
rule AltA-ConditionsDocReqRule4()
    if(
        (pDocumentType == "Lite Doc")
      )
    then
        
        condition(income, docs, "Six (6) months consecutive personal bank statements-must include all pages.");
        condition(income, docs, "All individuals shown on the personal bank statement must be borrowers on the loan.");
        condition(income, docs, "CPA/Accountant letter for proof borrower has been self-employed in the same line of work for at least (2) two years, or (2) two years business license; both require verification that business is still active.");

    end
end	// rule AltA-ConditionsDocReqRule4




alias(rule, AltA-ConditionsDocReqRule5, "AltA-Conditions Doc Req Rule 5");

/* ==========================================================================
 * AltA-ConditionsDocReqRule5
 *
 *
 */
rule AltA-ConditionsDocReqRule5()
    if(
        (pDocumentType == "SIVA")
      )
    then
        
        condition(income, docs, "Stated income must be reasonable in relation to the credit profile submitted (Assets, job type/duration, housing payment, etc.) - subject to underwriter review.");

    end
end	// rule AltA-ConditionsDocReqRule5




alias(rule, AltA-ConditionsDocReqRule5a, "AltA-Conditions Doc Req Rule 5a");

/* ==========================================================================
 * AltA-ConditionsDocReqRule5a
 *
 *
 */
rule AltA-ConditionsDocReqRule5a()
    if(
        ((pDocumentType == "SIVA") ||
		(pDocumentType == "Limited Doc")) &&
		((pPrimaryApplicantsSelfEmployment > 0) ||
		(fIsSelfEmployed == "TRUE") ||
		(pSelfEmployInd-CoApp1 == "Y") ||
		(pSelfEmployInd-CoApp2 == "Y") ||
		(pSelfEmployInd-CoApp3 == "Y") ||
		(pSelfEmployInd-CoApp4 == "Y"))
      )
    then
        
        condition(income, docs, "CPA/Accountant letter for proof borrower has been self-employed in the same line of work for at least (2) two years, or (2) two years business license; both require verification that business is still active.");

    end
end	// rule AltA-ConditionsDocReqRule5a




alias(rule, AltA-ConditionsDocReqRule6, "AltA-Conditions Doc Req Rule 6");

/* ==========================================================================
 * AltA-ConditionsDocReqRule6
 *
 *
 */
rule AltA-ConditionsDocReqRule6()
    if(
        (pDocumentType == "No Ratio")
      )
    then
        
        condition(income, docs, "Completed, signed and dated final Fannie Mae 1003 Application covering a 2 year period with employment stated but no income stated is required.");
        condition(income, docs, "Selected document type is subject to pass reasonableness and will be considered as a part of the overall credit profile.");

    end
end	// rule AltA-ConditionsDocReqRule6




alias(rule, AltA-ConditionsDocReqRule7, "AltA-Conditions Doc Req Rule 7");

/* ==========================================================================
 * AltA-ConditionsDocReqRule7
 *
 *
 */
rule AltA-ConditionsDocReqRule7()
    if(
        (pDocumentType == "SISA")
      )
    then
        
        condition(income, docs, "Stated income/assets must be reasonable in relation to the credit profile submitted (Job type/duration, housing payment, etc.) - subject to underwriter review.");
        condition(asset, docs, "Completed, signed, and dated final Fannie Mae 1003 application covering a two year period with employment, stated income, and stated source of assets to cover costs to close.");

    end
end	// rule AltA-ConditionsDocReqRule7




alias(rule, AltA-ConditionsDocReqRule8, "AltA-Conditions Doc Req Rule 8");

/* ==========================================================================
 * AltA-ConditionsDocReqRule8
 *
 *
 */
rule AltA-ConditionsDocReqRule8()
    if(
        (pDocumentType == "NINA")
      )
    then
        
        condition(income, docs, "Completed, signed and dated final Fannie Mae 1003 Application covering a two year period with no income or assets stated is required.");
        condition(income, docs, "Selected document type is subject to pass reasonableness and will be considered as a part of the overall credit profile.");

    end
end	// rule AltA-ConditionsDocReqRule8




alias(rule, AltA-ConditionsDocReqRule9, "AltA-Conditions Doc Req Rule 9");

/* ==========================================================================
 * AltA-ConditionsDocReqRule9
 *
 *
 */
rule AltA-ConditionsDocReqRule9()
    if(
        (pDocumentType == "No Doc")
      )
    then
        
        condition(income, docs, "Completed, signed and dated final Fannie Mae 1003 Application covering a 2 year period with no employment, income or assets stated is required.");
        condition(income, docs, "Selected document type is subject to pass reasonableness and will be considered as a part of the overall credit profile.");

    end
end	// rule AltA-ConditionsDocReqRule9




alias(rule, AltA-ConditionsDocVODReqRule, "AltA-Conditions Doc VOD Req Rule");

/* ==========================================================================
 * AltA-ConditionsDocVODReqRule
 *
 *
 */
rule AltA-ConditionsDocVODReqRule()
    if(
        (reservesReqd == "NA") ||
		(ReservesReqdAmt == 0) ||
		(pDocumentType == "SISA") ||
		(pDocumentType == "NINA") ||
		(pDocumentType == "No Doc")
      )
    then
        

    end
end	// rule AltA-ConditionsDocVODReqRule




alias(rule, AltA-ConditionsDocVOESameLineWork, "AltA-Conditions Doc VOE SameLineWork");

/* ==========================================================================
 * AltA-ConditionsDocVOESameLineWork
 *
 *
 */
rule AltA-ConditionsDocVOESameLineWork()
    if(
        (pDocumentType == "SIVA") ||
		(pDocumentType == "SISA") ||
		(pDocumentType == "No Ratio") ||
		(pDocumentType == "NINA") ||
		(pDocumentType == "Full Doc") ||
		(pDocumentType == "Lite Doc") ||
		(pDocumentType == "Limited Doc")
      )
    then
        
        condition(income, docs, "Verbal VOE for a complete 2yrs same line of work with no employment gaps within 10 days of closing. (performed by Lender)");

    end
end	// rule AltA-ConditionsDocVOESameLineWork




alias(rule, AltA-CondLeasehold, "AltA-Cond Leasehold");

/* ==========================================================================
 * AltA-CondLeasehold
 *
 *
 */
rule AltA-CondLeasehold()
    if(
        (pEstateHeld == "Leasehold")
      )
    then
        
        condition(property, docs, "The term of the leasehold must be 10 years greater than the maturity date of the Mortgage.");
        condition(property, docs, "The lease must be valid, in good standing, assignable or transferable, in full force and effect, and must be recorded.");
        condition(property, docs, "The ground rent must be current or paid at closing.");
        condition(property, docs, "The appraisal report must clearly support market acceptance of leasehold properties such as the subject.");

    end
end	// rule AltA-CondLeasehold




alias(rule, AltA-CondLnAmtRule1, "AltA-Cond Ln Amt Rule 1");

/* ==========================================================================
 * AltA-CondLnAmtRule1
 *
 *
 */
rule AltA-CondLnAmtRule1()
    if(
        ((combinedLoanAmount > 650000) &&
		(combinedLoanAmount <= 1000000)) &&
		(pSubjectPropertyState != "CA")
      )
    then
        
        condition(property, docs, "An enhanced desk review is required in addition to the original appraisal.");

    end
end	// rule AltA-CondLnAmtRule1




alias(rule, AltA-CondLnAmtRule2, "AltA-Cond Ln Amt Rule 2");

/* ==========================================================================
 * AltA-CondLnAmtRule2
 *
 *
 */
rule AltA-CondLnAmtRule2()
    if(
        (combinedLoanAmount > 1000000) &&
		(pSubjectPropertyState != "CA")
      )
    then
        
        condition(property, docs, "Two (2) original appraisals; the second appraisal must be performed by a national appraisal company. (Approved by Lender) 
 The value used to determine the LTV/CLTV will be the lesser of the two values. Include License and E & O Insurance.");

    end
end	// rule AltA-CondLnAmtRule2




alias(rule, AltA-CondMaxCashOut, "AltA-Cond Max Cash Out");

/* ==========================================================================
 * AltA-CondMaxCashOut
 *
 *
 */
rule AltA-CondMaxCashOut()
    if(
        (MaxCashOut != "NA") &&
		(pPurposeOfLoan == "Refinance") &&
		(pTypeofRefinance == "CashOutOther") &&
		(EstimatedCashtoBorrower > MaxCashOut)
      )
    then
        
        condition(asset, docs, "Cash out cannot exceed <DPM>Max Cash Out</DPM>");

    end
end	// rule AltA-CondMaxCashOut




alias(rule, AltA-CondNon-OccCo-BorrIIRule1, "AltA-Cond Non-Occ Co-Borr II Rule 1");

/* ==========================================================================
 * AltA-CondNon-OccCo-BorrIIRule1
 *
 *
 */
rule AltA-CondNon-OccCo-BorrIIRule1()
    if(
        (pPurposeOfLoan == "Purchase") &&
		(pOccupancy == "PrimaryResidence") &&
		((pDeclBorr1AppNonOccupancy == "N") ||
		(pDeclBorr2AppNonOccupancy == "N") ||
		(pDeclBorr3AppNonOccupancy == "N") ||
		(pDeclBorr4AppNonOccupancy == "N") ||
		(pDeclBorr5AppNonOccupancy == "N")) &&
		((LTV > 95) ||
		(CLTV > 95))
      )
    then
        
        condition(asset, docs, "The owner occupant borrower(s) must make the first 3% of the down payment from his/her own funds.");

    end
end	// rule AltA-CondNon-OccCo-BorrIIRule1




alias(rule, AltA-CondNon-OccCo-BorrIIRule2, "AltA-Cond Non-Occ Co-Borr II Rule 2");

/* ==========================================================================
 * AltA-CondNon-OccCo-BorrIIRule2
 *
 *
 */
rule AltA-CondNon-OccCo-BorrIIRule2()
    if(
        (pPurposeOfLoan == "Purchase") &&
		(pOccupancy == "PrimaryResidence") &&
		((pDeclBorr1AppNonOccupancy == "N") ||
		(pDeclBorr2AppNonOccupancy == "N") ||
		(pDeclBorr3AppNonOccupancy == "N") ||
		(pDeclBorr4AppNonOccupancy == "N") ||
		(pDeclBorr5AppNonOccupancy == "N")) &&
		((LTV > 80) ||
		(CLTV > 80))
      )
    then
        
        condition(asset, docs, "The owner occupant borrower(s) must make the first 5% of the down payment from his/her own funds.");

    end
end	// rule AltA-CondNon-OccCo-BorrIIRule2




alias(rule, AltA-CondNon-OccCo-BorrIRule1, "AltA-Cond Non-Occ Co-Borr I Rule 1");

/* ==========================================================================
 * AltA-CondNon-OccCo-BorrIRule1
 *
 *
 */
rule AltA-CondNon-OccCo-BorrIRule1()
    if(
        (pOccupancy == "PrimaryResidence") &&
		((pDeclBorr1AppNonOccupancy == "N") ||
		(pDeclBorr2AppNonOccupancy == "N") ||
		(pDeclBorr3AppNonOccupancy == "N") ||
		(pDeclBorr4AppNonOccupancy == "N") ||
		(pDeclBorr5AppNonOccupancy == "N"))
      )
    then
        
        condition(property, docs, "Non-occupant co-borrower must be an immediate family member (parent, child, brother, or sister) of the primary applicant. Verification of relationship is required.");
        condition(property, docs, "The Note and Security Instrument must be signed by both occupant and non-occupant borrowers.");
        condition(property, docs, "Co-signer(s) or guarantor(s) not allowed.");

    end
end	// rule AltA-CondNon-OccCo-BorrIRule1




alias(rule, AltA-CondNon-OccCo-BorrIRule2, "AltA-Cond Non-Occ Co-Borr I Rule 2");

/* ==========================================================================
 * AltA-CondNon-OccCo-BorrIRule2
 *
 *
 */
rule AltA-CondNon-OccCo-BorrIRule2()
    if(
        (pOccupancy == "PrimaryResidence") &&
		(((PrimaryBorrowerIndicator == "For Natl Borr") &&
		(pIncome-NonOccCoBorr-NotForNatl > 0)) ||
		((PrimaryBorrowerIndicator == "Lowest Rep Score Borr") &&
		(pIncome-NonOccCoBorr-NotLowRepScore(wSingle)Borr > 0)) ||
		((PrimaryBorrowerIndicator == "Hghst Inc Borr") &&
		(pIncome-NonOccCoBorr-NotHghstIncBorr(RepScorewSingle) > 0)))
      )
    then
        
        condition(income, docs, "Owner-occupant borrower must be qualified using his/her own financial capacity, using a housing-to-income ratio of no more than fifty percent (50%).");

    end
end	// rule AltA-CondNon-OccCo-BorrIRule2




alias(rule, AltA-CondNonOccCoBorrTitle, "AltA-Cond Non Occ Co Borr Title");

/* ==========================================================================
 * AltA-CondNonOccCoBorrTitle
 *
 *
 */
rule AltA-CondNonOccCoBorrTitle()
    if(
        (pOccupancy == "PrimaryResidence") &&
		((purposeAbbrev == "RT") ||
		(purposeAbbrev == "CO")) &&
		((pDeclBorr1AppNonOccupancy == "N") ||
		(pDeclBorr2AppNonOccupancy == "N") ||
		(pDeclBorr3AppNonOccupancy == "N") ||
		(pDeclBorr4AppNonOccupancy == "N") ||
		(pDeclBorr5AppNonOccupancy == "N"))
      )
    then
        
        condition(title, docs, "Non-occupant co-borrower must be on title for a minimum of six (6) months prior to the closing date.");

    end
end	// rule AltA-CondNonOccCoBorrTitle




alias(rule, AltA-CondNonPermResidentDocumentation, "AltA-Cond NonPermResident Documentation");

/* ==========================================================================
 * AltA-CondNonPermResidentDocumentation
 *
 *
 */
rule AltA-CondNonPermResidentDocumentation()
    if(
        (pCitizenshipOfPrimaryApplicant == "NonPermanentResidentAlien") ||
		(pCitizenshipCoBorr1 == "NonPermanentResidentAlien") ||
		(pCitizenshipCoBorr2 == "NonPermanentResidentAlien") ||
		(pCitizenshipCoBorr3 == "NonPermanentResidentAlien") ||
		(pCitizenshipCoBorr4 == "NonPermanentResidentAlien")
      )
    then
        
        condition(credit, docs, "Must provide documented evidence of temporary residency. Acceptable documentation is as follows: a current H-1, L-1 or E-1 Visa, G-Series Visa, K-1, K-3, O-1, O-2, P Series Visas. Refer to guideline for other restrictions.");

    end
end	// rule AltA-CondNonPermResidentDocumentation




alias(rule, AltA-CondNotFTHBMortHist, "AltA-Cond Not FTHB Mort Hist");

/* ==========================================================================
 * AltA-CondNotFTHBMortHist
 *
 *
 */
rule AltA-CondNotFTHBMortHist()
    if(
        ((PrimaryBorrowerIndicator == "Hghst Inc Borr") &&
		(pFTHB-HghstIncBorr(RepScorewSingle) == "Y") &&
		((pofMortActs-HghstIncBorr(RepScorewSingle) == 0) ||
		(pofMortActs-HghstIncBorr(RepScorewSingle) == "NULL"))) ||
		((PrimaryBorrowerIndicator == "Lowest Rep Score Borr") &&
		(pFTHB-LowRepScore(wSingle)Borr == "Y") &&
		((pofMortActs-LowRepScore(wSingle)Borr == 0) ||
		(pofMortActs-LowRepScore(wSingle)Borr == "NULL"))) ||
		((PrimaryBorrowerIndicator == "For Natl Borr") &&
		(pFTHB-ForNatl == "Y") &&
		((pofMortActs-ForNatl == 0) ||
		(pofMortActs-ForNatl == "NULL")))
      )
    then
        
        condition(credit, docs, "Borrower declaration indicates not a First Time Homebuyer. Borrower must provide proof of past property ownership to include last 12 months history, if applicable.");

    end
end	// rule AltA-CondNotFTHBMortHist




alias(rule, AltA-CondPublcRecordsRule1, "AltA-Cond Publc Records Rule 1");

/* ==========================================================================
 * AltA-CondPublcRecordsRule1
 *
 *
 */
rule AltA-CondPublcRecordsRule1()
    if(
        (pJudgmentAmt-Unpaid > 0) ||
		(pLienAmt-Unpaid > 0)
      )
    then
        
        condition(credit, docs, "Judgments, liens, public records must be paid at or prior to closing.");

    end
end	// rule AltA-CondPublcRecordsRule1




alias(rule, AltA-CondPublcRecordsRule2, "AltA-Cond Publc Records Rule 2");

/* ==========================================================================
 * AltA-CondPublcRecordsRule2
 *
 *
 */
rule AltA-CondPublcRecordsRule2()
    if(
        (pCollCOTrades$250 >= 1) ||
		(pCollCOAmt-Unpaid > 1000)
      )
    then
        
        condition(credit, docs, "Collection or charged-off accounts must be to be paid at or prior to closing.");

    end
end	// rule AltA-CondPublcRecordsRule2




alias(rule, AltA-CondRateTerm, "AltA-Cond Rate Term");

/* ==========================================================================
 * AltA-CondRateTerm
 *
 *
 */
rule AltA-CondRateTerm()
    if(
        (pPurposeOfLoan == "Refinance") &&
		(pTypeofRefinance == "NoCashOutRateORTerm100DollarMax")
      )
    then
        
        condition(asset, funding, "Cash back to borrower may not exceed the lesser of 2% of loan amount or $2000");

    end
end	// rule AltA-CondRateTerm




alias(rule, AltA-CondREOsGrossRent3, "AltA-Cond REOs Gross Rent 3");

/* ==========================================================================
 * AltA-CondREOsGrossRent3
 *
 *
 */
rule AltA-CondREOsGrossRent3()
    if(
        (pOccupancy == "Investment") &&
		(pREOswGrossRentnotSubProp >= 1)
      )
    then
        
        condition(income, docs, "Refer to 'Landlord Experience' section for additional requirements.");

    end
end	// rule AltA-CondREOsGrossRent3




alias(rule, AltA-CondReserves, "AltA-Cond Reserves");

/* ==========================================================================
 * AltA-CondReserves
 *
 *
 */
rule AltA-CondReserves()
    if(
        (pDocumentType == "SISA") ||
		(pDocumentType == "No Ratio")
      )
    then
        
        condition(asset, docs, "<DPM>Reserves Reqd</DPM> Months PITI Reserves required.");

    end
end	// rule AltA-CondReserves




alias(rule, AltA-CondReservesNDNINA, "AltA-Cond Reserves ND NINA");

/* ==========================================================================
 * AltA-CondReservesNDNINA
 *
 *
 */
rule AltA-CondReservesNDNINA()
    if(
        (pDocumentType == "No Doc") ||
		(pDocumentType == "NINA")
      )
    then
        reservesReqd = "NA";
		ReservesReqdAmt = 0;
		

    end
end	// rule AltA-CondReservesNDNINA




alias(rule, AltA-CondRural, "AltA-Cond Rural");

/* ==========================================================================
 * AltA-CondRural
 *
 *
 */
rule AltA-CondRural()
    if(
        (pLocation == "Rural")
      )
    then
        
        condition(property, docs, "Rural properties need to meet Lenders rural property restrictions outlined in the guidelines");

    end
end	// rule AltA-CondRural




alias(rule, AltA-CondSellerContributionRule1, "AltA-Cond Seller Contribution Rule 1");

/* ==========================================================================
 * AltA-CondSellerContributionRule1
 *
 *
 */
rule AltA-CondSellerContributionRule1()
    if(
        ((pOccupancy == "PrimaryResidence") ||
		(pOccupancy == "SecondaryResidence")) &&
		(CLTV > 90)
      )
    then
        
        condition(purchase, funding, "Max allowed seller contribution is 3%.");

    end
end	// rule AltA-CondSellerContributionRule1




alias(rule, AltA-CondSellerContributionRule2, "AltA-Cond Seller Contribution Rule 2");

/* ==========================================================================
 * AltA-CondSellerContributionRule2
 *
 *
 */
rule AltA-CondSellerContributionRule2()
    if(
        ((pOccupancy == "PrimaryResidence") ||
		(pOccupancy == "SecondaryResidence")) &&
		(CLTV > 75) &&
		(CLTV <= 90)
      )
    then
        
        condition(purchase, funding, "Max allowed seller contribution is 6%.");

    end
end	// rule AltA-CondSellerContributionRule2




alias(rule, AltA-CondSellerContributionRule3, "AltA-Cond Seller Contribution Rule 3");

/* ==========================================================================
 * AltA-CondSellerContributionRule3
 *
 *
 */
rule AltA-CondSellerContributionRule3()
    if(
        ((pOccupancy == "PrimaryResidence") ||
		(pOccupancy == "SecondaryResidence")) &&
		(CLTV <= 75)
      )
    then
        
        condition(purchase, funding, "Max allowed seller contribution is 9%.");

    end
end	// rule AltA-CondSellerContributionRule3




alias(rule, AltA-CondSellerContributionRule6, "AltA-Cond Seller Contribution Rule 6");

/* ==========================================================================
 * AltA-CondSellerContributionRule6
 *
 *
 */
rule AltA-CondSellerContributionRule6()
    if(
        (pOccupancy == "Investment")
      )
    then
        
        condition(purchase, funding, "Max allowed seller contribution is 2%.");

    end
end	// rule AltA-CondSellerContributionRule6




alias(rule, AltA-CondSellerContributionSecRes, "AltA-Cond SellerContributionSecRes");

/* ==========================================================================
 * AltA-CondSellerContributionSecRes
 *
 *
 */
rule AltA-CondSellerContributionSecRes()
    if(
        (pOccupancy == "SecondaryResidence") &&
		(CLTV > 80)
      )
    then
        
        condition(purchase, funding, "Max allowed seller contribution is 3%.");

    end
end	// rule AltA-CondSellerContributionSecRes




alias(rule, AltA-CondSubFinRule1, "AltA-Cond Sub Fin Rule 1");

/* ==========================================================================
 * AltA-CondSubFinRule1
 *
 *
 */
rule AltA-CondSubFinRule1()
    if(
        (pLienNumber == 1) &&
		(pOutsideFinancing > 0) &&
		(pPurposeOfLoan == "Refinance")
      )
    then
        
        condition(property, docs, "Subordinate Lien Holder must execute a subordination agreement.");

    end
end	// rule AltA-CondSubFinRule1




alias(rule, AltA-CondSubFinRule2, "AltA-Cond Sub Fin Rule 2");

/* ==========================================================================
 * AltA-CondSubFinRule2
 *
 *
 */
rule AltA-CondSubFinRule2()
    if(
        (pCombo == 0) &&
		(pLienNumber == 1) &&
		(pOutsideFinancing > 0)
      )
    then
        
        condition(property, docs, "Copy of the Note for subordinate second lien to show all terms. Copy of the original note is required. If the subordinate financing is HELOC; then CLTV calculation is based upon the maximum credit line regardless of the amount drawn. The qualifying rate is based upon 1% of the maximum credit line.");

    end
end	// rule AltA-CondSubFinRule2




alias(rule, AltA-CondSubPropGrossRents, "AltA-Cond Sub Prop Gross Rents");

/* ==========================================================================
 * AltA-CondSubPropGrossRents
 *
 *
 */
rule AltA-CondSubPropGrossRents()
    if(
        (pOccupancy == "Investment") &&
		(pGrossRentSubProp > 0)
      )
    then
        
        condition(income, docs, "Form 216 Operating Income Statement required.");

    end
end	// rule AltA-CondSubPropGrossRents




alias(rule, AltA-CondTransTypeRule2, "AltA-Cond Trans Type Rule 2");

/* ==========================================================================
 * AltA-CondTransTypeRule2
 *
 *
 */
rule AltA-CondTransTypeRule2()
    if(
        (pPurposeOfLoan == "ConstructionPermanent")
      )
    then
        
        condition(property, docs, "The borrower must be the primary obligor of the construction financing, must be currently on title to the land.");
        condition(property, docs, "A copy of the contract to build, with all amendments and additions and a copy of the HUD-1 for the acquisition of the land must be provided.");
        condition(property, docs, "Cash in hand to the borrower cannot exceed the lesser of $2,000 or 2% of the loan amount after the payoff of the construction loan including the related reasonable and customary closing costs and prepaid items.");
        condition(property, docs, "Form 442 Completion Certificate (with photographs) required if the estimate of value is 'Subject to repairs, alterations or conditions' or 'Subject to completion per plans and specifications'.  The original appraiser should prepare this certificate.");

    end
end	// rule AltA-CondTransTypeRule2




alias(rule, AltA-CondTransTypeRule3, "AltA-Cond Trans Type Rule 3");

/* ==========================================================================
 * AltA-CondTransTypeRule3
 *
 *
 */
rule AltA-CondTransTypeRule3()
    if(
        (pSubjectPropertyState == "TX") &&
		(pPurposeOfLoan == "Refinance") &&
		(pTypeofRefinance == "CashOutOther")
      )
    then
        
        condition(property, docs, "No open IRS liens, no leasehold estate, and limited to 10 acres.");

    end
end	// rule AltA-CondTransTypeRule3




alias(rule, AltA-CondVOMVORRule, "AltA-Cond VOM VOR Rule");

/* ==========================================================================
 * AltA-CondVOMVORRule
 *
 *
 */
rule AltA-CondVOMVORRule()
    if(
        (pLoanAmount > 1000000) ||
		(((pDocumentType == "No Doc with Assets") ||
		(pDocumentType == "No Doc")) &&
		(CLTV > 80))
      )
    then
        
        condition(credit, docs, "Verification of a complete twenty-four (24) months mortgage/rental history is required to include 0x30 history in the most recent twelve (12) months and a max of 1 x30 in the prior twelve (12) months..");

    end
end	// rule AltA-CondVOMVORRule




alias(rule, AltA-CondVOMVORRule1, "AltA-Cond VOM VOR Rule 1");

/* ==========================================================================
 * AltA-CondVOMVORRule1
 *
 *
 */
rule AltA-CondVOMVORRule1()
    if(
        (pPurposeOfLoan == "Purchase") &&
		(pOccupancy == "PrimaryResidence") &&
		(FTHB == "Y") &&
		(pOwnershipType-Borr1 != "LivingRentFree")
      )
    then
        
        condition(credit, docs, "(24) Twenty-Four months Institutional VOR or verifiable Private VOR is required.");

    end
end	// rule AltA-CondVOMVORRule1




alias(rule, AltA-CondVOMVORRule2, "AltA-Cond VOM VOR Rule 2");

/* ==========================================================================
 * AltA-CondVOMVORRule2
 *
 *
 */
rule AltA-CondVOMVORRule2()
    if(
        (pOwnershipType-Borr1 != "LivingRentFree")
      )
    then
        
        condition(credit, docs, "(24) Twenty-four months Institutional VOR / VOM or verifiable Private VOR is required.");

    end
end	// rule AltA-CondVOMVORRule2




alias(rule, AltA-Ineligible26IOARM, "AltA-Ineligible 26IOARM");

/* ==========================================================================
 * AltA-Ineligible26IOARM
 *
 *
 */
rule AltA-Ineligible26IOARM()
    if(
        (pAmortizationType == "IOARM") &&
		(amortType1st == "2/6 Mo Libor") &&
		(LTV > 80)
      )
    then
        Decision = "Referred";
		
        message(exception,  exception, "Max LTV 80% for 2/6 IO ARM.");

    end
end	// rule AltA-Ineligible26IOARM




alias(rule, AltA-IneligibleCCCSRule1, "AltA-Ineligible CCCS Rule 1");

/* ==========================================================================
 * AltA-IneligibleCCCSRule1
 *
 *
 */
rule AltA-IneligibleCCCSRule1()
    if(
        (pLoanAmount <= 1000000) &&
		(pConsumerCounseling > 0) &&
		(pCCCSFiledDuration < 24)
      )
    then
        Decision = "Referred";
		
        message(exception,  assets, "Consumer Credit Counseling Service in last 2 years is not allowed.");

    end
end	// rule AltA-IneligibleCCCSRule1




alias(rule, AltA-IneligibleCCCSRule2, "AltA-Ineligible CCCS Rule 2");

/* ==========================================================================
 * AltA-IneligibleCCCSRule2
 *
 *
 */
rule AltA-IneligibleCCCSRule2()
    if(
        (pLoanAmount <= 1000000) &&
		(pCCCSFiledDuration >= 24) &&
		((pNo-ofLatesandDerogsin24Mos > 0) ||
		(pTaxLiensFiledin24Mos > 0))
      )
    then
        Decision = "Referred";
		
        message(exception,  exception, "No late payment and/or derogatory allowed in last 2 years if there has been Consumer Credit Counseling Service > 2 years.");

    end
end	// rule AltA-IneligibleCCCSRule2




alias(rule, AltA-IneligibleCCCSRule3, "AltA-Ineligible CCCS Rule 3");

/* ==========================================================================
 * AltA-IneligibleCCCSRule3
 *
 *
 */
rule AltA-IneligibleCCCSRule3()
    if(
        (pLoanAmount > 1000000) &&
		(pConsumerCounseling > 0) &&
		(pCCCSFiledDuration < 84)
      )
    then
        Decision = "Referred";
		
        message(exception,  assets, "Consumer Credit Counseling Service in the last 7 years is not allowed.");

    end
end	// rule AltA-IneligibleCCCSRule3




alias(rule, AltA-IneligibleCCCSRule4, "AltA-Ineligible CCCS Rule 4");

/* ==========================================================================
 * AltA-IneligibleCCCSRule4
 *
 *
 */
rule AltA-IneligibleCCCSRule4()
    if(
        (pLoanAmount > 1000000) &&
		(pConsumerCounseling > 0) &&
		(pCCCSFiledDuration >= 84) &&
		((pNo-ofLatesandDerogsin84Mos > 0) ||
		(pTaxLiensFiledin84Mos > 0))
      )
    then
        Decision = "Referred";
		
        message(exception,  exception, "No late payment and/or derogatory allowed in last 7 years if there has been a Consumer Credit Counseling Service > 7 years.");

    end
end	// rule AltA-IneligibleCCCSRule4




alias(rule, AltA-IneligibleCCCSRule5, "AltA-Ineligible CCCS Rule 5");

/* ==========================================================================
 * AltA-IneligibleCCCSRule5
 *
 *
 */
rule AltA-IneligibleCCCSRule5()
    if(
        (((pLoanAmount <= 1000000) &&
		(pCCCSFiledDuration >= 24)) ||
		((pLoanAmount > 1000000) &&
		(pCCCSFiledDuration >= 84))) &&
		((pValidTradtlTrades-24MoHistActive24MosBorr1 < 3) ||
		((pBorr2ID > 0) &&
		(pValidTradtlTrades-24MoHistActive24MosBorr2 < 3)) ||
		((pBorr3ID > 0) &&
		(pValidTradtlTrades-24MoHistActive24MosBorr3 < 3)) ||
		((pBorr4ID > 0) &&
		(pValidTradtlTrades-24MoHistActive24MosBorr4 < 3)) ||
		((pBorr5ID > 0) &&
		(pValidTradtlTrades-24MoHistActive24MosBorr5 < 3)))
      )
    then
        
        condition(asset, docs, "Sufficient credit has not been reestablised per guidelines, mitigating factors must be present.");

    end
end	// rule AltA-IneligibleCCCSRule5




alias(rule, AltA-IneligibleChap13BKRuleLatesGT80, "AltA-Ineligible Chap13BKRuleLatesGT80");

/* ==========================================================================
 * AltA-IneligibleChap13BKRuleLatesGT80
 *
 *
 */
rule AltA-IneligibleChap13BKRuleLatesGT80()
    if(
        (pLoanAmount <= 1000000) &&
		(pChapter13FiledDuration >= 36) &&
		((pNo-ofLatesandDerogsin36Mos > 0) ||
		(pTaxLiensFiledin36Mos > 0))
      )
    then
        
        condition(credit, docs, "Lates after Bankruptcy exceed guideline maximum, mitigating factors must be present.");

    end
end	// rule AltA-IneligibleChap13BKRuleLatesGT80




alias(rule, AltA-IneligibleChap7BKRuleLatesGT80, "AltA-Ineligible Chap7 BKRuleLatesGT80");

/* ==========================================================================
 * AltA-IneligibleChap7BKRuleLatesGT80
 *
 *
 */
rule AltA-IneligibleChap7BKRuleLatesGT80()
    if(
        (LTV > 80) &&
		(pLoanAmount <= 1000000) &&
		(pChapter7BKClosedDuration >= 36) &&
		((pNo-ofLatesandDerogsin36Mos > 0) ||
		(pTaxLiensFiledin36Mos > 0))
      )
    then
        
        condition(credit, docs, "Lates after Bankruptcy exceed guideline maximum, mitigating factors must be present.");

    end
end	// rule AltA-IneligibleChap7BKRuleLatesGT80




alias(rule, AltA-IneligibleChapter13BKRule1, "AltA-Ineligible Chapter 13 BK Rule 1");

/* ==========================================================================
 * AltA-IneligibleChapter13BKRule1
 *
 *
 */
rule AltA-IneligibleChapter13BKRule1()
    if(
        (LTV <= 80) &&
		(pLoanAmount <= 1000000) &&
		(pBankruptcyChapter13 > 0) &&
		(BKCh13 < 24)
      )
    then
        Decision = "Referred";
		
        message(exception,  exception, "Bankruptcy Chapter 13 in the last 2 years is not allowed.");

    end
end	// rule AltA-IneligibleChapter13BKRule1




alias(rule, AltA-IneligibleChapter13BKRule2, "AltA-Ineligible Chapter 13 BK Rule 2");

/* ==========================================================================
 * AltA-IneligibleChapter13BKRule2
 *
 *
 */
rule AltA-IneligibleChapter13BKRule2()
    if(
        (LTV <= 80) &&
		(pLoanAmount <= 1000000) &&
		(BKCh13 >= 24) &&
		((pNo-ofLatesandDerogsin24Mos > 0) ||
		(pTaxLiensFiledin24Mos > 0))
      )
    then
        
        condition(credit, docs, "Lates after Bankruptcy exceed guideline maximum, mitigating factors must be present.");

    end
end	// rule AltA-IneligibleChapter13BKRule2




alias(rule, AltA-IneligibleChapter13BKRule3, "AltA-Ineligible Chapter 13 BK Rule 3");

/* ==========================================================================
 * AltA-IneligibleChapter13BKRule3
 *
 *
 */
rule AltA-IneligibleChapter13BKRule3()
    if(
        (pLoanAmount > 1000000) &&
		(pBankruptcyChapter13 > 0) &&
		(BKCh13 < 84)
      )
    then
        Decision = "Referred";
		
        message(exception,  exception, " Bankruptcy Chapter 13 in the last 7 years is not allowed.");

    end
end	// rule AltA-IneligibleChapter13BKRule3




alias(rule, AltA-IneligibleChapter13BKRule4, "AltA-Ineligible Chapter 13 BK Rule 4");

/* ==========================================================================
 * AltA-IneligibleChapter13BKRule4
 *
 *
 */
rule AltA-IneligibleChapter13BKRule4()
    if(
        (pLoanAmount > 1000000) &&
		(BKCh13 >= 84) &&
		((pNo-ofLatesandDerogsin84Mos > 0) ||
		(pTaxLiensFiledin84Mos > 0))
      )
    then
        
        condition(credit, docs, "Lates after Bankruptcy exceed guideline maximum, mitigating factors must be present.");

    end
end	// rule AltA-IneligibleChapter13BKRule4




alias(rule, AltA-IneligibleChapter13BKRuleGT80, "AltA-Ineligible Chapter 13 BK RuleGT80");

/* ==========================================================================
 * AltA-IneligibleChapter13BKRuleGT80
 *
 *
 */
rule AltA-IneligibleChapter13BKRuleGT80()
    if(
        (LTV > 80) &&
		(pLoanAmount <= 1000000) &&
		(pBankruptcyChapter13 > 0) &&
		(BKCh13 < 36)
      )
    then
        Decision = "Referred";
		
        message(exception,  exception, "Bankruptcy Chapter 13 in the last 3 years is not allowed.");

    end
end	// rule AltA-IneligibleChapter13BKRuleGT80




alias(rule, AltA-IneligibleChapter7BKRule1, "AltA-Ineligible Chapter 7 BK Rule 1");

/* ==========================================================================
 * AltA-IneligibleChapter7BKRule1
 *
 *
 */
rule AltA-IneligibleChapter7BKRule1()
    if(
        (LTV <= 80) &&
		(pLoanAmount <= 1000000) &&
		(pBankruptcyChapter7 > 0) &&
		(pChapter7BKClosedDuration < 24)
      )
    then
        Decision = "Referred";
		
        message(exception,  exception, "Bankruptcy Chapter 7 in the last 2 years is not allowed. ");

    end
end	// rule AltA-IneligibleChapter7BKRule1




alias(rule, AltA-IneligibleChapter7BKRule2, "AltA-Ineligible Chapter 7 BK Rule 2");

/* ==========================================================================
 * AltA-IneligibleChapter7BKRule2
 *
 *
 */
rule AltA-IneligibleChapter7BKRule2()
    if(
        (LTV <= 80) &&
		(pLoanAmount <= 1000000) &&
		(pChapter7BKClosedDuration >= 24) &&
		((pNo-ofLatesandDerogsin24Mos > 0) ||
		(pTaxLiensFiledin24Mos > 0))
      )
    then
        
        condition(credit, docs, "Lates after Bankruptcy exceed guideline maximum, mitigating factors must be present.");

    end
end	// rule AltA-IneligibleChapter7BKRule2




alias(rule, AltA-IneligibleChapter7BKRule3, "AltA-Ineligible Chapter 7 BK Rule 3");

/* ==========================================================================
 * AltA-IneligibleChapter7BKRule3
 *
 *
 */
rule AltA-IneligibleChapter7BKRule3()
    if(
        (pLoanAmount > 1000000) &&
		(pBankruptcyChapter7 > 0) &&
		(pChapter7BKClosedDuration < 84)
      )
    then
        Decision = "Referred";
		
        message(exception,  assets, "Bankruptcy Chapter 7 in the last 7 years is not allowed.");

    end
end	// rule AltA-IneligibleChapter7BKRule3




alias(rule, AltA-IneligibleChapter7BKRule4, "AltA-Ineligible Chapter 7 BK Rule 4");

/* ==========================================================================
 * AltA-IneligibleChapter7BKRule4
 *
 *
 */
rule AltA-IneligibleChapter7BKRule4()
    if(
        (pLoanAmount > 1000000) &&
		(pChapter7BKClosedDuration >= 84) &&
		((pNo-ofLatesandDerogsin84Mos > 0) ||
		(pTaxLiensFiledin84Mos > 0))
      )
    then
        
        condition(credit, docs, "Lates after Bankruptcy exceed guideline maximum, mitigating factors must be present.");

    end
end	// rule AltA-IneligibleChapter7BKRule4




alias(rule, AltA-IneligibleChapter7BKRuleGT80, "AltA-Ineligible Chapter 7 BK RuleGT80");

/* ==========================================================================
 * AltA-IneligibleChapter7BKRuleGT80
 *
 *
 */
rule AltA-IneligibleChapter7BKRuleGT80()
    if(
        (LTV > 80) &&
		(pLoanAmount <= 1000000) &&
		(pBankruptcyChapter7 > 0) &&
		(pChapter7BKClosedDuration < 36)
      )
    then
        Decision = "Referred";
		
        message(exception,  exception, "Bankruptcy Chapter 7 in the last 3 years is not allowed. ");

    end
end	// rule AltA-IneligibleChapter7BKRuleGT80




alias(rule, AltA-IneligibleDTIRule1, "AltA-Ineligible DTI Rule 1");

/* ==========================================================================
 * AltA-IneligibleDTIRule1
 *
 *
 */
rule AltA-IneligibleDTIRule1()
    if(
        (DTI > maxDTI) &&
		((((pDocumentType == "SIVA") ||
		(pDocumentType == "SISA")) &&
		(IneligibleStatedInc > 0)) ||
		(((pDocumentType == "Full Doc") ||
		(pDocumentType == "Lite Doc") ||
		(pDocumentType == "Limited Doc")) &&
		(pTrailingSpouseIncome > 0)))
      )
    then
        Decision = "Referred";
		
        message(exception,  assets, "DTI of <DPM>DTI</DPM> exceeds the Max DTI of <DPM>Max DTI</DPM> (Income provided is ineligible for the selected doc type). For detailed information refer program guideline.");

    end
end	// rule AltA-IneligibleDTIRule1




alias(rule, AltA-IneligibleDTIRule2, "AltA-Ineligible DTI Rule 2");

/* ==========================================================================
 * AltA-IneligibleDTIRule2
 *
 *
 */
rule AltA-IneligibleDTIRule2()
    if(
        ((pDocumentType != "No Doc") ||
		(pDocumentType != "NINA") ||
		(pDocumentType != "No Ratio")) &&
		(DTI > maxDTI)
      )
    then
        Decision = "Referred";
		
        message(exception,  assets, "DTI of <DPM>DTI</DPM> exceeds the Max DTI of <DPM>Max DTI</DPM>.");

    end
end	// rule AltA-IneligibleDTIRule2




alias(rule, AltA-IneligibleForeclosureRule1, "AltA-Ineligible Foreclosure Rule 1");

/* ==========================================================================
 * AltA-IneligibleForeclosureRule1
 *
 *
 */
rule AltA-IneligibleForeclosureRule1()
    if(
        (pLoanAmount <= 1000000) &&
		(((pForeclosure > 0) &&
		(pForeclosureClosedDuration < 36)) ||
		(pVirtualForeclosureLast36 > 0))
      )
    then
        Decision = "Referred";
		
        message(exception,  exception, "Foreclosure in the last 3 years is not allowed.");

    end
end	// rule AltA-IneligibleForeclosureRule1




alias(rule, AltA-IneligibleForeclosureRule2, "AltA-Ineligible Foreclosure Rule 2");

/* ==========================================================================
 * AltA-IneligibleForeclosureRule2
 *
 *
 */
rule AltA-IneligibleForeclosureRule2()
    if(
        (pLoanAmount <= 1000000) &&
		((pForeclosureClosedDuration >= 36) ||
		(pVirtualForeclosureLast84 > 0)) &&
		((pNo-ofLatesandDerogsin36Mos >= 1) ||
		(pTaxLiensFiledin36Mos >= 1))
      )
    then
        
        condition(credit, docs, "Lates after a Foreclosure exceed guideline maximum, mitigating factors must be present.");

    end
end	// rule AltA-IneligibleForeclosureRule2




alias(rule, AltA-IneligibleForeclosureRule3, "AltA-Ineligible Foreclosure Rule 3");

/* ==========================================================================
 * AltA-IneligibleForeclosureRule3
 *
 *
 */
rule AltA-IneligibleForeclosureRule3()
    if(
        (pLoanAmount > 1000000) &&
		(((pForeclosure > 0) &&
		(pForeclosureClosedDuration < 84)) ||
		(pVirtualForeclosureLast84 > 0))
      )
    then
        Decision = "Referred";
		
        message(exception,  exception, "Foreclosure in the last 7 years is not allowed.");

    end
end	// rule AltA-IneligibleForeclosureRule3




alias(rule, AltA-IneligibleForeclosureRule4, "AltA-Ineligible Foreclosure Rule 4");

/* ==========================================================================
 * AltA-IneligibleForeclosureRule4
 *
 *
 */
rule AltA-IneligibleForeclosureRule4()
    if(
        (pLoanAmount > 1000000) &&
		(pForeclosureClosedDuration > 84) &&
		((pNo-ofLatesandDerogsin84Mos >= 1) ||
		(pVirtualForeclosureLast84 >= 1) ||
		(pTaxLiensFiledin84Mos >= 1))
      )
    then
        
        condition(credit, docs, "Lates after a Foreclosure exceed guideline maximum, mitigating factors must be present.");

    end
end	// rule AltA-IneligibleForeclosureRule4




alias(rule, AltA-IneligibleForeclosureRule5, "AltA-Ineligible Foreclosure Rule 5");

/* ==========================================================================
 * AltA-IneligibleForeclosureRule5
 *
 *
 */
rule AltA-IneligibleForeclosureRule5()
    if(
        (((pLoanAmount <= 1000000) &&
		(pForeclosureClosedDuration >= 36)) ||
		((pLoanAmount > 1000000) &&
		(pForeclosureClosedDuration >= 84))) &&
		((pValidTradtlTrades-24MoHistActive24MosBorr1 < 3) ||
		((pBorr2ID > 0) &&
		(pValidTradtlTrades-24MoHistActive24MosBorr2 < 3)) ||
		((pBorr3ID > 0) &&
		(pValidTradtlTrades-24MoHistActive24MosBorr3 < 3)) ||
		((pBorr4ID > 0) &&
		(pValidTradtlTrades-24MoHistActive24MosBorr4 < 3)) ||
		((pBorr5ID > 0) &&
		(pValidTradtlTrades-24MoHistActive24MosBorr5 < 3)))
      )
    then
        
        condition(asset, docs, "Sufficient credit has not been reestablised per guidelines, mitigating factors must be present.");

    end
end	// rule AltA-IneligibleForeclosureRule5




alias(rule, AltA-IneligibleForeignNationalRule1, "AltA-Ineligible Foreign National Rule 1");

/* ==========================================================================
 * AltA-IneligibleForeignNationalRule1
 *
 *
 */
rule AltA-IneligibleForeignNationalRule1()
    if(
        (ForeignNationalIndicator == "Y") &&
		(pOccupancy == "PrimaryResidence")
      )
    then
        Decision = "Referred";
		
        message(exception,  exception, "Foreign nationals are ineligible for the selected occupancy.");

    end
end	// rule AltA-IneligibleForeignNationalRule1




alias(rule, AltA-IneligibleForeignNationalRule2, "AltA-Ineligible Foreign National Rule 2");

/* ==========================================================================
 * AltA-IneligibleForeignNationalRule2
 *
 *
 */
rule AltA-IneligibleForeignNationalRule2()
    if(
        (ForeignNationalIndicator == "Y") &&
		(pNumberOfUnits >= 2)
      )
    then
        Decision = "Referred";
		
        message(exception,  assets, "Foreign nationals are ineligible for properties with more than one unit. ");

    end
end	// rule AltA-IneligibleForeignNationalRule2




alias(rule, AltA-IneligibleForeignNationalRule3, "AltA-Ineligible Foreign National Rule 3");

/* ==========================================================================
 * AltA-IneligibleForeignNationalRule3
 *
 *
 */
rule AltA-IneligibleForeignNationalRule3()
    if(
        (ForeignNationalIndicator == "Y") &&
		(pPurposeOfLoan == "Refinance") &&
		(pTypeofRefinance == "CashOutOther")
      )
    then
        Decision = "Referred";
		
        message(exception,  exception, "Cash Out Refinance transactions are not allowed for Foreign National borrowers.");

    end
end	// rule AltA-IneligibleForeignNationalRule3




alias(rule, AltA-IneligibleForeignNationalRule4, "AltA-Ineligible Foreign National Rule 4");

/* ==========================================================================
 * AltA-IneligibleForeignNationalRule4
 *
 *
 */
rule AltA-IneligibleForeignNationalRule4()
    if(
        (ForeignNationalIndicator == "Y") &&
		((PropertyTypeAbbrev != "SFR") &&
		(pPropertyType != "LowRiseCondo") &&
		(pPropertyType != "MidRiseCondo") &&
		(pPropertyType != "HighRiseCondo") &&
		(pPropertyType != "PUD"))
      )
    then
        Decision = "Referred";
		
        message(exception,  exception, "Only SFR, condos and Attached/Detached PUDs are allowed for Foreign National borrowers.");

    end
end	// rule AltA-IneligibleForeignNationalRule4




alias(rule, AltA-IneligibleForeignNationalRule5, "AltA-Ineligible Foreign National Rule 5");

/* ==========================================================================
 * AltA-IneligibleForeignNationalRule5
 *
 *
 */
rule AltA-IneligibleForeignNationalRule5()
    if(
        (ForeignNationalIndicator == "Y") &&
		(pCombo > 0)
      )
    then
        Decision = "Referred";
		
        message(exception,  exception, "Combo loans are not allowed for Foreign National borrowers.");

    end
end	// rule AltA-IneligibleForeignNationalRule5




alias(rule, AltA-IneligibleFTHBRule2, "AltA-Ineligible FTHB Rule 2");

/* ==========================================================================
 * AltA-IneligibleFTHBRule2
 *
 *
 */
rule AltA-IneligibleFTHBRule2()
    if(
        (FTHB == "Y") &&
		(pNumberOfUnits > 2)
      )
    then
        Decision = "Referred";
		
        message(exception,  exception, " First time homebuyers are ineligible for the selected property type, first time homebuyers are restricted to 1-2 units, 3-4 units not allowed. ");

    end
end	// rule AltA-IneligibleFTHBRule2




alias(rule, AltA-IneligibleIncomeRule, "AltA-Ineligible Income Rule");

/* ==========================================================================
 * AltA-IneligibleIncomeRule
 *
 *
 */
rule AltA-IneligibleIncomeRule()
    if(
        ((pDocumentType == "No Ratio") ||
		(pDocumentType == "NINA") ||
		(pDocumentType == "No Doc") ||
		(pDocumentType == "No Doc with Assets")) &&
		((pTotalIncome > 0) ||
		(TotalIncomeAmt > 0))
      )
    then
        Decision = "Referred";
		
        message(exception,  exception, "Income provided is ineligible for the selected doc type.");

    end
end	// rule AltA-IneligibleIncomeRule





/* ==========================================================================
 * AltA-IneligibleInterestOnly80LTV
 *
 *
 */
rule AltA-IneligibleInterestOnly80LTV()
    if(
        (LTV > 80) &&
		(isInterestOnly == "true") &&
		((DocTypeAbbrev == "SVLL") ||
		(pOccupancy == "Investment"))
      )
    then
        Decision = "Referred";
		
        message(exception,  exception, "Interest Only not allowed.");

    end
end	// rule AltA-IneligibleInterestOnly80LTV





/* ==========================================================================
 * AltA-IneligibleMixedUse
 *
 *
 */
rule AltA-IneligibleMixedUse()
    if(
        (pZoning == "MixedUse")
      )
    then
        Decision = "Referred";
		
        message(exception,  exception, "Mixed-Use Property is not an eligible property type.");

    end
end	// rule AltA-IneligibleMixedUse




alias(rule, AltA-IneligibleNon-PermRes, "AltA-Ineligible Non-PermRes");

/* ==========================================================================
 * AltA-IneligibleNon-PermRes
 *
 *
 */
rule AltA-IneligibleNon-PermRes()
    if(
        ((pCitizenshipOfPrimaryApplicant == "NonPermanentResidentAlien") ||
		(pCitizenshipCoBorr1 == "NonPermanentResidentAlien") ||
		(pCitizenshipCoBorr2 == "NonPermanentResidentAlien") ||
		(pCitizenshipCoBorr3 == "NonPermanentResidentAlien") ||
		(pCitizenshipCoBorr4 == "NonPermanentResidentAlien"))
      )
    then
        Decision = "Referred";
		
        message(exception,  exception, "Non-permanent resident aliens are not eligible for financing.");

    end
end	// rule AltA-IneligibleNon-PermRes




alias(rule, AltA-IneligibleNon-PermResRule1, "AltA-Ineligible Non-Perm Res Rule 1");

/* ==========================================================================
 * AltA-IneligibleNon-PermResRule1
 *
 *
 */
rule AltA-IneligibleNon-PermResRule1()
    if(
        ((pCitizenshipOfPrimaryApplicant == "NonPermanentResidentAlien") ||
		(pCitizenshipCoBorr1 == "NonPermanentResidentAlien") ||
		(pCitizenshipCoBorr2 == "NonPermanentResidentAlien") ||
		(pCitizenshipCoBorr3 == "NonPermanentResidentAlien") ||
		(pCitizenshipCoBorr4 == "NonPermanentResidentAlien")) &&
		(pPropertyType != "SingleFamily")
      )
    then
        Decision = "Referred";
		
        message(exception,  assets, "Non-permanent resident aliens are not eligible for the selected property type.");

    end
end	// rule AltA-IneligibleNon-PermResRule1




alias(rule, AltA-IneligibleNon-PermResRule2, "AltA-Ineligible Non-Perm Res Rule 2");

/* ==========================================================================
 * AltA-IneligibleNon-PermResRule2
 *
 *
 */
rule AltA-IneligibleNon-PermResRule2()
    if(
        ((pCitizenshipOfPrimaryApplicant == "NonPermanentResidentAlien") ||
		(pCitizenshipCoBorr1 == "NonPermanentResidentAlien") ||
		(pCitizenshipCoBorr2 == "NonPermanentResidentAlien") ||
		(pCitizenshipCoBorr3 == "NonPermanentResidentAlien") ||
		(pCitizenshipCoBorr4 == "NonPermanentResidentAlien")) &&
		(pOccupancy != "PrimaryResidence")
      )
    then
        Decision = "Referred";
		
        message(exception,  assets, "Non-permanent resident aliens are not eligible for the selected occupancy.");

    end
end	// rule AltA-IneligibleNon-PermResRule2




alias(rule, AltA-IneligibleNon-PermResRule3, "AltA-Ineligible Non-Perm Res Rule 3");

/* ==========================================================================
 * AltA-IneligibleNon-PermResRule3
 *
 *
 */
rule AltA-IneligibleNon-PermResRule3()
    if(
        ((pCitizenshipOfPrimaryApplicant == "NonPermanentResidentAlien") ||
		(pCitizenshipCoBorr1 == "NonPermanentResidentAlien") ||
		(pCitizenshipCoBorr2 == "NonPermanentResidentAlien") ||
		(pCitizenshipCoBorr3 == "NonPermanentResidentAlien") ||
		(pCitizenshipCoBorr4 == "NonPermanentResidentAlien")) &&
		((pDocumentType == "No Doc") ||
		(pDocumentType == "No Doc with Assets"))
      )
    then
        Decision = "Referred";
		
        message(exception,  exception, "'No Doc' documentation types are not allowed for Non-Permanent Resident Aliens.");

    end
end	// rule AltA-IneligibleNon-PermResRule3




alias(rule, AltA-IneligibleOccupancyRule1, "AltA-Ineligible Occupancy Rule 1");

/* ==========================================================================
 * AltA-IneligibleOccupancyRule1
 *
 *
 */
rule AltA-IneligibleOccupancyRule1()
    if(
        (pOccupancy == "PrimaryResidence") &&
		(((PrimaryBorrowerIndicator == "Hghst Inc Borr") &&
		(pDecl-NonOcc-HghstIncBorr(RepScorewSingle) == "N")) ||
		((PrimaryBorrowerIndicator == "Lowest Rep Score Borr") &&
		(pDecl-NonOcc-LowRepScore(wSingle)Borr == "N")) ||
		((PrimaryBorrowerIndicator == "For Natl Borr") &&
		(pDecl-NonOcc-ForNatl == "N")))
      )
    then
        Decision = "Referred";
		
        message(exception,  assets, "Occupancy type selected is owner occupied and declarations states do not intend to occupy the subject property.");

    end
end	// rule AltA-IneligibleOccupancyRule1




alias(rule, AltA-IneligibleOccupancyRule2, "AltA-Ineligible Occupancy Rule 2");

/* ==========================================================================
 * AltA-IneligibleOccupancyRule2
 *
 *
 */
rule AltA-IneligibleOccupancyRule2()
    if(
        (pOccupancy == "PrimaryResidence") &&
		(pPurposeOfLoan == "Refinance") &&
		(((PrimaryBorrowerIndicator == "Hghst Inc Borr") &&
		(pSubjectPropertyState != pCurrentAddressState-HghstIncBorr(RepScorewSingle))) ||
		((PrimaryBorrowerIndicator == "Lowest Rep Score Borr") &&
		(pSubjectPropertyState != pCurrentAddressState-LowRepScore(wSingle)Borrl)) ||
		((PrimaryBorrowerIndicator == "For Natl Borr") &&
		(pSubjectPropertyState != pCurrentAddressState-ForNatl)))
      )
    then
        Decision = "Referred";
		
        message(exception,  assets, "Occupancy type selected is owner occupied and the current residence does not match state of the subject property.");

    end
end	// rule AltA-IneligibleOccupancyRule2




alias(rule, AltA-IneligibleOneUnits, "AltA-Ineligible One Units");

/* ==========================================================================
 * AltA-IneligibleOneUnits
 *
 *
 */
rule AltA-IneligibleOneUnits()
    if(
        (OneUnitFlag == "Y") &&
		(PropertyTypeAbbrev != "SFR")
      )
    then
        Decision = "Referred";
		
        message(exception,  exception, "Selected doc type/LTV is limited to single family detached.");

    end
end	// rule AltA-IneligibleOneUnits




alias(rule, AltA-IneligibleRuralNOO, "AltA-Ineligible Rural NOO");

/* ==========================================================================
 * AltA-IneligibleRuralNOO
 *
 *
 */
rule AltA-IneligibleRuralNOO()
    if(
        (pLocation == "Rural") &&
		(pOccupancy == "Investment")
      )
    then
        Decision = "Referred";
		
        message(exception,  assets, "Rural investment properties are not allowed.");

    end
end	// rule AltA-IneligibleRuralNOO




alias(rule, AltA-IneligibleSecondHome2-4Units, "AltA-Ineligible Second Home 2-4 Units");

/* ==========================================================================
 * AltA-IneligibleSecondHome2-4Units
 *
 *
 */
rule AltA-IneligibleSecondHome2-4Units()
    if(
        ((pPropertyType == "2Unit") ||
		(pPropertyType == "ThreeFourUnits") ||
		(pNumberOfUnits >= 2)) &&
		(pOccupancy == "SecondaryResidence")
      )
    then
        Decision = "Referred";
		
        message(exception,  assets, "2-4 family properties are not allowed for second home transactions.");

    end
end	// rule AltA-IneligibleSecondHome2-4Units





/* ==========================================================================
 * AltA-IneligibleSIVA2ndNOOCO
 *
 *
 */
rule AltA-IneligibleSIVA2ndNOOCO()
    if(
        (LTV > 80) &&
		(pDocumentType == "SIVA") &&
		(purposeAbbrev == "CO") &&
		((pOccupancy == "SecondaryResidence") ||
		(pOccupancy == "Investment"))
      )
    then
        Decision = "Referred";
		
        message(exception,  exception, "Cash-out is ineligible for SIVA transactions on Second Homes and Investment Properties greater than 80%.");

    end
end	// rule AltA-IneligibleSIVA2ndNOOCO




alias(rule, AltA-IneligibleSourceofFundsRule1, "AltA-Ineligible Source of Funds Rule 1");

/* ==========================================================================
 * AltA-IneligibleSourceofFundsRule1
 *
 *
 */
rule AltA-IneligibleSourceofFundsRule1()
    if(
        (pGiftFunds > 0) &&
		(pOccupancy != "PrimaryResidence") &&
		(pOccupancy != "SecondaryResidence")
      )
    then
        Decision = "Referred";
		
        message(exception,  assets, "Down payment in the form of Gift funds is not acceptable for the selected occupancy.");

    end
end	// rule AltA-IneligibleSourceofFundsRule1




alias(rule, AltA-IneligibleSourceofFundsRule2, "AltA-Ineligible Source of Funds Rule 2");

/* ==========================================================================
 * AltA-IneligibleSourceofFundsRule2
 *
 *
 */
rule AltA-IneligibleSourceofFundsRule2()
    if(
        ((pEquityfromSubProp > 0) ||
		(pGiftofEquity > 0)) &&
		(pOccupancy != "PrimaryResidence")
      )
    then
        Decision = "Referred";
		
        message(exception,  assets, "Gift of Equity transactions are limited to primary residence.");

    end
end	// rule AltA-IneligibleSourceofFundsRule2




alias(rule, AltA-IneligibleState, "AltA-Ineligible State");

/* ==========================================================================
 * AltA-IneligibleState
 *
 *
 */
rule AltA-IneligibleState()
    if(
        ((pSubjectPropertyState == "GU") ||
		(pSubjectPropertyState == "PR") ||
		(pSubjectPropertyState == "VI") ||
		(pSubjectPropertyState == "AK"))
      )
    then
        Decision = "Referred";
		
        message(exception,  assets, "Ineligible property state, refer to guidelines for Geographic Restrictions. ");

    end
end	// rule AltA-IneligibleState




alias(rule, AltA-IneligibleTexasCORefiLockPeriod, "AltA-Ineligible Texas CO Refi Lock Period");

/* ==========================================================================
 * AltA-IneligibleTexasCORefiLockPeriod
 *
 *
 */
rule AltA-IneligibleTexasCORefiLockPeriod()
    if(
        (pSubjectPropertyState == "TX") &&
		(purposeAbbrev == "CO") &&
		(pLockPeriod == 15)
      )
    then
        Decision = "Referred";
		
        message(exception,  exception, "Ineligible lock period: only 30 days lock or greater is allowed");

    end
end	// rule AltA-IneligibleTexasCORefiLockPeriod




alias(rule, AltA-IneligibleTexasCORefiMaxCltv, "AltA-Ineligible Texas CORefiMaxCltv");

/* ==========================================================================
 * AltA-IneligibleTexasCORefiMaxCltv
 *
 *
 */
rule AltA-IneligibleTexasCORefiMaxCltv()
    if(
        (pSubjectPropertyState == "TX") &&
		(purposeAbbrev == "CO") &&
		(CLTV > 80)
      )
    then
        Decision = "Referred";
		
        message(exception,  exception, "Loan exceeds max Cltv of 80% for a Texas CashOut Refi.");

    end
end	// rule AltA-IneligibleTexasCORefiMaxCltv




alias(rule, AltA-IneligibleTexasCORefiRule2, "AltA-Ineligible Texas CO Refi Rule 2");

/* ==========================================================================
 * AltA-IneligibleTexasCORefiRule2
 *
 *
 */
rule AltA-IneligibleTexasCORefiRule2()
    if(
        (pSubjectPropertyState == "TX") &&
		(purposeAbbrev == "CO") &&
		(pPropertyType != "SingleFamily") &&
		(pPropertyType != "PUD") &&
		(pPropertyType != "Townhouse") &&
		((pPropertyType != "LowRiseCondo") &&
		(pNonWarrantableCondo == "N")) &&
		((pPropertyType != "MidRiseCondo") &&
		(pNonWarrantableCondo == "N")) &&
		((pPropertyType != "HighRiseCondo") &&
		(pNonWarrantableCondo == "N"))
      )
    then
        Decision = "Referred";
		
        message(exception,  exception, "Selected property type is ineligible for Cash Out Refinance in the state of Texas.");

    end
end	// rule AltA-IneligibleTexasCORefiRule2




alias(rule, AltA-IneligibleTexasCORefiRule3, "AltA-Ineligible Texas CO Refi Rule 3");

/* ==========================================================================
 * AltA-IneligibleTexasCORefiRule3
 *
 *
 */
rule AltA-IneligibleTexasCORefiRule3()
    if(
        (pSubjectPropertyState == "TX") &&
		(purposeAbbrev == "CO") &&
		((pCitizenshipOfPrimaryApplicant == "NonPermanentResidentAlien") ||
		(pCitizenshipCoBorr1 == "NonPermanentResidentAlien") ||
		(pCitizenshipCoBorr2 == "NonPermanentResidentAlien") ||
		(pCitizenshipCoBorr3 == "NonPermanentResidentAlien") ||
		(pCitizenshipCoBorr4 == "NonPermanentResidentAlien"))
      )
    then
        Decision = "Referred";
		
        message(exception,  assets, "Non-permanent resident aliens are not eligible for cash out refinance in the state of Texas.");

    end
end	// rule AltA-IneligibleTexasCORefiRule3




alias(rule, AltA-IneligibleTexasCORefiRule4, "AltA-Ineligible Texas CO Refi Rule 4");

/* ==========================================================================
 * AltA-IneligibleTexasCORefiRule4
 *
 *
 */
rule AltA-IneligibleTexasCORefiRule4()
    if(
        (pSubjectPropertyState == "TX") &&
		(purposeAbbrev == "CO") &&
		(ForeignNationalIndicator == "Y")
      )
    then
        Decision = "Referred";
		
        message(exception,  assets, "Foreign nationals are not eligible for cash out refinance in the state of Texas.");

    end
end	// rule AltA-IneligibleTexasCORefiRule4




alias(rule, AltA-IneligibleTexasCORefiRule5, "AltA-Ineligible Texas CO Refi Rule 5");

/* ==========================================================================
 * AltA-IneligibleTexasCORefiRule5
 *
 *
 */
rule AltA-IneligibleTexasCORefiRule5()
    if(
        (pSubjectPropertyState == "TX") &&
		(purposeAbbrev == "CO") &&
		(pLocation == "Rural")
      )
    then
        Decision = "Referred";
		
        message(exception,  assets, "Rural properties are not eligible for cash out refinance in the state of Texas.");

    end
end	// rule AltA-IneligibleTexasCORefiRule5




alias(rule, AltA-IneligibleTexasCORefiRule6, "AltA-Ineligible Texas CO Refi Rule 6");

/* ==========================================================================
 * AltA-IneligibleTexasCORefiRule6
 *
 *
 */
rule AltA-IneligibleTexasCORefiRule6()
    if(
        (pSubjectPropertyState == "TX") &&
		(purposeAbbrev == "CO") &&
		(pPrepayTerm-Loan > 0)
      )
    then
        Decision = "Referred";
		
        message(exception,  assets, "No pre-payment allowed for Cash Out Refinance in state of Texas.");

    end
end	// rule AltA-IneligibleTexasCORefiRule6




alias(rule, AltA-IneligibleTexasCORefiRule7, "AltA-Ineligible Texas CO Refi Rule 7");

/* ==========================================================================
 * AltA-IneligibleTexasCORefiRule7
 *
 *
 */
rule AltA-IneligibleTexasCORefiRule7()
    if(
        (pSubjectPropertyState == "TX") &&
		(purposeAbbrev == "CO") &&
		(pEstateHeld == "Leasehold")
      )
    then
        Decision = "Referred";
		
        message(exception,  assets, "No leasehold estate allowed for cash out refinance in the state of Texas.");

    end
end	// rule AltA-IneligibleTexasCORefiRule7




alias(rule, AltA-IneligibleTexasCORefiRule8, "AltA-Ineligible Texas CO Refi Rule 8");

/* ==========================================================================
 * AltA-IneligibleTexasCORefiRule8
 *
 *
 */
rule AltA-IneligibleTexasCORefiRule8()
    if(
        (pSubjectPropertyState == "TX") &&
		(purposeAbbrev == "CO") &&
		((pAmortizationType == "IOARM") ||
		(pAmortizationType == "IOFixed"))
      )
    then
        Decision = "Referred";
		
        message(exception,  exception, "Interest Only transactions are not allowed on Cash Out Refinances of Primary Residences in the state of Texas.");

    end
end	// rule AltA-IneligibleTexasCORefiRule8




alias(rule, AltA-IneligibleTLN1M70CLTVRule1, "AltA-Ineligible TLN 1M 70CLTV Rule 1");

/* ==========================================================================
 * AltA-IneligibleTLN1M70CLTVRule1
 *
 *
 */
rule AltA-IneligibleTLN1M70CLTVRule1()
    if(
        (pLoanAmount > 1000000) &&
		(CLTV > 70) &&
		(((pCitizenshipBorr1 != "ForeignNational") &&
		((pValidTradtlTrades-24MoHistBorr1 < 5) ||
		(pValidTradtlTrades-24MoHistActive24MosBorr1 < 3) ||
		(pValidTradtlTrades-MosRewd24PlusBorr1 < 2))) ||
		((pBorr2ID > 0) &&
		(pCitizenshipBorr2 != "ForeignNational") &&
		((pValidTradtlTrades-24MoHistBorr2 < 5) ||
		(pValidTradtlTrades-24MoHistActive24MosBorr2 < 3) ||
		(pValidTradtlTrades-MosRewd24PlusBorr2 < 2))) ||
		((pBorr3ID > 0) &&
		(pCitizenshipBorr3 != "ForeignNational") &&
		((pValidTradtlTrades-24MoHistBorr3 < 5) ||
		(pValidTradtlTrades-24MoHistActive24MosBorr3 < 3) ||
		(pValidTradtlTrades-MosRewd24PlusBorr3 < 2))) ||
		((pBorr4ID > 0) &&
		(pCitizenshipBorr4 != "ForeignNational") &&
		((pValidTradtlTrades-24MoHistBorr4 < 5) ||
		(pValidTradtlTrades-24MoHistActive24MosBorr4 < 3) ||
		(pValidTradtlTrades-MosRewd24PlusBorr4 < 2))) ||
		((pBorr5ID > 0) &&
		(pCitizenshipBorr5 != "ForeignNational") &&
		((pValidTradtlTrades-24MoHistBorr5 < 5) ||
		(pValidTradtlTrades-24MoHistActive24MosBorr5 < 3) ||
		(pValidTradtlTrades-MosRewd24PlusBorr5 < 2))))
      )
    then
        Decision = "Referred";
		
        message(exception,  exception, "Borrower does not meet the minimum trades requirements for the loan program.  No non-traditional tradelines will be allowed to satisfy the tradeline requirement.");

    end
end	// rule AltA-IneligibleTLN1M70CLTVRule1




alias(rule, AltA-IneligibleTLN1MRule1, "AltA-Ineligible TLN 1M Rule 1");

/* ==========================================================================
 * AltA-IneligibleTLN1MRule1
 *
 *
 */
rule AltA-IneligibleTLN1MRule1()
    if(
        ((pLoanAmount > 1000000) &&
		(CLTV <= 70)) &&
		(((pCitizenshipBorr1 != "ForeignNational") &&
		((pValidTradtlTrades-24MoHistBorr1 < 2) ||
		(pValidTradtlTrades-24MoHistActive24MosBorr1 < 2) ||
		(pValidTradtlTrades-MosRewd24PlusBorr1 < 2))) ||
		((pBorr2ID > 0) &&
		(pCitizenshipBorr2 != "ForeignNational") &&
		((pValidTradtlTrades-24MoHistBorr2 < 2) ||
		(pValidTradtlTrades-24MoHistActive24MosBorr2 < 2) ||
		(pValidTradtlTrades-MosRewd24PlusBorr2 < 2))) ||
		((pBorr3ID > 0) &&
		(pCitizenshipBorr3 != "ForeignNational") &&
		((pValidTradtlTrades-24MoHistBorr3 < 2) ||
		(pValidTradtlTrades-24MoHistActive24MosBorr3 < 2) ||
		(pValidTradtlTrades-MosRewd24PlusBorr3 < 2))) ||
		((pBorr4ID > 0) &&
		(pCitizenshipBorr4 != "ForeignNational") &&
		((pValidTradtlTrades-24MoHistBorr4 < 2) ||
		(pValidTradtlTrades-24MoHistActive24MosBorr4 < 2) ||
		(pValidTradtlTrades-MosRewd24PlusBorr4 < 2))) ||
		((pBorr5ID > 0) &&
		(pCitizenshipBorr5 != "ForeignNational") &&
		((pValidTradtlTrades-24MoHistBorr5 < 2) ||
		(pValidTradtlTrades-24MoHistActive24MosBorr5 < 2) ||
		(pValidTradtlTrades-MosRewd24PlusBorr5 < 2))))
      )
    then
        Decision = "Referred";
		
        message(exception,  exception, "Borrower does not meet the minimum trades requirements for the loan program, at least 2 of the 5 must be Traditional tradelines and all must have 24 months history, with at least 3 trades active >= 24 months.");

    end
end	// rule AltA-IneligibleTLN1MRule1




alias(rule, AltA-IneligibleWaiveEscrow, "AltA-Ineligible Waive Escrow");

/* ==========================================================================
 * AltA-IneligibleWaiveEscrow
 *
 *
 */
rule AltA-IneligibleWaiveEscrow()
    if(
        (pWaiveEscrow == "Y") &&
		(LTV > 80)
      )
    then
        Decision = "Referred";
		
        message(exception,  exception, "For LTV > 80% escrow deposit is required.");

    end
end	// rule AltA-IneligibleWaiveEscrow




alias(rule, AltA-Initialization-1, "AltA-Initialization.1");

/* ==========================================================================
 * AltA-Initialization-1
 *
 *
 */
rule AltA-Initialization-1()
    if(
        (pNo-ofApplicants > 0)
      )
    then
        minScore = 620;
		MinCBScore = 600;
		maxDTI = 50;
		cvProgram = "Prime";
		NoMIPriceReqd = "N";
		cvRateQual = 0;
		maxLoanAmount2nd = 0;
		

    end
end	// rule AltA-Initialization-1





/* ==========================================================================
 * AltA-LivingRentFreeCheck
 *
 *
 */
rule AltA-LivingRentFreeCheck()
    if(
        (pOwnershipType-Borr1 == "LivingRentFree") &&
		(((pDocumentType == "SISA") ||
		(pDocumentType == "NINA") ||
		(pDocumentType == "No Doc") ||
		(pDocumentType == "No Doc with Assets")) ||
		((CLTV > 90) &&
		((pOccupancy != "PrimaryResidence") ||
		((Reserves < SixMoReserves) &&
		(creditScore < 680)))))
      )
    then
        Decision = "Referred";
		
        message(exception,  exception, "Verification of Rental history is required due to Document Type, FICO score,  Occupancy or Insufficient Reserve Funds");

    end
end	// rule AltA-LivingRentFreeCheck





/* ==========================================================================
 * AltA-MaxCashOut80LTV
 *
 *
 */
rule AltA-MaxCashOut80LTV()
    if(
        (LTV > 80) &&
		((DocTypeAbbrev == "SVLL") ||
		(pOccupancy == "Investment") ||
		(pOccupancy == "SecondaryResidence") ||
		(pNumberOfUnits >= 2))
      )
    then
        MaxCashOut = 100000;
		

    else
        MaxCashOut = 150000;
		

    end
end	// rule AltA-MaxCashOut80LTV




alias(rule, AltA-MaxCLTVForNatl1, "AltA-Max CLTV For Natl 1");

/* ==========================================================================
 * AltA-MaxCLTVForNatl1
 *
 *
 */
rule AltA-MaxCLTVForNatl1()
    if(
        ((pDocumentType == "No Ratio") ||
		(pDocumentType == "SISA") ||
		(pDocumentType == "NINA") ||
		(pDocumentType == "No Doc") ||
		(pDocumentType == "No Doc with Assets")) &&
		(ForeignNationalIndicator == "Y") &&
		(maxCLTV > 75)
      )
    then
        maxCLTV = 75;
		

    end
end	// rule AltA-MaxCLTVForNatl1




alias(rule, AltA-MaxCLTVForNatl2, "AltA-Max CLTV For Natl 2");

/* ==========================================================================
 * AltA-MaxCLTVForNatl2
 *
 *
 */
rule AltA-MaxCLTVForNatl2()
    if(
        ((pDocumentType == "SIVA") ||
		(pDocumentType == "Full Doc") ||
		(pDocumentType == "Limited Doc") ||
		(pDocumentType == "Lite Doc")) &&
		(ForeignNationalIndicator == "Y") &&
		(maxCLTV > 80)
      )
    then
        maxCLTV = 80;
		

    end
end	// rule AltA-MaxCLTVForNatl2




alias(rule, AltA-MaxCLTVLeashold, "AltA-Max CLTV Leashold");

/* ==========================================================================
 * AltA-MaxCLTVLeashold
 *
 *
 */
rule AltA-MaxCLTVLeashold()
    if(
        (pEstateHeld == "Leasehold") &&
		(maxCLTV > 80)
      )
    then
        maxCLTV = 80;
		

    end
end	// rule AltA-MaxCLTVLeashold




alias(rule, AltA-MaxCLTVRednForNatlHRCondo, "AltA-Max CLTV Redn ForNatl HRCondo");

/* ==========================================================================
 * AltA-MaxCLTVRednForNatlHRCondo
 *
 *
 */
rule AltA-MaxCLTVRednForNatlHRCondo()
    if(
        (ForeignNationalIndicator == "Y") &&
		(pPropertyType == "HighRiseCondo") &&
		(maxCLTV > 75)
      )
    then
        maxCLTV = 75;
		
        message(exception,  exception, "High Rise Condos are limited to a max of 75% CLTV for Foreign National borrowers.");

    end
end	// rule AltA-MaxCLTVRednForNatlHRCondo




alias(rule, AltA-MaxCLTVRednFTHB, "AltA-Max CLTV Redn FTHB");

/* ==========================================================================
 * AltA-MaxCLTVRednFTHB
 *
 *
 */
rule AltA-MaxCLTVRednFTHB()
    if(
        ((pNumberOfUnits == 2) ||
		(pOccupancy == "SecondaryResidence")) &&
		(FTHB == "Y") &&
		(maxCLTV > 95) &&
		((pDocumentType == "SISA") ||
		(pDocumentType == "NINA") ||
		(pDocumentType == "No Doc"))
      )
    then
        maxCLTV = 95;
		

    end
end	// rule AltA-MaxCLTVRednFTHB




alias(rule, AltA-MaxCLTVRednNonOccCoBorr, "AltA-Max CLTV Redn NonOccCoBorr");

/* ==========================================================================
 * AltA-MaxCLTVRednNonOccCoBorr
 *
 *
 */
rule AltA-MaxCLTVRednNonOccCoBorr()
    if(
        (pOccupancy == "PrimaryResidence") &&
		(maxCLTV > 90) &&
		((pDeclBorr1AppNonOccupancy == "N") ||
		(pDeclBorr2AppNonOccupancy == "N") ||
		(pDeclBorr3AppNonOccupancy == "N") ||
		(pDeclBorr4AppNonOccupancy == "N") ||
		(pDeclBorr5AppNonOccupancy == "N"))
      )
    then
        maxCLTV = 90;
		

    end
end	// rule AltA-MaxCLTVRednNonOccCoBorr




alias(rule, AltA-MaxCLTVRednRuralProperty2, "AltA-Max CLTV Redn Rural Property 2");

/* ==========================================================================
 * AltA-MaxCLTVRednRuralProperty2
 *
 *
 */
rule AltA-MaxCLTVRednRuralProperty2()
    if(
        (pLocation == "Rural") &&
		(maxCLTV > 90)
      )
    then
        maxCLTV = 90;
		

    end
end	// rule AltA-MaxCLTVRednRuralProperty2




alias(rule, AltA-MaxDTIInvestment, "AltA-Max DTI Investment");

/* ==========================================================================
 * AltA-MaxDTIInvestment
 *
 *
 */
rule AltA-MaxDTIInvestment()
    if(
        (pOccupancy == "Investment")
      )
    then
        maxDTI = 50;
		

    end
end	// rule AltA-MaxDTIInvestment




alias(rule, AltA-MaxDTIPriSecResidence, "AltA-Max DTI PriSecResidence");

/* ==========================================================================
 * AltA-MaxDTIPriSecResidence
 *
 *
 */
rule AltA-MaxDTIPriSecResidence()
    if(
        ((pOccupancy == "PrimaryResidence") ||
		(pOccupancy == "SecondaryResidence"))
      )
    then
        maxDTI = 50;
		

    end
end	// rule AltA-MaxDTIPriSecResidence




alias(rule, AltA-MaxDtiSivaLiteDoc, "AltA-Max Dti SivaLiteDoc");

/* ==========================================================================
 * AltA-MaxDtiSivaLiteDoc
 *
 *
 */
rule AltA-MaxDtiSivaLiteDoc()
    if(
        (pDocumentType == "SIVA") ||
		(pDocumentType == "Lite Doc")
      )
    then
        maxDTI = 50;
		

    end
end	// rule AltA-MaxDtiSivaLiteDoc




alias(rule, AltA-MaxLTVForNatl1, "AltA-Max LTV For Natl 1");

/* ==========================================================================
 * AltA-MaxLTVForNatl1
 *
 *
 */
rule AltA-MaxLTVForNatl1()
    if(
        ((pDocumentType == "No Ratio") ||
		(pDocumentType == "SISA") ||
		(pDocumentType == "NINA") ||
		(pDocumentType == "No Doc") ||
		(pDocumentType == "No Doc with Assets")) &&
		(ForeignNationalIndicator == "Y") &&
		(maxLTV > 75)
      )
    then
        maxLTV = 75;
		

    end
end	// rule AltA-MaxLTVForNatl1




alias(rule, AltA-MaxLTVForNatl2, "AltA-Max LTV For Natl 2");

/* ==========================================================================
 * AltA-MaxLTVForNatl2
 *
 *
 */
rule AltA-MaxLTVForNatl2()
    if(
        ((pDocumentType == "SIVA") ||
		(pDocumentType == "Full Doc") ||
		(pDocumentType == "Limited Doc") ||
		(pDocumentType == "Lite Doc")) &&
		(ForeignNationalIndicator == "Y") &&
		(maxLTV > 80)
      )
    then
        maxLTV = 80;
		

    end
end	// rule AltA-MaxLTVForNatl2




alias(rule, AltA-MaxLTVLeashold, "AltA-Max LTV Leashold");

/* ==========================================================================
 * AltA-MaxLTVLeashold
 *
 *
 */
rule AltA-MaxLTVLeashold()
    if(
        (pEstateHeld == "Leasehold") &&
		(maxLTV > 80)
      )
    then
        maxLTV = 80;
		

    end
end	// rule AltA-MaxLTVLeashold




alias(rule, AltA-MaxLTVRednFTHB, "AltA-Max LTV Redn FTHB");

/* ==========================================================================
 * AltA-MaxLTVRednFTHB
 *
 *
 */
rule AltA-MaxLTVRednFTHB()
    if(
        ((pNumberOfUnits == 2) ||
		(pOccupancy == "SecondaryResidence")) &&
		(FTHB == "Y") &&
		(maxLTV > 95) &&
		((pDocumentType == "SISA") ||
		(pDocumentType == "NINA") ||
		(pDocumentType == "No Doc"))
      )
    then
        maxLTV = 95;
		

    end
end	// rule AltA-MaxLTVRednFTHB




alias(rule, AltA-MaxLTVRednNonOccCoBorr, "AltA-Max LTV Redn NonOccCoBorr");

/* ==========================================================================
 * AltA-MaxLTVRednNonOccCoBorr
 *
 *
 */
rule AltA-MaxLTVRednNonOccCoBorr()
    if(
        (pOccupancy == "PrimaryResidence") &&
		(maxLTV > 90) &&
		((pDeclBorr1AppNonOccupancy == "N") ||
		(pDeclBorr2AppNonOccupancy == "N") ||
		(pDeclBorr3AppNonOccupancy == "N") ||
		(pDeclBorr4AppNonOccupancy == "N") ||
		(pDeclBorr5AppNonOccupancy == "N"))
      )
    then
        maxLTV = 90;
		

    end
end	// rule AltA-MaxLTVRednNonOccCoBorr




alias(rule, AltA-MaxLTVRednRuralProperty2, "AltA-Max LTV Redn Rural Property 2");

/* ==========================================================================
 * AltA-MaxLTVRednRuralProperty2
 *
 *
 */
rule AltA-MaxLTVRednRuralProperty2()
    if(
        (pLocation == "Rural") &&
		(maxLTV > 90)
      )
    then
        maxLTV = 90;
		

    end
end	// rule AltA-MaxLTVRednRuralProperty2




alias(rule, AltA-MaxLTVRednSecondaryFinanci, "AltA-Max LTV Redn Secondary Financi");

/* ==========================================================================
 * AltA-MaxLTVRednSecondaryFinanci
 *
 *
 */
rule AltA-MaxLTVRednSecondaryFinanci()
    if(
        (pLoanAmount != pLoanAmount) &&
		(maxLTV >= 80)
      )
    then
        maxLTV = 80;
		

    end
end	// rule AltA-MaxLTVRednSecondaryFinanci




alias(rule, AltA-MinFICORednFTHB, "AltA-Min FICO Redn FTHB");

/* ==========================================================================
 * AltA-MinFICORednFTHB
 *
 *
 */
rule AltA-MinFICORednFTHB()
    if(
        (pNumberOfUnits == 2) &&
		(FTHB == "Y") &&
		(minScore < 660)
      )
    then
        minScore = 660;
		

    end
end	// rule AltA-MinFICORednFTHB




alias(rule, AltA-MinMax-1, "AltA-MinMax.1");

/* ==========================================================================
 * AltA-MinMax-1
 *
 *
 */
rule AltA-MinMax-1()
    if(
        (MinMaxAbbrev == "PRT OO 1") &&
		(DocTypeAbbrev == "Full Doc") &&
		(loanAmount1st <= 3000000) &&
		(creditScore >= 640) &&
		(LTV > 0) &&
		(CLTV <= 75)
      )
    then
        maxLTV = 75;
		maxCLTV = 75;
		maxLoanAmount = 417000;
		minScore = 640;
		OneUnitFlag = "N";
		restrictionFlags = 0;
		

    end
end	// rule AltA-MinMax-1




alias(rule, AltA-MinMax-10, "AltA-MinMax.10");

/* ==========================================================================
 * AltA-MinMax-10
 *
 *
 */
rule AltA-MinMax-10()
    if(
        (MinMaxAbbrev == "PRT OO 1") &&
		(DocTypeAbbrev == "SVLL") &&
		(loanAmount1st <= 3000000) &&
		(creditScore >= 640) &&
		(LTV > 0) &&
		(CLTV <= 75)
      )
    then
        maxLTV = 75;
		maxCLTV = 75;
		maxLoanAmount = 417000;
		minScore = 640;
		OneUnitFlag = "N";
		restrictionFlags = 0;
		

    end
end	// rule AltA-MinMax-10




alias(rule, AltA-MinMax-11, "AltA-MinMax.11");

/* ==========================================================================
 * AltA-MinMax-11
 *
 *
 */
rule AltA-MinMax-11()
    if(
        (MinMaxAbbrev == "PRT OO 2") &&
		(DocTypeAbbrev == "SVLL") &&
		(loanAmount1st <= 3000000) &&
		(creditScore >= 660) &&
		(LTV > 0) &&
		(CLTV <= 75)
      )
    then
        maxLTV = 75;
		maxCLTV = 75;
		maxLoanAmount = 533850;
		minScore = 660;
		OneUnitFlag = "N";
		restrictionFlags = 0;
		

    end
end	// rule AltA-MinMax-11




alias(rule, AltA-MinMax-12, "AltA-MinMax.12");

/* ==========================================================================
 * AltA-MinMax-12
 *
 *
 */
rule AltA-MinMax-12()
    if(
        (MinMaxAbbrev == "PRT OO 3") &&
		(DocTypeAbbrev == "SVLL") &&
		(loanAmount1st <= 3000000) &&
		(creditScore >= 660) &&
		(LTV > 0) &&
		(CLTV <= 75)
      )
    then
        maxLTV = 75;
		maxCLTV = 75;
		maxLoanAmount = 645300;
		minScore = 700;
		OneUnitFlag = "N";
		restrictionFlags = 0;
		

    end
end	// rule AltA-MinMax-12




alias(rule, AltA-MinMax-13, "AltA-MinMax.13");

/* ==========================================================================
 * AltA-MinMax-13
 *
 *
 */
rule AltA-MinMax-13()
    if(
        (MinMaxAbbrev == "PRT OO 4") &&
		(DocTypeAbbrev == "SVLL") &&
		(loanAmount1st <= 3000000) &&
		(creditScore >= 700) &&
		(LTV > 0) &&
		(CLTV <= 75)
      )
    then
        maxLTV = 75;
		maxCLTV = 75;
		maxLoanAmount = 801950;
		minScore = 660;
		OneUnitFlag = "N";
		restrictionFlags = 0;
		

    end
end	// rule AltA-MinMax-13




alias(rule, AltA-MinMax-14, "AltA-MinMax.14");

/* ==========================================================================
 * AltA-MinMax-14
 *
 *
 */
rule AltA-MinMax-14()
    if(
        (MinMaxAbbrev == "PRT SH 1-2") &&
		(DocTypeAbbrev == "Full Doc") &&
		(loanAmount1st <= 3000000) &&
		(creditScore >= 700) &&
		(LTV > 0) &&
		(CLTV <= 90)
      )
    then
        maxLTV = 90;
		maxCLTV = 90;
		maxLoanAmount = 417000;
		minScore = 700;
		OneUnitFlag = "N";
		restrictionFlags = 0;
		

    end
end	// rule AltA-MinMax-14




alias(rule, AltA-MinMax-15, "AltA-MinMax.15");

/* ==========================================================================
 * AltA-MinMax-15
 *
 *
 */
rule AltA-MinMax-15()
    if(
        (MinMaxAbbrev == "PRT SH 1-2") &&
		(DocTypeAbbrev == "Full Doc") &&
		(loanAmount1st <= 3000000) &&
		(creditScore >= 660) &&
		(LTV > 0) &&
		(CLTV <= 90)
      )
    then
        maxLTV = 80;
		maxCLTV = 90;
		maxLoanAmount = 417000;
		minScore = 660;
		OneUnitFlag = "N";
		restrictionFlags = 0;
		

    end
end	// rule AltA-MinMax-15




alias(rule, AltA-MinMax-16, "AltA-MinMax.16");

/* ==========================================================================
 * AltA-MinMax-16
 *
 *
 */
rule AltA-MinMax-16()
    if(
        (MinMaxAbbrev == "PRT SH 1-2") &&
		(DocTypeAbbrev == "Full Doc") &&
		(loanAmount1st <= 3000000) &&
		(creditScore >= 640) &&
		(LTV > 0) &&
		(CLTV <= 75)
      )
    then
        maxLTV = 75;
		maxCLTV = 75;
		maxLoanAmount = 417000;
		minScore = 640;
		OneUnitFlag = "N";
		restrictionFlags = 0;
		

    end
end	// rule AltA-MinMax-16




alias(rule, AltA-MinMax-17, "AltA-MinMax.17");

/* ==========================================================================
 * AltA-MinMax-17
 *
 *
 */
rule AltA-MinMax-17()
    if(
        (MinMaxAbbrev == "PRT SH 1-2") &&
		(DocTypeAbbrev == "SVLL") &&
		(loanAmount1st <= 3000000) &&
		(creditScore >= 700) &&
		(LTV > 0) &&
		(CLTV <= 90)
      )
    then
        maxLTV = 80;
		maxCLTV = 90;
		maxLoanAmount = 417000;
		minScore = 700;
		OneUnitFlag = "N";
		restrictionFlags = 0;
		

    end
end	// rule AltA-MinMax-17




alias(rule, AltA-MinMax-18, "AltA-MinMax.18");

/* ==========================================================================
 * AltA-MinMax-18
 *
 *
 */
rule AltA-MinMax-18()
    if(
        (MinMaxAbbrev == "PRT SH 1-2") &&
		(DocTypeAbbrev == "SVLL") &&
		(loanAmount1st <= 3000000) &&
		(creditScore >= 640) &&
		(LTV > 0) &&
		(CLTV <= 75)
      )
    then
        maxLTV = 75;
		maxCLTV = 75;
		maxLoanAmount = 417000;
		minScore = 640;
		OneUnitFlag = "N";
		restrictionFlags = 0;
		

    end
end	// rule AltA-MinMax-18




alias(rule, AltA-MinMax-19, "AltA-MinMax.19");

/* ==========================================================================
 * AltA-MinMax-19
 *
 *
 */
rule AltA-MinMax-19()
    if(
        (MinMaxAbbrev == "PRT NOO 1") &&
		(DocTypeAbbrev == "Full Doc") &&
		(loanAmount1st <= 3000000) &&
		(creditScore >= 700) &&
		(LTV > 0) &&
		(CLTV <= 80)
      )
    then
        maxLTV = 80;
		maxCLTV = 80;
		maxLoanAmount = 417000;
		minScore = 700;
		OneUnitFlag = "N";
		restrictionFlags = 0;
		

    end
end	// rule AltA-MinMax-19




alias(rule, AltA-MinMax-2, "AltA-MinMax.2");

/* ==========================================================================
 * AltA-MinMax-2
 *
 *
 */
rule AltA-MinMax-2()
    if(
        (MinMaxAbbrev == "PRT OO 1") &&
		(DocTypeAbbrev == "Full Doc") &&
		(loanAmount1st <= 3000000) &&
		(creditScore >= 660) &&
		(LTV > 0) &&
		(CLTV <= 95)
      )
    then
        maxLTV = 95;
		maxCLTV = 95;
		maxLoanAmount = 417000;
		minScore = 660;
		OneUnitFlag = "N";
		restrictionFlags = 0;
		

    end
end	// rule AltA-MinMax-2




alias(rule, AltA-MinMax-20, "AltA-MinMax.20");

/* ==========================================================================
 * AltA-MinMax-20
 *
 *
 */
rule AltA-MinMax-20()
    if(
        (MinMaxAbbrev == "PRT NOO 1") &&
		(DocTypeAbbrev == "Full Doc") &&
		(loanAmount1st <= 3000000) &&
		(creditScore >= 640) &&
		(LTV > 0) &&
		(CLTV <= 75)
      )
    then
        maxLTV = 75;
		maxCLTV = 75;
		maxLoanAmount = 417000;
		minScore = 640;
		OneUnitFlag = "N";
		restrictionFlags = 0;
		

    end
end	// rule AltA-MinMax-20




alias(rule, AltA-MinMax-21, "AltA-MinMax.21");

/* ==========================================================================
 * AltA-MinMax-21
 *
 *
 */
rule AltA-MinMax-21()
    if(
        (MinMaxAbbrev == "PRT NOO 2") &&
		(DocTypeAbbrev == "Full Doc") &&
		(loanAmount1st <= 3000000) &&
		(creditScore >= 700) &&
		(LTV > 0) &&
		(CLTV <= 80)
      )
    then
        maxLTV = 80;
		maxCLTV = 80;
		maxLoanAmount = 533850;
		minScore = 700;
		OneUnitFlag = "N";
		restrictionFlags = 0;
		

    end
end	// rule AltA-MinMax-21




alias(rule, AltA-MinMax-22, "AltA-MinMax.22");

/* ==========================================================================
 * AltA-MinMax-22
 *
 *
 */
rule AltA-MinMax-22()
    if(
        (MinMaxAbbrev == "PRT NOO 2") &&
		(DocTypeAbbrev == "Full Doc") &&
		(loanAmount1st <= 3000000) &&
		(creditScore >= 640) &&
		(LTV > 0) &&
		(CLTV <= 75)
      )
    then
        maxLTV = 75;
		maxCLTV = 75;
		maxLoanAmount = 533850;
		minScore = 640;
		OneUnitFlag = "N";
		restrictionFlags = 0;
		

    end
end	// rule AltA-MinMax-22




alias(rule, AltA-MinMax-23, "AltA-MinMax.23");

/* ==========================================================================
 * AltA-MinMax-23
 *
 *
 */
rule AltA-MinMax-23()
    if(
        (MinMaxAbbrev == "PRT NOO 3") &&
		(DocTypeAbbrev == "Full Doc") &&
		(loanAmount1st <= 3000000) &&
		(creditScore >= 660) &&
		(LTV > 0) &&
		(CLTV <= 70)
      )
    then
        maxLTV = 70;
		maxCLTV = 70;
		maxLoanAmount = 645300;
		minScore = 660;
		OneUnitFlag = "N";
		restrictionFlags = 0;
		

    end
end	// rule AltA-MinMax-23




alias(rule, AltA-MinMax-24, "AltA-MinMax.24");

/* ==========================================================================
 * AltA-MinMax-24
 *
 *
 */
rule AltA-MinMax-24()
    if(
        (MinMaxAbbrev == "PRT NOO 4") &&
		(DocTypeAbbrev == "Full Doc") &&
		(loanAmount1st <= 3000000) &&
		(creditScore >= 660) &&
		(LTV > 0) &&
		(CLTV <= 70)
      )
    then
        maxLTV = 70;
		maxCLTV = 70;
		maxLoanAmount = 801950;
		minScore = 660;
		OneUnitFlag = "N";
		restrictionFlags = 0;
		

    end
end	// rule AltA-MinMax-24




alias(rule, AltA-MinMax-25, "AltA-MinMax.25");

/* ==========================================================================
 * AltA-MinMax-25
 *
 *
 */
rule AltA-MinMax-25()
    if(
        (MinMaxAbbrev == "PRT NOO 1") &&
		(DocTypeAbbrev == "SVLL") &&
		(loanAmount1st <= 3000000) &&
		(creditScore >= 700) &&
		(LTV > 0) &&
		(CLTV <= 80)
      )
    then
        maxLTV = 80;
		maxCLTV = 80;
		maxLoanAmount = 417000;
		minScore = 700;
		OneUnitFlag = "N";
		restrictionFlags = 0;
		

    end
end	// rule AltA-MinMax-25




alias(rule, AltA-MinMax-26, "AltA-MinMax.26");

/* ==========================================================================
 * AltA-MinMax-26
 *
 *
 */
rule AltA-MinMax-26()
    if(
        (MinMaxAbbrev == "PRT NOO 1") &&
		(DocTypeAbbrev == "SVLL") &&
		(loanAmount1st <= 3000000) &&
		(creditScore >= 660) &&
		(LTV > 0) &&
		(CLTV <= 75)
      )
    then
        maxLTV = 75;
		maxCLTV = 75;
		maxLoanAmount = 417000;
		minScore = 660;
		OneUnitFlag = "N";
		restrictionFlags = 0;
		

    end
end	// rule AltA-MinMax-26




alias(rule, AltA-MinMax-27, "AltA-MinMax.27");

/* ==========================================================================
 * AltA-MinMax-27
 *
 *
 */
rule AltA-MinMax-27()
    if(
        (MinMaxAbbrev == "PRT NOO 2") &&
		(DocTypeAbbrev == "SVLL") &&
		(loanAmount1st <= 3000000) &&
		(creditScore >= 680) &&
		(LTV > 0) &&
		(CLTV <= 75)
      )
    then
        maxLTV = 75;
		maxCLTV = 75;
		maxLoanAmount = 533850;
		minScore = 680;
		OneUnitFlag = "N";
		restrictionFlags = 0;
		

    end
end	// rule AltA-MinMax-27




alias(rule, AltA-MinMax-28, "AltA-MinMax.28");

/* ==========================================================================
 * AltA-MinMax-28
 *
 *
 */
rule AltA-MinMax-28()
    if(
        (MinMaxAbbrev == "PRT NOO 3") &&
		(DocTypeAbbrev == "SVLL") &&
		(loanAmount1st <= 3000000) &&
		(creditScore >= 700) &&
		(LTV > 0) &&
		(CLTV <= 70)
      )
    then
        maxLTV = 70;
		maxCLTV = 70;
		maxLoanAmount = 645300;
		minScore = 700;
		OneUnitFlag = "N";
		restrictionFlags = 0;
		

    end
end	// rule AltA-MinMax-28




alias(rule, AltA-MinMax-29, "AltA-MinMax.29");

/* ==========================================================================
 * AltA-MinMax-29
 *
 *
 */
rule AltA-MinMax-29()
    if(
        (MinMaxAbbrev == "PRT NOO 4") &&
		(DocTypeAbbrev == "SVLL") &&
		(loanAmount1st <= 3000000) &&
		(creditScore >= 700) &&
		(LTV > 0) &&
		(CLTV <= 70)
      )
    then
        maxLTV = 70;
		maxCLTV = 70;
		maxLoanAmount = 801950;
		minScore = 700;
		OneUnitFlag = "N";
		restrictionFlags = 0;
		

    end
end	// rule AltA-MinMax-29




alias(rule, AltA-MinMax-3, "AltA-MinMax.3");

/* ==========================================================================
 * AltA-MinMax-3
 *
 *
 */
rule AltA-MinMax-3()
    if(
        (MinMaxAbbrev == "PRT OO 2") &&
		(DocTypeAbbrev == "Full Doc") &&
		(loanAmount1st <= 3000000) &&
		(creditScore >= 640) &&
		(LTV > 0) &&
		(CLTV <= 75)
      )
    then
        maxLTV = 75;
		maxCLTV = 75;
		maxLoanAmount = 533850;
		minScore = 640;
		OneUnitFlag = "N";
		restrictionFlags = 0;
		

    end
end	// rule AltA-MinMax-3




alias(rule, AltA-MinMax-30, "AltA-MinMax.30");

/* ==========================================================================
 * AltA-MinMax-30
 *
 *
 */
rule AltA-MinMax-30()
    if(
        (MinMaxAbbrev == "CO OO 1") &&
		(DocTypeAbbrev == "Full Doc") &&
		(loanAmount1st <= 3000000) &&
		(creditScore >= 680) &&
		(LTV > 0) &&
		(CLTV <= 90)
      )
    then
        maxLTV = 90;
		maxCLTV = 90;
		maxLoanAmount = 417000;
		minScore = 660;
		OneUnitFlag = "N";
		restrictionFlags = 0;
		

    end
end	// rule AltA-MinMax-30




alias(rule, AltA-MinMax-31, "AltA-MinMax.31");

/* ==========================================================================
 * AltA-MinMax-31
 *
 *
 */
rule AltA-MinMax-31()
    if(
        (MinMaxAbbrev == "CO OO 1") &&
		(DocTypeAbbrev == "Full Doc") &&
		(loanAmount1st <= 3000000) &&
		(creditScore >= 640) &&
		(LTV > 0) &&
		(CLTV <= 75)
      )
    then
        maxLTV = 75;
		maxCLTV = 75;
		maxLoanAmount = 417000;
		minScore = 640;
		OneUnitFlag = "N";
		restrictionFlags = 0;
		

    end
end	// rule AltA-MinMax-31




alias(rule, AltA-MinMax-32, "AltA-MinMax.32");

/* ==========================================================================
 * AltA-MinMax-32
 *
 *
 */
rule AltA-MinMax-32()
    if(
        (MinMaxAbbrev == "CO OO 2") &&
		(DocTypeAbbrev == "Full Doc") &&
		(loanAmount1st <= 3000000) &&
		(creditScore >= 680) &&
		(LTV > 0) &&
		(CLTV <= 90)
      )
    then
        maxLTV = 90;
		maxCLTV = 90;
		maxLoanAmount = 500000;
		minScore = 660;
		OneUnitFlag = "N";
		restrictionFlags = 0;
		

    end
end	// rule AltA-MinMax-32




alias(rule, AltA-MinMax-33, "AltA-MinMax.33");

/* ==========================================================================
 * AltA-MinMax-33
 *
 *
 */
rule AltA-MinMax-33()
    if(
        (MinMaxAbbrev == "CO OO 2") &&
		(DocTypeAbbrev == "Full Doc") &&
		(loanAmount1st <= 3000000) &&
		(creditScore >= 640) &&
		(LTV > 0) &&
		(CLTV <= 75)
      )
    then
        maxLTV = 75;
		maxCLTV = 75;
		maxLoanAmount = 533850;
		minScore = 640;
		OneUnitFlag = "N";
		restrictionFlags = 0;
		

    end
end	// rule AltA-MinMax-33




alias(rule, AltA-MinMax-34, "AltA-MinMax.34");

/* ==========================================================================
 * AltA-MinMax-34
 *
 *
 */
rule AltA-MinMax-34()
    if(
        (MinMaxAbbrev == "CO OO 3") &&
		(DocTypeAbbrev == "Full Doc") &&
		(loanAmount1st <= 3000000) &&
		(creditScore >= 680) &&
		(LTV > 0) &&
		(CLTV <= 80)
      )
    then
        maxLTV = 80;
		maxCLTV = 80;
		maxLoanAmount = 645300;
		minScore = 680;
		OneUnitFlag = "N";
		restrictionFlags = 0;
		

    end
end	// rule AltA-MinMax-34




alias(rule, AltA-MinMax-35, "AltA-MinMax.35");

/* ==========================================================================
 * AltA-MinMax-35
 *
 *
 */
rule AltA-MinMax-35()
    if(
        (MinMaxAbbrev == "CO OO 3") &&
		(DocTypeAbbrev == "Full Doc") &&
		(loanAmount1st <= 3000000) &&
		(creditScore >= 660) &&
		(LTV > 0) &&
		(CLTV <= 75)
      )
    then
        maxLTV = 75;
		maxCLTV = 75;
		maxLoanAmount = 645300;
		minScore = 660;
		OneUnitFlag = "N";
		restrictionFlags = 0;
		

    end
end	// rule AltA-MinMax-35




alias(rule, AltA-MinMax-36, "AltA-MinMax.36");

/* ==========================================================================
 * AltA-MinMax-36
 *
 *
 */
rule AltA-MinMax-36()
    if(
        (MinMaxAbbrev == "CO OO 4") &&
		(DocTypeAbbrev == "Full Doc") &&
		(loanAmount1st <= 3000000) &&
		(creditScore >= 680) &&
		(LTV > 0) &&
		(CLTV <= 80)
      )
    then
        maxLTV = 80;
		maxCLTV = 80;
		maxLoanAmount = 801950;
		minScore = 680;
		OneUnitFlag = "N";
		restrictionFlags = 0;
		

    end
end	// rule AltA-MinMax-36




alias(rule, AltA-MinMax-37, "AltA-MinMax.37");

/* ==========================================================================
 * AltA-MinMax-37
 *
 *
 */
rule AltA-MinMax-37()
    if(
        (MinMaxAbbrev == "CO OO 4") &&
		(DocTypeAbbrev == "Full Doc") &&
		(loanAmount1st <= 3000000) &&
		(creditScore >= 660) &&
		(LTV > 0) &&
		(CLTV <= 75)
      )
    then
        maxLTV = 75;
		maxCLTV = 75;
		maxLoanAmount = 801950;
		minScore = 660;
		OneUnitFlag = "N";
		restrictionFlags = 0;
		

    end
end	// rule AltA-MinMax-37




alias(rule, AltA-MinMax-38, "AltA-MinMax.38");

/* ==========================================================================
 * AltA-MinMax-38
 *
 *
 */
rule AltA-MinMax-38()
    if(
        (MinMaxAbbrev == "CO OO 1") &&
		(DocTypeAbbrev == "SVLL") &&
		(loanAmount1st <= 3000000) &&
		(creditScore >= 700) &&
		(LTV > 0) &&
		(CLTV <= 90)
      )
    then
        maxLTV = 90;
		maxCLTV = 90;
		maxLoanAmount = 417000;
		minScore = 680;
		OneUnitFlag = "N";
		restrictionFlags = 0;
		

    end
end	// rule AltA-MinMax-38




alias(rule, AltA-MinMax-39, "AltA-MinMax.39");

/* ==========================================================================
 * AltA-MinMax-39
 *
 *
 */
rule AltA-MinMax-39()
    if(
        (MinMaxAbbrev == "CO OO 1") &&
		(DocTypeAbbrev == "SVLL") &&
		(loanAmount1st <= 3000000) &&
		(creditScore >= 660) &&
		(LTV > 0) &&
		(CLTV <= 75)
      )
    then
        maxLTV = 75;
		maxCLTV = 75;
		maxLoanAmount = 417000;
		minScore = 660;
		OneUnitFlag = "N";
		restrictionFlags = 0;
		

    end
end	// rule AltA-MinMax-39




alias(rule, AltA-MinMax-4, "AltA-MinMax.4");

/* ==========================================================================
 * AltA-MinMax-4
 *
 *
 */
rule AltA-MinMax-4()
    if(
        (MinMaxAbbrev == "PRT OO 2") &&
		(DocTypeAbbrev == "Full Doc") &&
		(loanAmount1st <= 3000000) &&
		(creditScore >= 660) &&
		(LTV > 0) &&
		(CLTV <= 95)
      )
    then
        maxLTV = 95;
		maxCLTV = 95;
		maxLoanAmount = 533850;
		minScore = 660;
		OneUnitFlag = "N";
		restrictionFlags = 0;
		

    end
end	// rule AltA-MinMax-4




alias(rule, AltA-MinMax-40, "AltA-MinMax.40");

/* ==========================================================================
 * AltA-MinMax-40
 *
 *
 */
rule AltA-MinMax-40()
    if(
        (MinMaxAbbrev == "CO OO 2") &&
		(DocTypeAbbrev == "SVLL") &&
		(loanAmount1st <= 3000000) &&
		(creditScore >= 680) &&
		(LTV > 0) &&
		(CLTV <= 75)
      )
    then
        maxLTV = 75;
		maxCLTV = 75;
		maxLoanAmount = 533850;
		minScore = 680;
		OneUnitFlag = "N";
		restrictionFlags = 0;
		

    end
end	// rule AltA-MinMax-40




alias(rule, AltA-MinMax-41, "AltA-MinMax.41");

/* ==========================================================================
 * AltA-MinMax-41
 *
 *
 */
rule AltA-MinMax-41()
    if(
        (MinMaxAbbrev == "CO OO 3") &&
		(DocTypeAbbrev == "SVLL") &&
		(loanAmount1st <= 3000000) &&
		(creditScore >= 700) &&
		(LTV > 0) &&
		(CLTV <= 70)
      )
    then
        maxLTV = 70;
		maxCLTV = 70;
		maxLoanAmount = 645300;
		minScore = 680;
		OneUnitFlag = "N";
		restrictionFlags = 0;
		

    end
end	// rule AltA-MinMax-41




alias(rule, AltA-MinMax-42, "AltA-MinMax.42");

/* ==========================================================================
 * AltA-MinMax-42
 *
 *
 */
rule AltA-MinMax-42()
    if(
        (MinMaxAbbrev == "CO OO 4") &&
		(DocTypeAbbrev == "SVLL") &&
		(loanAmount1st <= 3000000) &&
		(creditScore >= 700) &&
		(LTV > 0) &&
		(CLTV <= 70)
      )
    then
        maxLTV = 70;
		maxCLTV = 70;
		maxLoanAmount = 801950;
		minScore = 680;
		OneUnitFlag = "N";
		restrictionFlags = 0;
		

    end
end	// rule AltA-MinMax-42




alias(rule, AltA-MinMax-43, "AltA-MinMax.43");

/* ==========================================================================
 * AltA-MinMax-43
 *
 *
 */
rule AltA-MinMax-43()
    if(
        (MinMaxAbbrev == "CO SH 1-2") &&
		(DocTypeAbbrev == "Full Doc") &&
		(loanAmount1st <= 3000000) &&
		(creditScore >= 660) &&
		(LTV > 0) &&
		(CLTV <= 80)
      )
    then
        maxLTV = 80;
		maxCLTV = 80;
		maxLoanAmount = 417000;
		minScore = 660;
		OneUnitFlag = "N";
		restrictionFlags = 0;
		

    end
end	// rule AltA-MinMax-43




alias(rule, AltA-MinMax-44, "AltA-MinMax.44");

/* ==========================================================================
 * AltA-MinMax-44
 *
 *
 */
rule AltA-MinMax-44()
    if(
        (MinMaxAbbrev == "CO SH 1-2") &&
		(DocTypeAbbrev == "SVLL") &&
		(loanAmount1st <= 3000000) &&
		(creditScore >= 680) &&
		(LTV > 0) &&
		(CLTV <= 75)
      )
    then
        maxLTV = 75;
		maxCLTV = 75;
		maxLoanAmount = 417000;
		minScore = 680;
		OneUnitFlag = "N";
		restrictionFlags = 0;
		

    end
end	// rule AltA-MinMax-44




alias(rule, AltA-MinMax-45, "AltA-MinMax.45");

/* ==========================================================================
 * AltA-MinMax-45
 *
 *
 */
rule AltA-MinMax-45()
    if(
        (MinMaxAbbrev == "CO NOO 1") &&
		(DocTypeAbbrev == "Full Doc") &&
		(loanAmount1st <= 3000000) &&
		(creditScore >= 680) &&
		(LTV > 0) &&
		(CLTV <= 70)
      )
    then
        maxLTV = 70;
		maxCLTV = 70;
		maxLoanAmount = 417000;
		minScore = 680;
		OneUnitFlag = "N";
		restrictionFlags = 0;
		

    end
end	// rule AltA-MinMax-45




alias(rule, AltA-MinMax-46, "AltA-MinMax.46");

/* ==========================================================================
 * AltA-MinMax-46
 *
 *
 */
rule AltA-MinMax-46()
    if(
        (MinMaxAbbrev == "CO NOO 2") &&
		(DocTypeAbbrev == "Full Doc") &&
		(loanAmount1st <= 3000000) &&
		(creditScore >= 700) &&
		(LTV > 0) &&
		(CLTV <= 70)
      )
    then
        maxLTV = 70;
		maxCLTV = 70;
		maxLoanAmount = 533850;
		minScore = 700;
		OneUnitFlag = "N";
		restrictionFlags = 0;
		

    end
end	// rule AltA-MinMax-46




alias(rule, AltA-MinMax-47, "AltA-MinMax.47");

/* ==========================================================================
 * AltA-MinMax-47
 *
 *
 */
rule AltA-MinMax-47()
    if(
        (MinMaxAbbrev == "CO NOO 1") &&
		(DocTypeAbbrev == "SVLL") &&
		(loanAmount1st <= 3000000) &&
		(creditScore >= 680) &&
		(LTV > 0) &&
		(CLTV <= 70)
      )
    then
        maxLTV = 70;
		maxCLTV = 70;
		maxLoanAmount = 417000;
		minScore = 680;
		OneUnitFlag = "N";
		restrictionFlags = 0;
		

    end
end	// rule AltA-MinMax-47




alias(rule, AltA-MinMax-48, "AltA-MinMax.48");

/* ==========================================================================
 * AltA-MinMax-48
 *
 *
 */
rule AltA-MinMax-48()
    if(
        (MinMaxAbbrev == "CO NOO 2") &&
		(DocTypeAbbrev == "SVLL") &&
		(loanAmount1st <= 3000000) &&
		(creditScore >= 700) &&
		(LTV > 0) &&
		(CLTV <= 70)
      )
    then
        maxLTV = 70;
		maxCLTV = 70;
		maxLoanAmount = 533850;
		minScore = 700;
		OneUnitFlag = "N";
		restrictionFlags = 0;
		

    end
end	// rule AltA-MinMax-48




alias(rule, AltA-MinMax-5, "AltA-MinMax.5");

/* ==========================================================================
 * AltA-MinMax-5
 *
 *
 */
rule AltA-MinMax-5()
    if(
        (MinMaxAbbrev == "PRT OO 3") &&
		(DocTypeAbbrev == "Full Doc") &&
		(loanAmount1st <= 3000000) &&
		(creditScore >= 640) &&
		(LTV > 0) &&
		(CLTV <= 75)
      )
    then
        maxLTV = 75;
		maxCLTV = 75;
		maxLoanAmount = 645300;
		minScore = 640;
		OneUnitFlag = "N";
		restrictionFlags = 0;
		

    end
end	// rule AltA-MinMax-5




alias(rule, AltA-MinMax-6, "AltA-MinMax.6");

/* ==========================================================================
 * AltA-MinMax-6
 *
 *
 */
rule AltA-MinMax-6()
    if(
        (MinMaxAbbrev == "PRT OO 3") &&
		(DocTypeAbbrev == "Full Doc") &&
		(loanAmount1st <= 3000000) &&
		(creditScore >= 680) &&
		(LTV > 0) &&
		(CLTV <= 90)
      )
    then
        maxLTV = 80;
		maxCLTV = 90;
		maxLoanAmount = 645300;
		minScore = 680;
		OneUnitFlag = "N";
		restrictionFlags = 0;
		

    end
end	// rule AltA-MinMax-6




alias(rule, AltA-MinMax-7, "AltA-MinMax.7");

/* ==========================================================================
 * AltA-MinMax-7
 *
 *
 */
rule AltA-MinMax-7()
    if(
        (MinMaxAbbrev == "PRT OO 4") &&
		(DocTypeAbbrev == "Full Doc") &&
		(loanAmount1st <= 3000000) &&
		(creditScore >= 680) &&
		(LTV > 0) &&
		(CLTV <= 90)
      )
    then
        maxLTV = 80;
		maxCLTV = 90;
		maxLoanAmount = 801950;
		minScore = 680;
		OneUnitFlag = "N";
		restrictionFlags = 0;
		

    end
end	// rule AltA-MinMax-7




alias(rule, AltA-MinMax-8, "AltA-MinMax.8");

/* ==========================================================================
 * AltA-MinMax-8
 *
 *
 */
rule AltA-MinMax-8()
    if(
        (MinMaxAbbrev == "PRT OO 4") &&
		(DocTypeAbbrev == "Full Doc") &&
		(loanAmount1st <= 3000000) &&
		(creditScore >= 640) &&
		(LTV > 0) &&
		(CLTV <= 75)
      )
    then
        maxLTV = 75;
		maxCLTV = 75;
		maxLoanAmount = 801950;
		minScore = 640;
		OneUnitFlag = "N";
		restrictionFlags = 0;
		

    end
end	// rule AltA-MinMax-8




alias(rule, AltA-MinMax-9, "AltA-MinMax.9");

/* ==========================================================================
 * AltA-MinMax-9
 *
 *
 */
rule AltA-MinMax-9()
    if(
        (MinMaxAbbrev == "PRT OO 1") &&
		(DocTypeAbbrev == "SVLL") &&
		(loanAmount1st <= 3000000) &&
		(creditScore >= 660) &&
		(LTV > 0) &&
		(CLTV <= 90)
      )
    then
        maxLTV = 90;
		maxCLTV = 90;
		maxLoanAmount = 417000;
		minScore = 660;
		OneUnitFlag = "N";
		restrictionFlags = 0;
		

    end
end	// rule AltA-MinMax-9





/* ==========================================================================
 * AltA-MtgLateExceptionChk
 *
 *
 */
rule AltA-MtgLateExceptionChk()
    if(
        (TDLN-Late30s > 0) ||
		(TDLN-Late30sx24 > 1)
      )
    then
        Decision = "Referred";
		
        message(exception,  exception, "Mortgage lates have exceeded program limits.");

    end
end	// rule AltA-MtgLateExceptionChk





/* ==========================================================================
 * AltA-NoMICheck
 *
 *
 */
rule AltA-NoMICheck()
    if(
        (NoMIFlag == "Y") &&
		(LTV > 80)
      )
    then
        Decision = "Referred";
		
        message(exception,  exception, "No MI option is not available on this product");

    end
end	// rule AltA-NoMICheck




alias(rule, AltA-NoMIPricingNonWarrCondoLeasehold, "AltA-NoMI Pricing NonWarrCondo Leasehold");

/* ==========================================================================
 * AltA-NoMIPricingNonWarrCondoLeasehold
 *
 *
 */
rule AltA-NoMIPricingNonWarrCondoLeasehold()
    if(
        (pNonWarrantableCondo == "Y") ||
		(pEstateHeld == "Leasehold")
      )
    then
        NoMIPriceReqd = "Y1";
		

    end
end	// rule AltA-NoMIPricingNonWarrCondoLeasehold




alias(rule, AltA-PrimaryBorrowerCalc1, "AltA-Primary Borrower Calc 1");

/* ==========================================================================
 * AltA-PrimaryBorrowerCalc1
 *
 *
 */
rule AltA-PrimaryBorrowerCalc1()
    if(
        (ForeignNationalIndicator == "Y")
      )
    then
        PrimaryBorrowerIndicator = "For Natl Borr";
		

    end
end	// rule AltA-PrimaryBorrowerCalc1




alias(rule, AltA-PrimaryBorrowerCalc2, "AltA-Primary Borrower Calc 2");

/* ==========================================================================
 * AltA-PrimaryBorrowerCalc2
 *
 *
 */
rule AltA-PrimaryBorrowerCalc2()
    if(
        (pDocumentType == "NINA") ||
		(pDocumentType == "No Doc") ||
		(pDocumentType == "No Doc with Assets") ||
		(pDocumentType == "No Ratio")
      )
    then
        PrimaryBorrowerIndicator = "Lowest Rep Score Borr";
		

    end
end	// rule AltA-PrimaryBorrowerCalc2




alias(rule, AltA-PrimaryBorrowerCalc3, "AltA-Primary Borrower Calc 3");

/* ==========================================================================
 * AltA-PrimaryBorrowerCalc3
 *
 *
 */
rule AltA-PrimaryBorrowerCalc3()
    if(
        (pNo-ofApplicants > 0)
      )
    then
        PrimaryBorrowerIndicator = "Hghst Inc Borr";
		

    end
end	// rule AltA-PrimaryBorrowerCalc3




alias(rule, AltA-PrimaryFirstTimeHomeBuyer, "AltA-Primary First Time Home Buyer");

/* ==========================================================================
 * AltA-PrimaryFirstTimeHomeBuyer
 *
 *
 */
rule AltA-PrimaryFirstTimeHomeBuyer()
    if(
        ((PrimaryBorrowerIndicator == "Hghst Inc Borr") &&
		(pFTHB-HghstIncBorr(RepScorewSingle) == "Y")) ||
		((PrimaryBorrowerIndicator == "Lowest Rep Score Borr") &&
		(pFTHB-LowRepScore(wSingle)Borr == "Y")) ||
		((PrimaryBorrowerIndicator == "For Natl Borr") &&
		(pFTHB-ForNatl == "Y"))
      )
    then
        FTHB = "N";
		

    end
end	// rule AltA-PrimaryFirstTimeHomeBuyer




alias(rule, AltA-RepFICOScoreCalc1, "AltA-Rep FICO Score Calc 1");

/* ==========================================================================
 * AltA-RepFICOScoreCalc1
 *
 *
 */
rule AltA-RepFICOScoreCalc1()
    if(
        (PrimaryBorrowerIndicator == "Hghst Inc Borr")
      )
    then
        creditScore = pPrimeBorrHighestIncMidScore;
		

    end
end	// rule AltA-RepFICOScoreCalc1




alias(rule, AltA-RepFICOScoreCalc2, "AltA-Rep FICO Score Calc 2");

/* ==========================================================================
 * AltA-RepFICOScoreCalc2
 *
 *
 */
rule AltA-RepFICOScoreCalc2()
    if(
        (PrimaryBorrowerIndicator == "Lowest Rep Score Borr")
      )
    then
        creditScore = pPrBorrLowScoreMid(wSingle)Score;
		

    end
end	// rule AltA-RepFICOScoreCalc2




alias(rule, AltA-RepFICOScoreCalc3, "AltA-Rep FICO Score Calc 3");

/* ==========================================================================
 * AltA-RepFICOScoreCalc3
 *
 *
 */
rule AltA-RepFICOScoreCalc3()
    if(
        (PrimaryBorrowerIndicator == "For Natl Borr")
      )
    then
        creditScore = pPrBorrForNatlMid(wSingle)Score;
		

    end
end	// rule AltA-RepFICOScoreCalc3





/* ==========================================================================
 * AltA-RetentionSVLLDoc95LTV
 *
 *
 */
rule AltA-RetentionSVLLDoc95LTV()
    if(
        (pUserType == "DONOTUSE")
      )
    then
        

    end
end	// rule AltA-RetentionSVLLDoc95LTV




alias(rule, AltA-SetDocTypeAbbrev-1, "AltA-SetDocTypeAbbrev.1");

/* ==========================================================================
 * AltA-SetDocTypeAbbrev-1
 *
 *
 */
rule AltA-SetDocTypeAbbrev-1()
    if(
        (pDocumentType == "Full Doc")
      )
    then
        DocTypeAbbrev = "Full Doc";
		

    end
end	// rule AltA-SetDocTypeAbbrev-1




alias(rule, AltA-SetDocTypeAbbrev-10, "AltA-SetDocTypeAbbrev.10");

/* ==========================================================================
 * AltA-SetDocTypeAbbrev-10
 *
 *
 */
rule AltA-SetDocTypeAbbrev-10()
    if(
        (pDocumentType == "No Doc")
      )
    then
        DocTypeAbbrev = "No Doc";
		

    end
end	// rule AltA-SetDocTypeAbbrev-10




alias(rule, AltA-SetDocTypeAbbrev-11, "AltA-SetDocTypeAbbrev.11");

/* ==========================================================================
 * AltA-SetDocTypeAbbrev-11
 *
 *
 */
rule AltA-SetDocTypeAbbrev-11()
    if(
        (pDocumentType == "No Doc with Assets")
      )
    then
        DocTypeAbbrev = "No Doc with Assets";
		

    end
end	// rule AltA-SetDocTypeAbbrev-11




alias(rule, AltA-SetDocTypeAbbrev-2, "AltA-SetDocTypeAbbrev.2");

/* ==========================================================================
 * AltA-SetDocTypeAbbrev-2
 *
 *
 */
rule AltA-SetDocTypeAbbrev-2()
    if(
        (pDocumentType == "1Yr Full Doc")
      )
    then
        DocTypeAbbrev = "SVLL";
		

    end
end	// rule AltA-SetDocTypeAbbrev-2




alias(rule, AltA-SetDocTypeAbbrev-3, "AltA-SetDocTypeAbbrev.3");

/* ==========================================================================
 * AltA-SetDocTypeAbbrev-3
 *
 *
 */
rule AltA-SetDocTypeAbbrev-3()
    if(
        (pDocumentType == "24 Mth Bank Stmt")
      )
    then
        DocTypeAbbrev = "SVLL";
		

    end
end	// rule AltA-SetDocTypeAbbrev-3




alias(rule, AltA-SetDocTypeAbbrev-4, "AltA-SetDocTypeAbbrev.4");

/* ==========================================================================
 * AltA-SetDocTypeAbbrev-4
 *
 *
 */
rule AltA-SetDocTypeAbbrev-4()
    if(
        (pDocumentType == "SIVA")
      )
    then
        DocTypeAbbrev = "SVLL";
		

    end
end	// rule AltA-SetDocTypeAbbrev-4




alias(rule, AltA-SetDocTypeAbbrev-5, "AltA-SetDocTypeAbbrev.5");

/* ==========================================================================
 * AltA-SetDocTypeAbbrev-5
 *
 *
 */
rule AltA-SetDocTypeAbbrev-5()
    if(
        (pDocumentType == "Lite Doc")
      )
    then
        DocTypeAbbrev = "SVLL";
		

    end
end	// rule AltA-SetDocTypeAbbrev-5




alias(rule, AltA-SetDocTypeAbbrev-6, "AltA-SetDocTypeAbbrev.6");

/* ==========================================================================
 * AltA-SetDocTypeAbbrev-6
 *
 *
 */
rule AltA-SetDocTypeAbbrev-6()
    if(
        (pDocumentType == "Limited Doc")
      )
    then
        DocTypeAbbrev = "SVLL";
		

    end
end	// rule AltA-SetDocTypeAbbrev-6




alias(rule, AltA-SetDocTypeAbbrev-7, "AltA-SetDocTypeAbbrev.7");

/* ==========================================================================
 * AltA-SetDocTypeAbbrev-7
 *
 *
 */
rule AltA-SetDocTypeAbbrev-7()
    if(
        (pDocumentType == "No Ratio")
      )
    then
        DocTypeAbbrev = "No Ratio";
		

    end
end	// rule AltA-SetDocTypeAbbrev-7




alias(rule, AltA-SetDocTypeAbbrev-8, "AltA-SetDocTypeAbbrev.8");

/* ==========================================================================
 * AltA-SetDocTypeAbbrev-8
 *
 *
 */
rule AltA-SetDocTypeAbbrev-8()
    if(
        (pDocumentType == "SISA")
      )
    then
        DocTypeAbbrev = "SISA";
		

    end
end	// rule AltA-SetDocTypeAbbrev-8




alias(rule, AltA-SetDocTypeAbbrev-9, "AltA-SetDocTypeAbbrev.9");

/* ==========================================================================
 * AltA-SetDocTypeAbbrev-9
 *
 *
 */
rule AltA-SetDocTypeAbbrev-9()
    if(
        (pDocumentType == "NINA")
      )
    then
        DocTypeAbbrev = "NINA";
		

    end
end	// rule AltA-SetDocTypeAbbrev-9





/* ==========================================================================
 * AltA-SetFullDocFlag
 *
 *
 */
rule AltA-SetFullDocFlag()
    if(
        (pDocumentType == "Full Doc")
      )
    then
        fIsFullDoc = "TRUE";
		

    else
        fIsFullDoc = "FALSE";
		

    end
end	// rule AltA-SetFullDocFlag




alias(rule, AltA-VirtualFCConditionRule1, "AltA-Virtual FC Condition Rule 1");

/* ==========================================================================
 * AltA-VirtualFCConditionRule1
 *
 *
 */
rule AltA-VirtualFCConditionRule1()
    if(
        (pLoanAmount <= 1000000) &&
		(pMtgConsumer120Last36noDerogs > 0)
      )
    then
        
        condition(credit, docs, "Proof 120+ days late was cured or brought current greater than three (3) years.");

    end
end	// rule AltA-VirtualFCConditionRule1




alias(rule, AltA-VirtualFCConditionRule2, "AltA-Virtual FC Condition Rule 2");

/* ==========================================================================
 * AltA-VirtualFCConditionRule2
 *
 *
 */
rule AltA-VirtualFCConditionRule2()
    if(
        (pLoanAmount > 1000000) &&
		(pMtgConsumer120Last84noDerogs > 0)
      )
    then
        
        condition(asset, docs, "Proof 120+ days late was cured or brought current greater than seven (7) years.");

    end
end	// rule AltA-VirtualFCConditionRule2





/* ==========================================================================
 * AltA-WaiveTdlBkCheck
 *
 *
 */
rule AltA-WaiveTdlBkCheck()
    if(
        ((pBankruptcyChapter7 > 0) &&
		(pChapter7BKClosedDuration < 84)) ||
		((pBankruptcyChapter13 > 0) &&
		(pChapter13FiledDuration < 84))
      )
    then
        fBkTdlCk = 1;
		

    end
end	// rule AltA-WaiveTdlBkCheck





/* ==========================================================================
 * CMT-NormalizeBkRules
 *
 *
 */
rule CMT-NormalizeBkRules()
    if(
        (pLoanAmount != pLoanAmount)
      )
    then
        
        message(observation, "These values have to be normalized for Unifi. Due to this, if a credit report does NOT have a BK7 or 13 the FiledDate PPM will still return 01. If no BK exists, the filed date DPM is set to 00000000 when the flag is set to N.");

    end
end	// rule CMT-NormalizeBkRules





/* ==========================================================================
 * CMT-Threshold
 *
 *
 */
rule CMT-Threshold()
    if(
        (pLoanAmount < 0)
      )
    then
        
        message(observation, "See G:\ITGLS\GLS\docs\general\Threshold.doc for more information");

    end
end	// rule CMT-Threshold





/* ==========================================================================
 * Conditions-State-NV
 *
 *
 */
rule Conditions-State-NV()
    if(
        (pSubjectPropertyState == "NV")
      )
    then
        
        condition(asset, docs, "Executed Nevada Ability to Repay Disclosure completed by Lender");

    end
end	// rule Conditions-State-NV





/* ==========================================================================
 * Exptn-PoconoPa
 *
 *
 */
rule Exptn-PoconoPa()
    if(
        (LTV > 80) &&
		(fLimitRuralZip == 1)
      )
    then
        Decision = "Referred";
		
        message(exception,  exception, "Rural Properties in the Pocono Region of PA have a Max LTV of 80%.");

    end
end	// rule Exptn-PoconoPa




alias(rule, G-1stLoanAmount, "G-1st Loan Amount");

/* ==========================================================================
 * G-1stLoanAmount
 *
 *
 */
rule G-1stLoanAmount()
    if(
        (pLienNumber == 1)
      )
    then
        loanAmount1st = pLoanAmount;
		cvMtgNoUFMIP = loanAmount1st;
		combinedLoanAmount = pLoanAmount + pOtherLoanAmount;
		loanAmount2nd = pOtherLoanAmount;
		

    else
        loanAmount1st = pOtherLoanAmount;
		loanAmount2nd = pLoanAmount;
		cvMtgNoUFMIP = loanAmount1st;
		combinedLoanAmount = pLoanAmount + pOtherLoanAmount;
		

    end
end	// rule G-1stLoanAmount




alias(rule, G-BorrowerType, "G-Borrower Type");

/* ==========================================================================
 * G-BorrowerType
 *
 *
 */
rule G-BorrowerType()
    if(
        (pCitizenshipBorr1 != "ForeignNational") &&
		(pCitizenshipBorr2 != "ForeignNational") &&
		(pCitizenshipBorr3 != "ForeignNational") &&
		(pCitizenshipBorr4 != "ForeignNational") &&
		(pCitizenshipBorr5 != "ForeignNational") &&
		(pCitizenshipBorr1 != "NonPermanentResidentAlien") &&
		(pCitizenshipBorr2 != "NonPermanentResidentAlien") &&
		(pCitizenshipBorr3 != "NonPermanentResidentAlien") &&
		(pCitizenshipBorr4 != "NonPermanentResidentAlien") &&
		(pCitizenshipBorr5 != "NonPermanentResidentAlien") &&
		((pCitizenshipBorr1 == "PermanentResidentAlien") ||
		(pCitizenshipBorr2 == "PermanentResidentAlien") ||
		(pCitizenshipBorr3 == "PermanentResidentAlien") ||
		(pCitizenshipBorr4 == "PermanentResidentAlien") ||
		(pCitizenshipBorr5 == "PermanentResidentAlien") ||
		(pDeclPermResident > 0))
      )
    then
        BorrowerType = "Permanent Resident Alien";
		

    else
        BorrowerType = "NA";
		

    end
end	// rule G-BorrowerType




alias(rule, G-Calc6MoReserves, "G-Calc 6MoReserves");

/* ==========================================================================
 * G-Calc6MoReserves
 *
 *
 */
rule G-Calc6MoReserves()
    if(
        (pLoanAmount > 0)
      )
    then
        SixMoReserves = 6 * PITI;
		

    end
end	// rule G-Calc6MoReserves





/* ==========================================================================
 * G-CalcEarnestDeposit
 *
 *
 */
rule G-CalcEarnestDeposit()
    if(
        (pLoanAmount > 0)
      )
    then
        EarnestDepositPerc = (pAssetCashDeposits / propertyValue) * 100;
		

    end
end	// rule G-CalcEarnestDeposit





/* ==========================================================================
 * G-CalcTotalIncome-FullDoc
 *
 *
 */
rule G-CalcTotalIncome-FullDoc()
    if(
        (fIsFullDoc == "TRUE") ||
		(pDocumentType == "Lite Doc") ||
		(pDocumentType == "Limited Doc")
      )
    then
        TotalIncomeAmt = pTotalIncome - pTrailingSpouseIncome;
		

    end
end	// rule G-CalcTotalIncome-FullDoc





/* ==========================================================================
 * G-CalcTotalIncome-Stated
 *
 *
 */
rule G-CalcTotalIncome-Stated()
    if(
        (pDocumentType == "SIVA") ||
		(pDocumentType == "SISA")
      )
    then
        TotalIncomeAmt = pTotalIncome - IneligibleStatedInc;
		

    end
end	// rule G-CalcTotalIncome-Stated




alias(rule, G-Cashto_fromBorrower, "G-Cash to_from Borrower");

/* ==========================================================================
 * G-Cashto_fromBorrower
 *
 *
 */
rule G-Cashto_fromBorrower()
    if(
        (pPurposeOfLoan == "Purchase")
      )
    then
        EstimatedCashtoBorrower = (pLoanAmount + pOtherLoanAmount + pOutsideFinancing + pSellersContributionToClosingCost + pSellerCredit + pLenderCredit + pRelocationFunds + pLeasePurchaseFund + pCashDeposit + pOtherCredit + pEmployerAssistedHousing + pPmiMipFundingFeeFinanced) - (acquisitionCost + pLandValue + TotalPayoffs + pEstimatedClosingCosts + pEstimatedPrepaidItems + pPmiMipFundingFee + pDiscount);
		

    else
        EstimatedCashtoBorrower = (pLoanAmount + pOtherLoanAmount + pOutsideFinancing + pSellersContributionToClosingCost + pSellerCredit + pLenderCredit + pRelocationFunds + pLeasePurchaseFund + pCashDeposit + pOtherCredit + pEmployerAssistedHousing + pPmiMipFundingFeeFinanced) - (pLandValue + TotalPayoffs + pEstimatedClosingCosts + pEstimatedPrepaidItems + pPmiMipFundingFee + pDiscount);
		

    end
end	// rule G-Cashto_fromBorrower





/* ==========================================================================
 * G-CheckCompatibilityOf1st
 *
 *
 */
rule G-CheckCompatibilityOf1st()
    if(
        (pCombo > 0) &&
		(amortType1st == "NA")
      )
    then
        
        message(exception,  exception, "This product is not compatible with the requested 1st.");

    end
end	// rule G-CheckCompatibilityOf1st





/* ==========================================================================
 * G-CheckCompatibilityOf2nd
 *
 *
 */
rule G-CheckCompatibilityOf2nd()
    if(
        (pCombo > 0) &&
		(AmortType2nd == "NA")
      )
    then
        
        message(exception,  exception, "This product is not compatible with the requested 2nd.");

    end
end	// rule G-CheckCompatibilityOf2nd




alias(rule, G-CheckOtherFinancingRule1, "G-CheckOtherFinancing Rule 1");

/* ==========================================================================
 * G-CheckOtherFinancingRule1
 *
 *
 */
rule G-CheckOtherFinancingRule1()
    if(
        (pCombo > 0) &&
		(pOutsideFinancing > 0) &&
		(pOutsideFinancing == pSubFinancing)
      )
    then
        Decision = "Referred";
		
        message(exception,  exception, "Additional Sub Financing is not allowed on Combo Loans.");

    end
end	// rule G-CheckOtherFinancingRule1




alias(rule, G-CheckOtherFinancingRule2, "G-CheckOtherFinancing Rule 2");

/* ==========================================================================
 * G-CheckOtherFinancingRule2
 *
 *
 */
rule G-CheckOtherFinancingRule2()
    if(
        (pCombo > 0) &&
		(pOutsideFinancing > 0) &&
		((pOutsideFinancing < pSubFinancing) ||
		(pOutsideFinancing > pSubFinancing))
      )
    then
        Decision = "Referred";
		
        message(exception,  exception, "Subordination of existing mortgage is not allowed on Combo Loans.");

    end
end	// rule G-CheckOtherFinancingRule2




alias(rule, G-CheckOtherFinancingRule3, "G-CheckOtherFinancing Rule 3");

/* ==========================================================================
 * G-CheckOtherFinancingRule3
 *
 *
 */
rule G-CheckOtherFinancingRule3()
    if(
        (pOutsideFinancing > 0) &&
		((pOutsideFinancing > pSubFinancing) ||
		(pOutsideFinancing < pSubFinancing)) &&
		(pSubFinancing > 0)
      )
    then
        Decision = "Referred";
		
        message(exception,  exception, "Subordination of existing mortgage is not allowed when Other Financing is listed.");

    end
end	// rule G-CheckOtherFinancingRule3




alias(rule, G-ClosingCostReqdRule1, "G-Closing Cost Reqd Rule 1");

/* ==========================================================================
 * G-ClosingCostReqdRule1
 *
 *
 */
rule G-ClosingCostReqdRule1()
    if(
        (EstimatedCashtoBorrower < 0)
      )
    then
        ClosingCostReqd = -1 * EstimatedCashtoBorrower;
		

    else
        ClosingCostReqd = 0;
		

    end
end	// rule G-ClosingCostReqdRule1





/* ==========================================================================
 * G-CLTVNoDocExceptions
 *
 *
 */
rule G-CLTVNoDocExceptions()
    if(
        (CLTV > 80) &&
		((pOccupancy == "PrimaryResidence") ||
		(pOccupancy == "SecondaryResidence")) &&
		(pNumberOfUnits <= 2) &&
		((pDocumentType == "No Doc with Assets") ||
		(pDocumentType == "No Doc") ||
		(pDocumentType == "No Ratio")) &&
		(RetainResidence == "NO") &&
		(FTHB == "N") &&
		(fNonTraditionalTLReqd == "N") &&
		(MaxPaymentShock <= 1.5) &&
		((TDLN-Late30sx24 <= 0) &&
		(TDLN-Late60sx24 <= 0) &&
		(TDLN-Late90sx24 <= 0) &&
		(TDLN-Late120sx24 <= 0))
      )
    then
        
        condition(property, docs, "An acceptable Field Review (ordered by Lender) is required.");

    end
end	// rule G-CLTVNoDocExceptions





/* ==========================================================================
 * G-CLTVNoDocfNonTradTLReqd
 *
 *
 */
rule G-CLTVNoDocfNonTradTLReqd()
    if(
        (fNonTraditionalTLReqd == "Y") &&
		((pDocumentType == "No Doc") ||
		(pDocumentType == "No Doc with Assets") ||
		(pDocumentType == "No Ratio"))
      )
    then
        
        condition(credit, docs, "Non-traditional trade lines not allowed.");

    end
end	// rule G-CLTVNoDocfNonTradTLReqd





/* ==========================================================================
 * G-CLTVNoDocFTHBExceptions
 *
 *
 */
rule G-CLTVNoDocFTHBExceptions()
    if(
        ((pDocumentType == "No Doc") ||
		(pDocumentType == "No Doc with Assets") ||
		(pDocumentType == "No Ratio")) &&
		(FTHB == "Y") &&
		(CLTV > 80)
      )
    then
        Decision = "Referred";
		
        message(exception,  exception, "First Time Homebuyers are not permitted.");

    end
end	// rule G-CLTVNoDocFTHBExceptions





/* ==========================================================================
 * G-Cond-GdlExp-Corr
 *
 *
 */
rule G-Cond-GdlExp-Corr()
    if(
        (fEnablePeg == "TRUE") &&
		(pGuidelineExpireDate != "NULL") &&
		(pUserType == "Correspondent")
      )
    then
        GdlExpireDate = pGuidelineExpireDate;
		
        condition(asset, funding, "Loan must be delivered by <DPM>GdlExpireDate</DPM>.");

    end
end	// rule G-Cond-GdlExp-Corr





/* ==========================================================================
 * G-Cond-GdlExp-Whsl
 *
 *
 */
rule G-Cond-GdlExp-Whsl()
    if(
        (fEnablePeg == "TRUE") &&
		(pGuidelineExpireDate != "NULL") &&
		(pUserType != "Correspondent")
      )
    then
        GdlExpireDate = pGuidelineExpireDate;
		
        condition(asset, funding, "Loan must fund by <DPM>GdlExpireDate</DPM>.");

    end
end	// rule G-Cond-GdlExp-Whsl




alias(rule, G-Cond1YrFullDocSalary, "G-Cond 1YrFullDocSalary");

/* ==========================================================================
 * G-Cond1YrFullDocSalary
 *
 *
 */
rule G-Cond1YrFullDocSalary()
    if(
        (pDocumentType == "1Yr Full Doc") &&
		((pPrimaryApplicantsSelfEmployment == 0) ||
		(pSelfEmployInd-CoApp1 == "N") ||
		(pSelfEmployInd-CoApp2 == "N") ||
		(pSelfEmployInd-CoApp3 == "N") ||
		(pSelfEmployInd-CoApp4 == "N"))
      )
    then
        
        condition(income, docs, "Previous years W2 and most recent paystub to include all YTD information");
        condition(income, docs, "Written VOE (must cover 2 year history) completed by employer with all information, omitting income.");
        condition(income, docs, "Verbal VOE within 10 calendar days of closing (performed by Lender).");
        condition(income, funding, "Signed IRS Form 4506-T required at closing.");

    end
end	// rule G-Cond1YrFullDocSalary




alias(rule, G-Cond1YrFullDocSelfEmp, "G-Cond 1YrFullDocSelfEmp");

/* ==========================================================================
 * G-Cond1YrFullDocSelfEmp
 *
 *
 */
rule G-Cond1YrFullDocSelfEmp()
    if(
        (pDocumentType == "1Yr Full Doc") &&
		((pPrimaryApplicantsSelfEmployment > 0) ||
		(pSelfEmployInd-CoApp1 == "Y") ||
		(pSelfEmployInd-CoApp2 == "Y") ||
		(pSelfEmployInd-CoApp3 == "Y") ||
		(pSelfEmployInd-CoApp4 == "Y"))
      )
    then
        
        condition(income, docs, "Previous years tax returns with all applicable schedules and a year to date profit and loss statement");
        condition(income, docs, "CPA/Accountant Certification or copy of business license for proof two (2) years business for self - verification of current activity is required.");
        condition(income, funding, "Tax return with all schedules and profit and loss statements are required to be signed at closing.");
        condition(income, funding, "Signed IRS Form 4506-T required at closing.");
        condition(income, docs, "Verbal VOE within 10 calendar days of closing (performed by Lender).");

    end
end	// rule G-Cond1YrFullDocSelfEmp




alias(rule, G-Cond24MthBankStmtSalary, "G-Cond 24MthBankStmtSalary");

/* ==========================================================================
 * G-Cond24MthBankStmtSalary
 *
 *
 */
rule G-Cond24MthBankStmtSalary()
    if(
        (pDocumentType == "24 Mth Bank Stmt") &&
		((pPrimaryApplicantsSelfEmployment == 0) ||
		(pSelfEmployInd-CoApp1 == "N") ||
		(pSelfEmployInd-CoApp2 == "N") ||
		(pSelfEmployInd-CoApp3 == "N") ||
		(pSelfEmployInd-CoApp4 == "N"))
      )
    then
        
        condition(income, docs, "Twenty-Four (24) months consecutive personal bank statements - must include all pages.");
        condition(income, docs, "All individuals shown on the bank statement must be borrowers on the loan.");
        condition(asset, docs, "Overdraft fees and NSF charges will be viewed carefully, and additional documentation may be needed. Excessive fees and charges are not acceptable.");
        condition(asset, docs, "Deposits that are transfers from another account or line of credit must be excluded in qualifying.");
        condition(income, docs, "Written VOE (must cover 2 year history) completed by employer with all information, omitting income.");
        condition(income, docs, "Verbal VOE within 10 calendar days of closing (performed by Lender).");
        condition(credit, docs, "Income must be reasonable for employment.");
        condition(income, docs, "Completed, signed and dated final Fannie Mae 1003 Application covering a 2 year period with employment stated but no income stated is required.");

    end
end	// rule G-Cond24MthBankStmtSalary




alias(rule, G-Cond24MthBankStmtSelfEmp, "G-Cond 24MthBankStmtSelfEmp");

/* ==========================================================================
 * G-Cond24MthBankStmtSelfEmp
 *
 *
 */
rule G-Cond24MthBankStmtSelfEmp()
    if(
        (pDocumentType == "24 Mth Bank Stmt") &&
		((pPrimaryApplicantsSelfEmployment > 0) ||
		(pSelfEmployInd-CoApp1 == "Y") ||
		(pSelfEmployInd-CoApp2 == "Y") ||
		(pSelfEmployInd-CoApp3 == "Y") ||
		(pSelfEmployInd-CoApp4 == "Y"))
      )
    then
        
        condition(income, docs, "Twenty-Four (24) months consecutive personal bank statements - must include all pages.");
        condition(income, docs, "All individuals shown on the bank statement must be borrowers on the loan.");
        condition(asset, docs, "Overdraft fees and NSF charges will be viewed carefully, and additional documentation may be needed. Excessive fees and charges are not acceptable.");
        condition(asset, docs, "Deposits that are transfers from another account or line of credit must be excluded in qualifying.");
        condition(income, docs, "CPA/Accountant Certification or copy of business license for twenty-four (24) months with verification that the business is currently active or a letter from the borrower's attorney.");
        condition(income, docs, "Verbal VOE within 10 calendar days of closing (performed by Lender).");
        condition(credit, docs, "Income must be reasonable for employment.");

    end
end	// rule G-Cond24MthBankStmtSelfEmp





/* ==========================================================================
 * G-CondBaileeLetter
 *
 *
 */
rule G-CondBaileeLetter()
    if(
        (pUserType == "Correspondent")
      )
    then
        
        condition(title, funding, "Original Note and Addendums with Bailee Letter must be included in file prior to purchase.");

    end
end	// rule G-CondBaileeLetter




alias(rule, G-CondBrokerSubmissionForm, "G-Cond BrokerSubmissionForm");

/* ==========================================================================
 * G-CondBrokerSubmissionForm
 *
 *
 */
rule G-CondBrokerSubmissionForm()
    if(
        (pLoanAmount > 0)
      )
    then
        
        condition(asset, docs, "Broker must submit 'Broker Submission Form' with underwriting package.");

    end
end	// rule G-CondBrokerSubmissionForm




alias(rule, G-CondCAAppraisalReview-GT1500K, "G-Cond CAAppraisalReview-GT1500K");

/* ==========================================================================
 * G-CondCAAppraisalReview-GT1500K
 *
 *
 */
rule G-CondCAAppraisalReview-GT1500K()
    if(
        (combinedLoanAmount > 1500000) &&
		(pSubjectPropertyState == "CA")
      )
    then
        
        condition(property, docs, "Two (2) original appraisals; the second appraisal must be from a Lender nationally approved appraiser. The value used to determine the LTV/CLTV will be the lesser of the two values. Include License and E & O Insurance.");

    end
end	// rule G-CondCAAppraisalReview-GT1500K




alias(rule, G-CondCAAppraisalReview-GT650LTEQ1500K, "G-Cond CAAppraisalReview-GT650LTEQ1500K");

/* ==========================================================================
 * G-CondCAAppraisalReview-GT650LTEQ1500K
 *
 *
 */
rule G-CondCAAppraisalReview-GT650LTEQ1500K()
    if(
        ((combinedLoanAmount > 650000) &&
		(combinedLoanAmount <= 1500000)) &&
		(pSubjectPropertyState == "CA")
      )
    then
        
        condition(property, docs, "An enhanced desk review is required in addition to the original appraisal.");

    end
end	// rule G-CondCAAppraisalReview-GT650LTEQ1500K




alias(rule, G-CondColoradoDisclosureForm, "G-Cond ColoradoDisclosureForm");

/* ==========================================================================
 * G-CondColoradoDisclosureForm
 *
 *
 */
rule G-CondColoradoDisclosureForm()
    if(
        (pSubjectPropertyState == "CO")
      )
    then
        
        condition(asset, docs, "Executed copy of the Colorado Mortgage Broker Compensation Disclosure Form between Broker and Borrower(s).");
        condition(asset, funding, "Executed copy of Lock-in Disclosure Form between Broker and Borrower(s).");

    end
end	// rule G-CondColoradoDisclosureForm





/* ==========================================================================
 * G-CondCorrHUD
 *
 *
 */
rule G-CondCorrHUD()
    if(
        (pUserType == "Correspondent")
      )
    then
        
        condition(title, funding, "Certified copy of executed HUD Settlement Statement must be included in file prior to purchase.");

    end
end	// rule G-CondCorrHUD





/* ==========================================================================
 * G-CondCorrVOE
 *
 *
 */
rule G-CondCorrVOE()
    if(
        (pUserType == "Correspondent")
      )
    then
        
        condition(credit, funding, "Verbal VOE within 10 days of purchase to be completed by seller.");

    end
end	// rule G-CondCorrVOE





/* ==========================================================================
 * G-CondCPL
 *
 *
 */
rule G-CondCPL()
    if(
        (pLoanAmount == pLoanAmount)
      )
    then
        
        condition(title, docs, "CPL letter must reference transaction.");

    end
end	// rule G-CondCPL




alias(rule, G-CondFloodCert, "G-Cond Flood Cert");

/* ==========================================================================
 * G-CondFloodCert
 *
 *
 */
rule G-CondFloodCert()
    if(
        (pLoanAmount > 0) &&
		((pUserType == "Broker") ||
		(pUserType == "Retention"))
      )
    then
        
        condition(asset, docs, "Flood Cert Ordered by Lender");

    end
end	// rule G-CondFloodCert




alias(rule, G-CondInconsistantPPSD, "G-Cond InconsistantPPSD");

/* ==========================================================================
 * G-CondInconsistantPPSD
 *
 *
 */
rule G-CondInconsistantPPSD()
    if(
        (pPPSD-TodayDuration > 0)
      )
    then
        
        condition(asset, docs, "Provide proof of current mortgage payment paid as agreed");

    end
end	// rule G-CondInconsistantPPSD




alias(rule, G-CondInitial_1003, "G-Cond Initial_1003");

/* ==========================================================================
 * G-CondInitial_1003
 *
 *
 */
rule G-CondInitial_1003()
    if(
        (pLoanAmount > 0)
      )
    then
        
        condition(asset, docs, "Copy of 'Initial' 1003 completed as required by Doc Type and signed/dated by the Borrower and the Interviewer.");

    end
end	// rule G-CondInitial_1003





/* ==========================================================================
 * G-CondInsufficientDownPmt
 *
 *
 */
rule G-CondInsufficientDownPmt()
    if(
        (pDocumentType != "NINA") &&
		(pDocumentType != "No Doc") &&
		((Reserves < ClosingCostReqd) ||
		(Reserves < DownPymtReqdAmt) ||
		(Reserves < ReservesReqdAmt))
      )
    then
        
        condition(asset, docs, "Sufficient assets must be verified for the required reserves, down payment and/or closing costs.");

    end
end	// rule G-CondInsufficientDownPmt




alias(rule, G-ConditionsConditionset1Rule8, "G-Conditions Conditionset 1 Rule 8");

/* ==========================================================================
 * G-ConditionsConditionset1Rule8
 *
 *
 */
rule G-ConditionsConditionset1Rule8()
    if(
        (pPropertyType == "LowRiseCondo") ||
		(pPropertyType == "MidRiseCondo") ||
		(pPropertyType == "HighRiseCondo")
      )
    then
        
        condition(asset, docs, "HOA questionnaire from the association is required for review to meet Lenders guidelines. Subject to verification and underwriter review.");

    end
end	// rule G-ConditionsConditionset1Rule8




alias(rule, G-ConditionsGrossRentRule1, "G-Conditions Gross Rent Rule 1");

/* ==========================================================================
 * G-ConditionsGrossRentRule1
 *
 *
 */
rule G-ConditionsGrossRentRule1()
    if(
        (pTotalGrossRent > 0) &&
		((pDocumentType == "Full Doc") ||
		(fIsFullDoc == "TRUE"))
      )
    then
        
        condition(income, docs, "For properties owned less than 1 year, or where 6 or less properties are owned lease agreements will be accepted as proof of rental income. When more than 6 investment properties are present, 1040's complete with the Schedule E's are required. Refer to BSRM guidelines section 603.15 for specifics regarding rental income documentation requirements.");

    end
end	// rule G-ConditionsGrossRentRule1




alias(rule, G-ConditionsGrossRentRule2, "G-Conditions Gross Rent Rule 2");

/* ==========================================================================
 * G-ConditionsGrossRentRule2
 *
 *
 */
rule G-ConditionsGrossRentRule2()
    if(
        (pTotalGrossRent > 0) &&
		((pDocumentType == "Lite Doc") ||
		(pDocumentType == "Limited Doc"))
      )
    then
        
        condition(income, docs, "Copy of current signed Lease Agreements for all properties generating gross rental income.");

    end
end	// rule G-ConditionsGrossRentRule2




alias(rule, G-CondLiqofFunds, "G-Cond Liq of Funds");

/* ==========================================================================
 * G-CondLiqofFunds
 *
 *
 */
rule G-CondLiqofFunds()
    if(
        ((ClosingCostReqd > 0) &&
		(Reserves >= ClosingCostReqd) &&
		(LiquidReserves < ClosingCostReqd)) ||
		((DownPymtReqdAmt > 0) &&
		(Reserves >= DownPymtReqdAmt) &&
		(LiquidReserves < DownPymtReqdAmt))
      )
    then
        
        condition(asset, docs, "Proof of Liquidation of funds, for down payment and/or closing cost, with proof of no repayment or terms of repayment included.");

    end
end	// rule G-CondLiqofFunds




alias(rule, G-CondMARefi, "G-Cond MA Refi");

/* ==========================================================================
 * G-CondMARefi
 *
 *
 */
rule G-CondMARefi()
    if(
        (pSubjectPropertyState == "MA") &&
		((purposeAbbrev == "RT") ||
		(purposeAbbrev == "CO"))
      )
    then
        
        condition(property, docs, "This loan is subject to passing a 'Net Tangible Benefit Test'");

    end
end	// rule G-CondMARefi




alias(rule, G-CondMNRefi, "G-Cond MN Refi");

/* ==========================================================================
 * G-CondMNRefi
 *
 *
 */
rule G-CondMNRefi()
    if(
        (pSubjectPropertyState == "MN") &&
		(pOccupancy != "Investment") &&
		((purposeAbbrev == "RT") ||
		(purposeAbbrev == "CO"))
      )
    then
        
        condition(property, docs, "This loan is subject to passing a 'Net Tangible Benefit Test'");

    end
end	// rule G-CondMNRefi




alias(rule, G-CondMortLiabilitiesNoREOAssoc, "G-Cond Mort Liabilities No REO Assoc");

/* ==========================================================================
 * G-CondMortLiabilitiesNoREOAssoc
 *
 *
 */
rule G-CondMortLiabilitiesNoREOAssoc()
    if(
        (pMortActsNoREOAssoc > 0) &&
		(pDocumentType != "No Doc") &&
		(pDocumentType != "NINA")
      )
    then
        
        condition(credit, docs, "Provide status for mortgage liabilities not associated with a REO.");

    end
end	// rule G-CondMortLiabilitiesNoREOAssoc




alias(rule, G-CondMSMtgAgreemt, "G-Cond MS MtgAgreemt");

/* ==========================================================================
 * G-CondMSMtgAgreemt
 *
 *
 */
rule G-CondMSMtgAgreemt()
    if(
        (pSubjectPropertyState == "MS")
      )
    then
        
        condition(asset, docs, "Executed copy of Mortgage Origination Agreement between Broker and Borrower(s).");

    end
end	// rule G-CondMSMtgAgreemt




alias(rule, G-CondNoDataInMtgPaymentPattern, "G-Cond NoDataInMtgPaymentPattern");

/* ==========================================================================
 * G-CondNoDataInMtgPaymentPattern
 *
 *
 */
rule G-CondNoDataInMtgPaymentPattern()
    if(
        (pNoDataInMtgPaymentPattern > 0)
      )
    then
        
        condition(asset, docs, "Mortgage history provided by credit vendor has returned incomplete data, provide verification of mortgage to complete history.");

    end
end	// rule G-CondNoDataInMtgPaymentPattern




alias(rule, G-CondNonSelfEmp-NoRatio-CLTV, "G-Cond NonSelfEmp-NoRatio-CLTV");

/* ==========================================================================
 * G-CondNonSelfEmp-NoRatio-CLTV
 *
 *
 */
rule G-CondNonSelfEmp-NoRatio-CLTV()
    if(
        (fIsSelfEmployed != "TRUE") &&
		(pDocumentType == "No Ratio") &&
		(CLTV > 85)
      )
    then
        
        condition(property, docs, "24 months most recent mortgage history 0x30 is required.");

    end
end	// rule G-CondNonSelfEmp-NoRatio-CLTV




alias(rule, G-CondNonSelfEmp-SIVA-FTHB, "G-Cond NonSelfEmp-SIVA-FTHB");

/* ==========================================================================
 * G-CondNonSelfEmp-SIVA-FTHB
 *
 *
 */
rule G-CondNonSelfEmp-SIVA-FTHB()
    if(
        (fIsSelfEmployed != "TRUE") &&
		(pDocumentType == "SIVA") &&
		(CLTV > 85)
      )
    then
        
        condition(property, docs, "24 months 0x30 housing history via institutional VOM/VOR or cancelled checks. Private Party VOM/VOR not allowed.");

    end
end	// rule G-CondNonSelfEmp-SIVA-FTHB




alias(rule, G-CondNonTraditionalTDLNGT1Mil, "G-Cond NonTraditionalTDLN GT 1 Mil");

/* ==========================================================================
 * G-CondNonTraditionalTDLNGT1Mil
 *
 *
 */
rule G-CondNonTraditionalTDLNGT1Mil()
    if(
        (CLTV <= 70) &&
		((pLoanAmount > 1000000) ||
		(combinedLoanAmount > 1000000)) &&
		(((pCitizenshipBorr1 != "ForeignNational") &&
		(pValidTradtlTrades-24MoHistActive24MosBorr1 < 5)) ||
		((pBorr2ID > 0) &&
		(pCitizenshipBorr2 != "ForeignNational") &&
		(pValidTradtlTrades-24MoHistActive24MosBorr2 < 5)) ||
		((pBorr3ID > 0) &&
		(pCitizenshipBorr3 != "ForeignNational") &&
		(pValidTradtlTrades-24MoHistActive24MosBorr3 < 5)) ||
		((pBorr4ID > 0) &&
		(pCitizenshipBorr4 != "ForeignNational") &&
		(pValidTradtlTrades-24MoHistActive24MosBorr4 < 5)) ||
		((pBorr5ID > 0) &&
		(pCitizenshipBorr5 != "ForeignNational") &&
		(pValidTradtlTrades-24MoHistActive24MosBorr5 < 5)))
      )
    then
        
        condition(credit, docs, "A Maximum of three (3) Non-Traditional Tradelines 
   may be used to satisfy the required tradelines of five (5). Non-Traditional 
   Tradelines must be open accounts that can provide a 24 month recent history, 
   showing paid as agreed. Non-Traditional Tradelines may not be used to offset 
   derogatory credit");

    end
end	// rule G-CondNonTraditionalTDLNGT1Mil




alias(rule, G-CondNonTradTLNLT1Mil, "G-Cond NonTradTLN LT 1Mil");

/* ==========================================================================
 * G-CondNonTradTLNLT1Mil
 *
 *
 */
rule G-CondNonTradTLNLT1Mil()
    if(
        (CLTV <= 70) &&
		(pLoanAmount <= 1000000) &&
		(((pCitizenshipBorr1 != "ForeignNational") &&
		(pValidTradtlTrades-24MoHistActive24MosBorr1 < 3)) ||
		((pBorr2ID > 0) &&
		(pCitizenshipBorr2 != "ForeignNational") &&
		(pValidTradtlTrades-24MoHistActive24MosBorr2 < 3)) ||
		((pBorr3ID > 0) &&
		(pCitizenshipBorr3 != "ForeignNational") &&
		(pValidTradtlTrades-24MoHistActive24MosBorr3 < 3)) ||
		((pBorr4ID > 0) &&
		(pCitizenshipBorr4 != "ForeignNational") &&
		(pValidTradtlTrades-24MoHistActive24MosBorr4 < 3)) ||
		((pBorr5ID > 0) &&
		(pCitizenshipBorr5 != "ForeignNational") &&
		(pValidTradtlTrades-24MoHistActive24MosBorr5 < 3)))
      )
    then
        
        condition(credit, docs, "Non-Traditional Tradelines may be used to satisfy the required tradelines of three (3). Non-Traditional Tradelines must be open accounts that can provide a 24 month recent history, showing paid as agreed. Non-Traditional Tradelines may not be used to offset derogatory credit.");

    end
end	// rule G-CondNonTradTLNLT1Mil




alias(rule, G-CondNYCity, "G-Cond NY City");

/* ==========================================================================
 * G-CondNYCity
 *
 *
 */
rule G-CondNYCity()
    if(
        (pSubjectPropertyCity == "New York") ||
		(pSubjectPropertyCity == "New York City") ||
		(pSubjectPropertyCity == "new york") ||
		(pSubjectPropertyCity == "new york city") ||
		(pSubjectPropertyCity == "NEW YORK") ||
		(pSubjectPropertyCity == "NEW YORK CITY") ||
		(pSubjectPropertyCity == "NY") ||
		(pSubjectPropertyCity == "NYC") ||
		(pSubjectPropertyCity == "ny") ||
		(pSubjectPropertyCity == "nyc")
      )
    then
        
        condition(property, docs, "Properties located in the five boroughs of New York (Bronx, Staten Island, Brooklyn, Manhattan, and Queens) will require an enhanced desk review from Alacrity Appraisal Associates, Inc. for all single family residences.");
        condition(property, docs, "All other property types will require a field review including both an interior and exterior inspection, also performed by Alacrity Appraisal Associates, Inc., both appraisal requirements are in addition to the full appraisal.");

    end
end	// rule G-CondNYCity




alias(rule, G-CondoAttPudApprslReview, "G-CondoAttPud ApprslReview");

/* ==========================================================================
 * G-CondoAttPudApprslReview
 *
 *
 */
rule G-CondoAttPudApprslReview()
    if(
        ((pPropertyType == "LowRiseCondo") ||
		(pPropertyType == "MidRiseCondo") ||
		(pPropertyType == "HighRiseCondo") ||
		(pPropertyType == "Townhouse") ||
		(pPropertyType == "RowHome")) &&
		(pHudRepo == "N")
      )
    then
        
        condition(property, docs, "Condos and Attached Puds require an Enhanced Desk Review.This is in addition to the original appraisal.");

    end
end	// rule G-CondoAttPudApprslReview




alias(rule, G-CondOccRule1, "G-Cond Occ Rule 1");

/* ==========================================================================
 * G-CondOccRule1
 *
 *
 */
rule G-CondOccRule1()
    if(
        (pOccupancy == "PrimaryResidence") &&
		(purposeAbbrev == "P") &&
		(pDocumentType != "No Doc") &&
		(pDocumentType != "No Doc with Assets") &&
		(((pPrimaryEmplState-Borr1 != "NULL") &&
		(pSubjectPropertyState != pPrimaryEmplState-Borr1)) ||
		((pBorr2ID > 0) &&
		(pPrimaryEmplState-Borr2 != "NULL") &&
		(pSubjectPropertyState != pPrimaryEmplState-Borr2)) ||
		((pBorr3ID > 0) &&
		(pPrimaryEmplState-Borr3 != "NULL") &&
		(pSubjectPropertyState != pPrimaryEmplState-Borr3)) ||
		((pBorr4ID > 0) &&
		(pPrimaryEmplState-Borr4 != "NULL") &&
		(pSubjectPropertyState != pPrimaryEmplState-Borr4)) ||
		((pBorr5ID > 0) &&
		(pPrimaryEmplState-Borr5 != "NULL") &&
		(pSubjectPropertyState != pPrimaryEmplState-Borr5)))
      )
    then
        
        condition(property, docs, "Written VOE (for all borrower(s) to explain the distance of employment from subject property and/or relocation if applicable. Subject to verification and underwriter review.");

    end
end	// rule G-CondOccRule1




alias(rule, G-CondOccRule2, "G-Cond Occ Rule 2");

/* ==========================================================================
 * G-CondOccRule2
 *
 *
 */
rule G-CondOccRule2()
    if(
        (pOccupancy == "PrimaryResidence") &&
		((purposeAbbrev == "RT") ||
		(purposeAbbrev == "CO")) &&
		(pDocumentType != "No Doc") &&
		(pDocumentType != "No Doc with Assets") &&
		(((pPrimaryEmplState-Borr1 != "NULL") &&
		(pCurrAddressState-Borr1 != pPrimaryEmplState-Borr1)) ||
		((pBorr2ID > 0) &&
		(pPrimaryEmplState-Borr2 != "NULL") &&
		(pCurrAddressState-Borr2 != pPrimaryEmplState-Borr2)) ||
		((pBorr3ID > 0) &&
		(pPrimaryEmplState-Borr3 != "NULL") &&
		(pCurrAddressState-Borr3 != pPrimaryEmplState-Borr3)) ||
		((pBorr4ID > 0) &&
		(pPrimaryEmplState-Borr4 != "NULL") &&
		(pCurrAddressState-Borr4 != pPrimaryEmplState-Borr4)) ||
		((pBorr5ID > 0) &&
		(pPrimaryEmplState-Borr5 != "NULL") &&
		(pCurrAddressState-Borr5 != pPrimaryEmplState-Borr5)))
      )
    then
        
        condition(property, docs, "Written VOE (for all borrower(s) to explain the distance of employment from current residence. Subject to verification and under writer review.");

    end
end	// rule G-CondOccRule2





/* ==========================================================================
 * G-CondPaymentShock80SIVA
 *
 *
 */
rule G-CondPaymentShock80SIVA()
    if(
        (CLTV >= 80) &&
		(pDocumentType == "SIVA")
      )
    then
        
        condition(property, docs, "Payment shock greater than 2X the current total housing payment is considered excessive and requires additional compensating factors to be present in the loan and evaluated by a BSRM underwriter.");

    end
end	// rule G-CondPaymentShock80SIVA





/* ==========================================================================
 * G-CondPaymentShockExceededNoDoc
 *
 *
 */
rule G-CondPaymentShockExceededNoDoc()
    if(
        (pOccupancy == "PrimaryResidence") &&
		(PaymentShock > 1.5) &&
		((pDocumentType == "No Doc") ||
		(pDocumentType == "No Doc with Assets")) &&
		(CLTV > 80)
      )
    then
        MaxPaymentShock = -1;
		
        condition(asset, docs, "Borrowers have exceeded the maximum allowed payment shock. 
    The max payment shock may be overcome when two times the required reserves can be verified.");

    end
end	// rule G-CondPaymentShockExceededNoDoc





/* ==========================================================================
 * G-CondPaymentShockExceededNoRatio
 *
 *
 */
rule G-CondPaymentShockExceededNoRatio()
    if(
        (pOccupancy == "PrimaryResidence") &&
		(PaymentShock > 1.5) &&
		(pDocumentType == "No Ratio") &&
		((pPrimaryApplicantsSelfEmployment == 0) ||
		(pSelfEmployInd-CoApp1 == "N") ||
		(pSelfEmployInd-CoApp2 == "N") ||
		(pSelfEmployInd-CoApp3 == "N") ||
		(pSelfEmployInd-CoApp4 == "N"))
      )
    then
        MaxPaymentShock = -1;
		
        condition(asset, docs, "Borrowers have exceeded the maximum allowed payment shock. 
   The max payment shock may be overcome when two times the required reserves can be verified.");

    end
end	// rule G-CondPaymentShockExceededNoRatio





/* ==========================================================================
 * G-CondPaymentShockExceededSIVA
 *
 *
 */
rule G-CondPaymentShockExceededSIVA()
    if(
        (pOccupancy == "PrimaryResidence") &&
		(PaymentShock > 2) &&
		(pDocumentType == "SIVA") &&
		((pPrimaryApplicantsSelfEmployment == 0) ||
		(pSelfEmployInd-CoApp1 == "N") ||
		(pSelfEmployInd-CoApp2 == "N") ||
		(pSelfEmployInd-CoApp3 == "N") ||
		(pSelfEmployInd-CoApp4 == "N"))
      )
    then
        MaxPaymentShock = -1;
		
        condition(asset, docs, "Borrowers have exceeded the maximum allowed payment shock. 
   The max payment shock may be overcome when two times the required reserves can be verified.");

    end
end	// rule G-CondPaymentShockExceededSIVA





/* ==========================================================================
 * G-CondPaymentShockMaxLT4X
 *
 *
 */
rule G-CondPaymentShockMaxLT4X()
    if(
        (pOccupancy == "PrimaryResidence") &&
		((PaymentShock > 2) &&
		(PaymentShock < 4)) &&
		(combinedLoanAmount < 1000000) &&
		(CLTV > 80)
      )
    then
        MaxPaymentShock = -1;
		
        condition(property, docs, "Payment Shock exceeds guideline maximum, mitigating factors must be present.");

    end
end	// rule G-CondPaymentShockMaxLT4X




alias(rule, G-CondPropertySurvey, "G-Cond Property Survey");

/* ==========================================================================
 * G-CondPropertySurvey
 *
 *
 */
rule G-CondPropertySurvey()
    if(
        (pLoanAmount > 0) &&
		(pSubjectPropertyState == "TX") ||
		(pSubjectPropertyState == "FL")
      )
    then
        
        condition(property, docs, "Subject Property Survey may be required");

    end
end	// rule G-CondPropertySurvey




alias(rule, G-CondRateTermTexas, "G-Cond RateTermTexas");

/* ==========================================================================
 * G-CondRateTermTexas
 *
 *
 */
rule G-CondRateTermTexas()
    if(
        (pSubjectPropertyState == "TX") &&
		(pPurposeOfLoan == "Refinance") &&
		(pTypeofRefinance == "NoCashOutRateORTerm100DollarMax")
      )
    then
        
        condition(asset, funding, "Cash in hand to the borrower is not allowed.");

    end
end	// rule G-CondRateTermTexas




alias(rule, G-CondREOsGrossRent1, "G-Cond REOs Gross Rent 1");

/* ==========================================================================
 * G-CondREOsGrossRent1
 *
 *
 */
rule G-CondREOsGrossRent1()
    if(
        (pREOswGrossRent > 1) &&
		(pREOswGrossRent <= 6) &&
		((pDocumentType == "Full Doc") ||
		(fIsFullDoc == "TRUE"))
      )
    then
        
        condition(income, docs, "Copy of signed Lease Agreements or 1040s tax returns (Schedule E) are required to establish rents.");

    end
end	// rule G-CondREOsGrossRent1




alias(rule, G-CondREOsGrossRent1a, "G-Cond REOs Gross Rent 1a");

/* ==========================================================================
 * G-CondREOsGrossRent1a
 *
 *
 */
rule G-CondREOsGrossRent1a()
    if(
        (pREOswGrossRent > 1) &&
		(pREOswGrossRent <= 6) &&
		((pDocumentType == "Lite Doc") ||
		(pDocumentType == "Limited Doc"))
      )
    then
        
        condition(income, docs, "Copy of current signed Lease Agreements for all properties generating gross rental income.");

    end
end	// rule G-CondREOsGrossRent1a




alias(rule, G-CondREOsGrossRent2, "G-Cond REOs Gross Rent 2");

/* ==========================================================================
 * G-CondREOsGrossRent2
 *
 *
 */
rule G-CondREOsGrossRent2()
    if(
        (pREOswGrossRent > 6) &&
		((pDocumentType == "Full Doc") ||
		(fIsFullDoc == "TRUE"))
      )
    then
        
        condition(income, docs, "1040s Tax Returns (Schedule E) are required to establish rents.");

    end
end	// rule G-CondREOsGrossRent2




alias(rule, G-CondReservesNetOfProceeds, "G-Cond ReservesNetOfProceeds");

/* ==========================================================================
 * G-CondReservesNetOfProceeds
 *
 *
 */
rule G-CondReservesNetOfProceeds()
    if(
        (pOccupancy == "Investment") &&
		(purposeAbbrev == "CO") ||
		((pOccupancy == "PrimaryResidence") ||
		(pOccupancy == "SecondaryResidence") &&
		(purposeAbbrev == "CO") &&
		(CLTV > 80)) ||
		((purposeAbbrev == "CO") &&
		(pDocumentType == "No Doc with Assets"))
      )
    then
        
        condition(asset, docs, "Reserves must be net of loan proceeds.");

    end
end	// rule G-CondReservesNetOfProceeds




alias(rule, G-CondSivaDocRequiredAssetsGT1Mil, "G-Cond SivaDocRequiredAssetsGT1Mil");

/* ==========================================================================
 * G-CondSivaDocRequiredAssetsGT1Mil
 *
 *
 */
rule G-CondSivaDocRequiredAssetsGT1Mil()
    if(
        (pDocumentType == "SIVA") &&
		((pLoanAmount > 1000000) ||
		(combinedLoanAmount > 1000000))
      )
    then
        
        condition(asset, docs, "Assets equal to four months stated income should be provided supporting the borrowers stated monthly income");

    end
end	// rule G-CondSivaDocRequiredAssetsGT1Mil




alias(rule, G-CondSivaDocRequiredAssetsLTE1Mil, "G-Cond SivaDocRequiredAssetsLTE1Mil");

/* ==========================================================================
 * G-CondSivaDocRequiredAssetsLTE1Mil
 *
 *
 */
rule G-CondSivaDocRequiredAssetsLTE1Mil()
    if(
        (pDocumentType == "SIVA") &&
		((pLoanAmount <= 1000000) ||
		(combinedLoanAmount <= 1000000))
      )
    then
        
        condition(asset, docs, "Assets equal to two months stated income should be provided supporting the borrowers stated monthly income");

    end
end	// rule G-CondSivaDocRequiredAssetsLTE1Mil




alias(rule, G-CondStandardFinalDocumentReview, "G-Cond Standard Final Document Review");

/* ==========================================================================
 * G-CondStandardFinalDocumentReview
 *
 *
 */
rule G-CondStandardFinalDocumentReview()
    if(
        (pLoanAmount > 0)
      )
    then
        
        condition(asset, docs, "Standard Final Document Review - Additional Conditions May Apply");

    end
end	// rule G-CondStandardFinalDocumentReview




alias(rule, G-CondThresholdIllinois, "G-Cond ThresholdIllinois");

/* ==========================================================================
 * G-CondThresholdIllinois
 *
 *
 */
rule G-CondThresholdIllinois()
    if(
        (pSubjectPropertyState == "IL")
      )
    then
        
        condition(asset, docs, "Subject to Max APR Threshold.");

    end
end	// rule G-CondThresholdIllinois





/* ==========================================================================
 * G-CorrMiActivationCond
 *
 *
 */
rule G-CorrMiActivationCond()
    if(
        (pUserType == "Correspondent") &&
		(pProgramName != "NoMI First Lien") &&
		(LTV > 80)
      )
    then
        
        condition(property, docs, "Loan is subject to receipt of MI Cert.");

    end
end	// rule G-CorrMiActivationCond




alias(rule, G-DeclarationaRule, "G-Declaration a Rule");

/* ==========================================================================
 * G-DeclarationaRule
 *
 *
 */
rule G-DeclarationaRule()
    if(
        (pDeclJudgment >= 1)
      )
    then
        
        condition(credit, docs, "Provide documentation for outstanding judgments as provided in the borrowers declaration for review.");

    end
end	// rule G-DeclarationaRule




alias(rule, G-DeclarationbRule, "G-Declaration b Rule");

/* ==========================================================================
 * G-DeclarationbRule
 *
 *
 */
rule G-DeclarationbRule()
    if(
        (pDeclBankruptcy >= 1)
      )
    then
        
        condition(credit, docs, "Provide documentation as to the status of Bankruptcy IF not indicated in the borrowers credit report.");

    end
end	// rule G-DeclarationbRule




alias(rule, G-DeclarationcRule, "G-Declaration c Rule");

/* ==========================================================================
 * G-DeclarationcRule
 *
 *
 */
rule G-DeclarationcRule()
    if(
        (pDeclForeclosureDeedInLieu >= 1)
      )
    then
        
        condition(credit, docs, "Provide documentation as to the status of Foreclosure not provided in the borrowers credit report.");

    end
end	// rule G-DeclarationcRule




alias(rule, G-DeclarationdRule, "G-Declaration d Rule");

/* ==========================================================================
 * G-DeclarationdRule
 *
 *
 */
rule G-DeclarationdRule()
    if(
        (pDeclLawSuit >= 1)
      )
    then
        
        condition(credit, docs, "Provide documentation as to the status of borrowers lawsuit provided in the borrowers declaration for review.");

    end
end	// rule G-DeclarationdRule




alias(rule, G-DeclarationeRule, "G-Declaration e Rule");

/* ==========================================================================
 * G-DeclarationeRule
 *
 *
 */
rule G-DeclarationeRule()
    if(
        (pDeclObligatedLoanForeclosed >= 1)
      )
    then
        
        condition(credit, docs, "Provide documentation as to the status of any loan borrower is directly or indirectly obligated which resulted in foreclosure as described in the borrowers declaration.");

    end
end	// rule G-DeclarationeRule




alias(rule, G-DeclarationfRule, "G-Declaration f Rule");

/* ==========================================================================
 * G-DeclarationfRule
 *
 *
 */
rule G-DeclarationfRule()
    if(
        (pDeclDelinquency >= 1)
      )
    then
        
        condition(credit, docs, "Provide documentation as to the status of delinquency or default of any Federal debt or other financial obligation as described in the borrowers declaration.");

    end
end	// rule G-DeclarationfRule




alias(rule, G-DeclarationgRule, "G-Declaration g Rule");

/* ==========================================================================
 * G-DeclarationgRule
 *
 *
 */
rule G-DeclarationgRule()
    if(
        (pDeclAlimony >= 1)
      )
    then
        
        condition(credit, docs, "Provide Divorce Decree with Alimony/Child Support Order, if applicable.");

    end
end	// rule G-DeclarationgRule




alias(rule, G-DeclarationhRule, "G-Declaration h Rule");

/* ==========================================================================
 * G-DeclarationhRule
 *
 *
 */
rule G-DeclarationhRule()
    if(
        (pDeclBorrowedDownPmt >= 1)
      )
    then
        
        condition(purchase, docs, "Borrower to provide Note to show all terms and conditions for borrowed down payment.");

    end
end	// rule G-DeclarationhRule




alias(rule, G-DeclarationiRule, "G-Declaration i Rule");

/* ==========================================================================
 * G-DeclarationiRule
 *
 *
 */
rule G-DeclarationiRule()
    if(
        (pDeclComaker >= 1)
      )
    then
        
        condition(credit, docs, "Borrower to provide loan terms for  co-signed or endorsed loan  as described on borrowers declaration for review.");

    end
end	// rule G-DeclarationiRule





/* ==========================================================================
 * G-DefaultReferralMsg
 *
 *
 */
rule G-DefaultReferralMsg()
    if(
        (pCombo > 0) &&
		(pLienNumber == 1) &&
		(Decision == "Approved")
      )
    then
        
        message(exception,  exception, "Please see 2nd lien messages for further details.");

    end
end	// rule G-DefaultReferralMsg




alias(rule, G-DeprecatedDPMs-1, "G-DeprecatedDPMs.1");

/* ==========================================================================
 * G-DeprecatedDPMs-1
 *
 *
 */
rule G-DeprecatedDPMs-1()
    if(
        (pLoanAmount > 0)
      )
    then
        Bankruptcy13 = 0;
		Bankruptcy7 = 0;
		BasePrice1st = 0;
		BKCh13 = 0;
		CA2ndIndex = 0;
		CA2ndIndexAdj = 0;
		CA2ndMaxRate = 0;
		Chapter13FileDate = 0;
		Chapter7FileDate = 0;
		DateOfForeclosure = 0;
		Dbg120DayLate2 = 0;
		Dbg30DayLate2 = 0;
		Dbg60DayLate2 = 0;
		Dbg90DayLate2 = 0;
		DbgRolling30s2 = 0;
		IndexType = 0;
		LockPeriod1st = 0;
		LockPeriod2nd = 0;
		LMCBD_31 = 0;
		LMCBD_359 = 0;
		MarginAdj1st-NoMIARMFICO620-659 = 0;
		MarginAdj-NoMIARMFICO620-659 = 0;
		MarginAdj-NoMIARMFICOGtEq660 = 0;
		MarginAdj-NoMI-CashOut = 0;
		MarginAdj-NoMI-NumberofUnits = 0;
		MarginAdj-NoMI-Occupancy = 0;
		MaxBaseRate = 0;
		MinDownPayment = 0;
		Nbr120Days = 0;
		Nbr30Days = 0;
		Nbr60Days = 0;
		Nbr90Days = 0;
		PrepaymentIndicator = 0;
		PriceAdj1st-Total = 0;
		PriceAdj-1stExtension = 0;
		PriceAdj-2ndExtension = 0;
		PriceCalcForMaxRate = 0;
		RateAdj1st-NoMI-ARM = 0;
		RateAdj1st-NoMI-CashOut = 0;
		RateAdj1st-NoMI-Fixed = 0;
		RateAdj1st-NoMI-NumberofUnits = 0;
		RateAdj1st-NoMI-Occupancy = 0;
		RateAdj1st-NoMIARMFICO620-659 = 0;
		RateAdj1st-NoMIARMFICOGtEq660 = 0;
		RateAdj1st-NoMIFixedFICO620-659 = 0;
		RateAdj1st-NoMIFixedFICOGtEq660 = 0;
		RateAdjTest = 0;
		RateAdj-BKlt24Months = 0;
		RateAdj-BKlt24Months1st = 0;
		RateAdj-LTV1st = 0;
		RateAdj-NoMIARMFICO620-659 = 0;
		RateAdj-NoMIARMFICOGtEq660 = 0;
		RateAdj-NoMIFixedFICO620-659 = 0;
		RateAdj-NoMIFixedFICOGtEq660 = 0;
		RateAdj-NoMI-ARM = 0;
		RateAdj-NoMI-CashOut = 0;
		RateAdj-NoMI-Fixed = 0;
		RateAdj-NoMI-NumberofUnits = 0;
		RateAdj-NoMI-Occupancy = 0;
		RateAdj-Program2nd = 0;
		RateAdj-TotalNonPrice = 0;
		RateAdj-TotalNonPrice1st = 0;
		RateAdj-TotalNonPrice2nd = 0;
		RateDisp = 0;
		tmp3 = 0;
		tmpMA-NoMIARMFICO620-659 = 0;
		tmpMA-NoMIARMFICOGtEq660 = 0;
		tmpMA-NoMI-ARM = 0;
		tmpMA-NoMI-CashOut = 0;
		tmpMA-NoMI-NumberofUnits = 0;
		tmpMA-NoMI-Occupancy = 0;
		tmpPA-1stExtension = 0;
		tmpPA-2ndExtension = 0;
		tmpRA-NoMI-ARM = 0;
		tmpRA-NoMI-CashOut = 0;
		tmpRA-NoMI-Fixed = 0;
		tmpRA-NoMI-NumberofUnits = 0;
		tmpRA-NoMI-Occupancy = 0;
		TotalBKCCCSLast6Yr = 0;
		TotalReserves = 0;
		

    end
end	// rule G-DeprecatedDPMs-1




alias(rule, G-EscrowHoldbackConditionRule, "G-Escrow Holdback Condition Rule");

/* ==========================================================================
 * G-EscrowHoldbackConditionRule
 *
 *
 */
rule G-EscrowHoldbackConditionRule()
    if(
        (pEscrowHoldback == "Y")
      )
    then
        
        condition(property, docs, "An Escrow Holdback agreement must be signed by all parties at close.");
        condition(property, docs, "Refer to Lender Guidelines for restrictions and requirements.");

    end
end	// rule G-EscrowHoldbackConditionRule





/* ==========================================================================
 * G-ExitIfCreditScoreSet
 *
 *
 */
rule G-ExitIfCreditScoreSet()
    if(
        (creditScore != "NULL") &&
		(creditScore > 0)
      )
    then
        

    end
end	// rule G-ExitIfCreditScoreSet




alias(rule, G-ForeignNational, "G-Foreign National");

/* ==========================================================================
 * G-ForeignNational
 *
 *
 */
rule G-ForeignNational()
    if(
        (pCitizenshipOfPrimaryApplicant == "ForeignNational") ||
		(pCitizenshipCoBorr1 == "ForeignNational") ||
		(pCitizenshipCoBorr2 == "ForeignNational") ||
		(pCitizenshipCoBorr3 == "ForeignNational") ||
		(pCitizenshipCoBorr4 == "ForeignNational")
      )
    then
        ForeignNationalIndicator = "Y";
		

    end
end	// rule G-ForeignNational





/* ==========================================================================
 * G-ForeignNationalNoFICOBorr1
 *
 *
 */
rule G-ForeignNationalNoFICOBorr1()
    if(
        (pCitizenshipOfPrimaryApplicant == "ForeignNational") &&
		((pRepScore(wSingle)Borr1 == 0) ||
		(pRepScore(wSingle)Borr1 == "NULL"))
      )
    then
        ForNatNoFICOBorr1 = "Y";
		

    else
        ForNatNoFICOBorr1 = "N";
		

    end
end	// rule G-ForeignNationalNoFICOBorr1





/* ==========================================================================
 * G-ForeignNationalNoFICOBorr2
 *
 *
 */
rule G-ForeignNationalNoFICOBorr2()
    if(
        (pCitizenshipCoBorr1 == "ForeignNational") &&
		((pRepScore(wSingle)Borr2 == 0) ||
		(pRepScore(wSingle)Borr2 == "NULL"))
      )
    then
        ForNatNoFICOBorr2 = "Y";
		

    else
        ForNatNoFICOBorr2 = "N";
		

    end
end	// rule G-ForeignNationalNoFICOBorr2





/* ==========================================================================
 * G-ForeignNationalNoFICOBorr3
 *
 *
 */
rule G-ForeignNationalNoFICOBorr3()
    if(
        (pCitizenshipCoBorr2 == "ForeignNational") &&
		((pRepScore(wSingle)Borr3 == 0) ||
		(pRepScore(wSingle)Borr3 == "NULL"))
      )
    then
        ForNatNoFICOBorr3 = "Y";
		

    else
        ForNatNoFICOBorr3 = "N";
		

    end
end	// rule G-ForeignNationalNoFICOBorr3





/* ==========================================================================
 * G-ForeignNationalNoFICOBorr4
 *
 *
 */
rule G-ForeignNationalNoFICOBorr4()
    if(
        (pCitizenshipCoBorr3 == "ForeignNational") &&
		((pRepScore(wSingle)Borr4 == 0) ||
		(pRepScore(wSingle)Borr4 == "NULL"))
      )
    then
        ForNatNoFICOBorr4 = "Y";
		

    else
        ForNatNoFICOBorr4 = "N";
		

    end
end	// rule G-ForeignNationalNoFICOBorr4





/* ==========================================================================
 * G-ForeignNationalNoFICOBorr5
 *
 *
 */
rule G-ForeignNationalNoFICOBorr5()
    if(
        (pCitizenshipCoBorr4 == "ForeignNational") &&
		((pRepScore(wSingle)Borr5 == 0) ||
		(pRepScore(wSingle)Borr5 == "NULL"))
      )
    then
        ForNatNoFICOBorr5 = "Y";
		

    else
        ForNatNoFICOBorr5 = "N";
		

    end
end	// rule G-ForeignNationalNoFICOBorr5





/* ==========================================================================
 * G-ForeignNatl0
 *
 *
 */
rule G-ForeignNatl0()
    if(
        (tmpFNScoreUsed == "Y")
      )
    then
        creditScore = 0;
		

    end
end	// rule G-ForeignNatl0





/* ==========================================================================
 * G-ForeignNatl660
 *
 *
 */
rule G-ForeignNatl660()
    if(
        (ForeignNationalIndicator == "Y") &&
		(tmpFNScoreUsed == "Y")
      )
    then
        creditScore = 660;
		

    end
end	// rule G-ForeignNatl660





/* ==========================================================================
 * G-ForeignNatl720
 *
 *
 */
rule G-ForeignNatl720()
    if(
        (ForeignNationalIndicator == "Y") &&
		(tmpFNScoreUsed == "Y")
      )
    then
        creditScore = 720;
		

    end
end	// rule G-ForeignNatl720




alias(rule, G-ForeignNatlFICO, "G-Foreign Natl FICO");

/* ==========================================================================
 * G-ForeignNatlFICO
 *
 *
 */
rule G-ForeignNatlFICO()
    if(
        (ForeignNationalIndicator == "Y") &&
		(((creditScore == "NULL") ||
		(creditScore == 0)) ||
		(pManualCredit != "N"))
      )
    then
        creditScore = 720;
		tmpFNScoreUsed = "Y";
		

    else
        tmpFNScoreUsed = "N";
		

    end
end	// rule G-ForeignNatlFICO




alias(rule, G-FTHBRule2, "G-FTHB Rule 2");

/* ==========================================================================
 * G-FTHBRule2
 *
 *
 */
rule G-FTHBRule2()
    if(
        (pFTHB >= 1)
      )
    then
        FTHB = "Y";
		

    end
end	// rule G-FTHBRule2





/* ==========================================================================
 * G-FullDocWaiveTradelines
 *
 *
 */
rule G-FullDocWaiveTradelines()
    if(
        (pLoanAmount <= 1000000) &&
		(FTHB == "N") &&
		(fIsFullDoc == "TRUE") &&
		(CLTV <= 75) &&
		(fBkTdlCk == 0) &&
		(pValidMtgTrades-12MoHistPdCurrentBorr1 >= 1) &&
		(((purposeAbbrev == "P") ||
		(purposeAbbrev == "RT")) &&
		((TDLN-Late30s <= 0) ||
		(TDLN-Late60s <= 0) ||
		(TDLN-Late90s <= 0) ||
		(TDLN-Late120s <= 0))) ||
		(pLoanAmount <= 1000000) &&
		(FTHB == "N") &&
		(fIsFullDoc == "TRUE") &&
		(CLTV <= 80) &&
		(fBkTdlCk == 0) &&
		(pValidMtgTrades-24MoHistPdCurrentBorr1 >= 1) &&
		(((purposeAbbrev == "P") ||
		(purposeAbbrev == "RT")) &&
		((TDLN-Late30sx24 <= 0) ||
		(TDLN-Late60sx24 <= 0) ||
		(TDLN-Late90sx24 <= 0) ||
		(TDLN-Late120sx24 <= 0)))
      )
    then
        
        message(observation, "Tradeline Requirements Waived.");

    end
end	// rule G-FullDocWaiveTradelines




alias(rule, G-GeneralCalculations, "G-General Calculations");

/* ==========================================================================
 * G-GeneralCalculations
 *
 *
 */
rule G-GeneralCalculations()
    if(
        (pLoanAmount > 0)
      )
    then
        Reserves = pAssetCashDeposits + pAssetStocksBondsMfundsAmt + pAssetBankAcctsAmt + pAssetGiftNotDepositedAmt + pAssetTrustFundsAmt + pAssetNetEquityAmt + pAssetOtherLiquidAmt + pAssetOtherNonLiquid + pAssetRetirementFundsAmt;
		TotalPayoffs = pMortgagePayoffs + pConsumerPayoffs;
		LiquidReserves = (pAssetCashDeposits + pAssetBankAcctsAmt + pAssetGiftNotDepositedAmt + pAssetNetEquityAmt + pAssetOtherLiquidAmt) - pAssetCD;
		

    end
end	// rule G-GeneralCalculations





/* ==========================================================================
 * G-GetThresholdAdj
 *
 *
 */
rule G-GetThresholdAdj()
    if(
        (ThresholdGenericState == 1)
      )
    then
        YieldAdj1st = lookup("G-ThresholdGeneric1st LK", globalParam, globalParam);
		YieldAdj2nd = lookup("G-ThresholdGeneric2nd LK", globalParam, globalParam);
		

    else
        YieldAdj1st = lookup("G-ThresholdSpecificState1st LK", pSubjectPropertyState, globalParam);
		YieldAdj2nd = lookup("G-ThresholdSpecificState2nd LK", pSubjectPropertyState, globalParam);
		

    end
end	// rule G-GetThresholdAdj





/* ==========================================================================
 * G-GetThresholdArkansas2nd
 *
 *
 */
rule G-GetThresholdArkansas2nd()
    if(
        (pCombo > 0) &&
		(pSubjectPropertyState == "AR") &&
		(pLienNumber == 2)
      )
    then
        ThresholdNotRequired2nd = 0;
		YieldAdj2nd = lookup("G-ThresholdArkansas2nd LK", globalParam, globalParam);
		

    end
end	// rule G-GetThresholdArkansas2nd





/* ==========================================================================
 * G-GetThresholdIllinoisChicago
 *
 *
 */
rule G-GetThresholdIllinoisChicago()
    if(
        (pSubjectPropertyState == "IL") &&
		(pSubjectPropertyCity == "Chicago")
      )
    then
        YieldAdj1st = lookup("G-ThresholdIllinoisChicago1st LK", globalParam, globalParam);
		YieldAdj2nd = lookup("G-ThresholdIllinoisChicago2nd LK", globalParam, globalParam);
		

    end
end	// rule G-GetThresholdIllinoisChicago





/* ==========================================================================
 * G-GetThresholdRhodeIslandProvidence
 *
 *
 */
rule G-GetThresholdRhodeIslandProvidence()
    if(
        (pSubjectPropertyState == "RI") &&
		(pSubjectPropertyCity == "Providence")
      )
    then
        YieldAdj1st = lookup("G-ThresholdRhodeIslandProvidence1st LK", globalParam, globalParam);
		YieldAdj2nd = lookup("G-ThresholdRhodeIslandProvidence2nd LK", globalParam, globalParam);
		

    end
end	// rule G-GetThresholdRhodeIslandProvidence





/* ==========================================================================
 * G-GetThresholdTennesseeEQ20yr2nd
 *
 *
 */
rule G-GetThresholdTennesseeEQ20yr2nd()
    if(
        (pCombo > 0) &&
		(pSubjectPropertyState == "TN") &&
		(LoanTerm2nd == 240) &&
		(pLienNumber == 2)
      )
    then
        ThresholdNotRequired2nd = 0;
		YieldAdj2nd = lookup("G-ThresholdTennesseeEQ20yr2nd LK", globalParam, globalParam);
		

    end
end	// rule G-GetThresholdTennesseeEQ20yr2nd





/* ==========================================================================
 * G-GetThresholdTennesseeGT20yr2nd
 *
 *
 */
rule G-GetThresholdTennesseeGT20yr2nd()
    if(
        (pCombo > 0) &&
		(pSubjectPropertyState == "TN") &&
		(LoanTerm2nd > 240) &&
		(pLienNumber == 2)
      )
    then
        ThresholdNotRequired2nd = 0;
		YieldAdj2nd = lookup("G-ThresholdTennesseeGT20yr2nd LK", globalParam, globalParam);
		

    end
end	// rule G-GetThresholdTennesseeGT20yr2nd





/* ==========================================================================
 * G-GetThresholdTennesseeLtE15yr2nd
 *
 *
 */
rule G-GetThresholdTennesseeLtE15yr2nd()
    if(
        (pCombo > 0) &&
		(pSubjectPropertyState == "TN") &&
		(LoanTerm2nd <= 180) &&
		(pLienNumber == 2)
      )
    then
        ThresholdNotRequired2nd = 0;
		YieldAdj2nd = lookup("G-ThresholdTennesseeLtE15yr2nd LK", globalParam, globalParam);
		

    end
end	// rule G-GetThresholdTennesseeLtE15yr2nd





/* ==========================================================================
 * G-HandleDeprecatedLockPeriod1st
 *
 *
 */
rule G-HandleDeprecatedLockPeriod1st()
    if(
        (lockPeriod1st == 0)
      )
    then
        lockPeriod1st = LockPeriod1st;
		

    end
end	// rule G-HandleDeprecatedLockPeriod1st





/* ==========================================================================
 * G-HandleDeprecatedLockPeriod2nd
 *
 *
 */
rule G-HandleDeprecatedLockPeriod2nd()
    if(
        (pCombo > 0) &&
		(lockPeriod2nd == 0)
      )
    then
        lockPeriod2nd = LockPeriod2nd;
		

    end
end	// rule G-HandleDeprecatedLockPeriod2nd





/* ==========================================================================
 * G-Hawaii1UnitCltvGT80LTE90
 *
 *
 */
rule G-Hawaii1UnitCltvGT80LTE90()
    if(
        (pSubjectPropertyState == "HI") &&
		((LTV > 80) &&
		(LTV <= 90)) &&
		(pNumberOfUnits == 1)
      )
    then
        maxLoanAmount = 625500;
		

    end
end	// rule G-Hawaii1UnitCltvGT80LTE90





/* ==========================================================================
 * G-Hawaii1UnitCltvLTE80
 *
 *
 */
rule G-Hawaii1UnitCltvLTE80()
    if(
        (pSubjectPropertyState == "HI") &&
		(LTV <= 80) &&
		(pNumberOfUnits == 1)
      )
    then
        maxLoanAmount = 625500;
		

    end
end	// rule G-Hawaii1UnitCltvLTE80





/* ==========================================================================
 * G-Hawaii2UnitCltvGT80LTE90
 *
 *
 */
rule G-Hawaii2UnitCltvGT80LTE90()
    if(
        (pSubjectPropertyState == "HI") &&
		((LTV > 80) &&
		(LTV <= 90)) &&
		(pNumberOfUnits == 2)
      )
    then
        maxLoanAmount = 650000;
		

    end
end	// rule G-Hawaii2UnitCltvGT80LTE90





/* ==========================================================================
 * G-Hawaii2UnitCltvLTE80
 *
 *
 */
rule G-Hawaii2UnitCltvLTE80()
    if(
        (pSubjectPropertyState == "HI") &&
		(LTV <= 80) &&
		(pNumberOfUnits == 2)
      )
    then
        maxLoanAmount = 800775;
		

    end
end	// rule G-Hawaii2UnitCltvLTE80





/* ==========================================================================
 * G-Hawaii3UnitCltvGT80LTE90
 *
 *
 */
rule G-Hawaii3UnitCltvGT80LTE90()
    if(
        (pSubjectPropertyState == "HI") &&
		((LTV > 80) &&
		(LTV <= 90)) &&
		(pNumberOfUnits == 3)
      )
    then
        maxLoanAmount = 967950;
		

    end
end	// rule G-Hawaii3UnitCltvGT80LTE90





/* ==========================================================================
 * G-Hawaii3UnitCltvLTE80
 *
 *
 */
rule G-Hawaii3UnitCltvLTE80()
    if(
        (pSubjectPropertyState == "HI") &&
		(LTV <= 80) &&
		(pNumberOfUnits == 3)
      )
    then
        maxLoanAmount = 967950;
		

    end
end	// rule G-Hawaii3UnitCltvLTE80





/* ==========================================================================
 * G-Hawaii4UnitCltvGT80LTE90
 *
 *
 */
rule G-Hawaii4UnitCltvGT80LTE90()
    if(
        (pSubjectPropertyState == "HI") &&
		((LTV > 80) &&
		(LTV <= 90)) &&
		(pNumberOfUnits == 4)
      )
    then
        maxLoanAmount = 1202925;
		

    end
end	// rule G-Hawaii4UnitCltvGT80LTE90





/* ==========================================================================
 * G-Hawaii4UnitCltvLTE80
 *
 *
 */
rule G-Hawaii4UnitCltvLTE80()
    if(
        (pSubjectPropertyState == "HI") &&
		(LTV <= 80) &&
		(pNumberOfUnits == 4)
      )
    then
        maxLoanAmount = 1202925;
		

    end
end	// rule G-Hawaii4UnitCltvLTE80





/* ==========================================================================
 * G-HawaiiCheck
 *
 *
 */
rule G-HawaiiCheck()
    if(
        (pSubjectPropertyState != "HI")
      )
    then
        

    end
end	// rule G-HawaiiCheck





/* ==========================================================================
 * G-HawaiiCltvGT90
 *
 *
 */
rule G-HawaiiCltvGT90()
    if(
        (pSubjectPropertyState == "HI") &&
		(LTV > 90)
      )
    then
        maxLoanAmount = 500000;
		

    end
end	// rule G-HawaiiCltvGT90




alias(rule, G-HudRepoApprslReview, "G-HudRepo ApprslReview");

/* ==========================================================================
 * G-HudRepoApprslReview
 *
 *
 */
rule G-HudRepoApprslReview()
    if(
        (pHudRepo == "Y")
      )
    then
        
        condition(property, docs, "Hud Repos require an Enhanced Desk Review. This is in addition to the original appraisal.");

    end
end	// rule G-HudRepoApprslReview




alias(rule, G-Ineligible40DueIn30, "G-Ineligible 40DueIn30");

/* ==========================================================================
 * G-Ineligible40DueIn30
 *
 *
 */
rule G-Ineligible40DueIn30()
    if(
        (f40due30 == "Y") &&
		((pSubjectPropertyState == "ME") ||
		((pSubjectPropertyState == "TX") &&
		(purposeAbbrev == "CO") &&
		(pOccupancy == "PrimaryResidence")))
      )
    then
        Decision = "Referred";
		
        message(exception,  exception, "40/30 Balloons are not available for the state of Maine, and not available for a Texas Cash-Out Refinance.");

    end
end	// rule G-Ineligible40DueIn30





/* ==========================================================================
 * G-Ineligible4MonthPrepay
 *
 *
 */
rule G-Ineligible4MonthPrepay()
    if(
        (PrepayTerm1st == 4)
      )
    then
        Decision = "Referred";
		
        message(exception,  exception, "4 Month Prepay is no longer available. Select a different prepay period.");

    end
end	// rule G-Ineligible4MonthPrepay




alias(rule, G-Ineligible6MoLiborMaxLtv80, "G-Ineligible 6MoLiborMaxLtv80");

/* ==========================================================================
 * G-Ineligible6MoLiborMaxLtv80
 *
 *
 */
rule G-Ineligible6MoLiborMaxLtv80()
    if(
        (cvProgram != "Subprime") &&
		(amortType1st == "6 Mo Libor") &&
		(LTV > 80)
      )
    then
        Decision = "Referred";
		
        message(exception,  exception, "The 6 Mo Libor product is limited to a max LTV of 80");

    end
end	// rule G-Ineligible6MoLiborMaxLtv80




alias(rule, G-IneligibleCLTVMaxCLTVNotZero, "G-Ineligible CLTV Max CLTV Not Zero");

/* ==========================================================================
 * G-IneligibleCLTVMaxCLTVNotZero
 *
 *
 */
rule G-IneligibleCLTVMaxCLTVNotZero()
    if(
        (ScoreCheck == "Pass") &&
		(maxCLTV > 0) &&
		(CLTV > maxCLTV)
      )
    then
        Decision = "Referred";
		
        message(exception,  assets, "CLTV of <DPM>CLTV</DPM>% exceeds the Max CLTV of <DPM>Max CLTV</DPM>%.");

    end
end	// rule G-IneligibleCLTVMaxCLTVNotZero




alias(rule, G-IneligibleCLTVMaxCLTVZero, "G-Ineligible CLTV Max CLTV Zero");

/* ==========================================================================
 * G-IneligibleCLTVMaxCLTVZero
 *
 *
 */
rule G-IneligibleCLTVMaxCLTVZero()
    if(
        (ScoreCheck == "Pass") &&
		(maxCLTV == 0) &&
		(CLTV > maxCLTV)
      )
    then
        Decision = "Referred";
		
        message(exception,  exception, "This loan falls outside the program parameters; please consult the underwriting guide for product guidelines. (CLTV)");

    end
end	// rule G-IneligibleCLTVMaxCLTVZero




alias(rule, G-IneligibleCLTVSeasoning, "G-Ineligible CLTV Seasoning");

/* ==========================================================================
 * G-IneligibleCLTVSeasoning
 *
 *
 */
rule G-IneligibleCLTVSeasoning()
    if(
        (pPropertyOwnedDuration < 12) &&
		(CLTV > 75) &&
		(purposeAbbrev == "CO")
      )
    then
        Decision = "Referred";
		
        message(exception,  exception, "Max Cltv is 75% with Seasoning Less Than 12 Months");

    end
end	// rule G-IneligibleCLTVSeasoning




alias(rule, G-IneligibleCo-BorrowerCreditScore, "G-Ineligible Co-Borrower Credit Score");

/* ==========================================================================
 * G-IneligibleCo-BorrowerCreditScore
 *
 *
 */
rule G-IneligibleCo-BorrowerCreditScore()
    if(
        ((creditScore < MinCBScore) &&
		(ForNatNoFICOBorr1 == "N")) ||
		((pBorr2ID > 0) &&
		(pRepScore(wSingle)Borr2 < MinCBScore) &&
		(ForNatNoFICOBorr2 == "N")) ||
		((pBorr3ID > 0) &&
		(pRepScore(wSingle)Borr3 < MinCBScore) &&
		(ForNatNoFICOBorr3 == "N")) ||
		((pBorr4ID > 0) &&
		(pRepScore(wSingle)Borr4 < MinCBScore) &&
		(ForNatNoFICOBorr4 == "N")) ||
		((pBorr5ID > 0) &&
		(pRepScore(wSingle)Borr5 < MinCBScore) &&
		(ForNatNoFICOBorr5 == "N"))
      )
    then
        Decision = "Referred";
		ScoreCheck = "Fail";
		
        message(exception,  exception, "All borrowers must have a credit score greater than or equal to <DPM>Min CBScore</DPM>.");

    else
        ScoreCheck = "Pass";
		

    end
end	// rule G-IneligibleCo-BorrowerCreditScore




alias(rule, G-IneligibleComboHUDRepoRule, "G-Ineligible Combo HUDRepo Rule");

/* ==========================================================================
 * G-IneligibleComboHUDRepoRule
 *
 *
 */
rule G-IneligibleComboHUDRepoRule()
    if(
        (pHudRepo == "Y") &&
		(pCombo == 1)
      )
    then
        Decision = "Referred";
		
        message(exception,  assets, "Piggybacks are not allowed on HUD Repos.");

    end
end	// rule G-IneligibleComboHUDRepoRule




alias(rule, G-IneligibleCondoGT70LtvCltv, "G-Ineligible CondoGT70LtvCltv");

/* ==========================================================================
 * G-IneligibleCondoGT70LtvCltv
 *
 *
 */
rule G-IneligibleCondoGT70LtvCltv()
    if(
        ((pPropertyType == "HighRiseCondo") ||
		(pPropertyType == "MidRiseCondo")) &&
		((LTV > 70) ||
		(CLTV > 70))
      )
    then
        Decision = "Referred";
		
        message(exception,  exception, "Warrantable Condos > 4 Stories have a max Ltv/Cltv of 70");

    end
end	// rule G-IneligibleCondoGT70LtvCltv




alias(rule, G-IneligibleCondoGT90LtvCltv, "G-Ineligible CondoGT90LtvCltv");

/* ==========================================================================
 * G-IneligibleCondoGT90LtvCltv
 *
 *
 */
rule G-IneligibleCondoGT90LtvCltv()
    if(
        (pPropertyType == "LowRiseCondo") &&
		((LTV > 90) ||
		(CLTV > 90))
      )
    then
        Decision = "Referred";
		
        message(exception,  exception, "Warrantable LowRise Condos have a max Ltv/Cltv of 90");

    end
end	// rule G-IneligibleCondoGT90LtvCltv




alias(rule, G-IneligibleCondoMinFico, "G-Ineligible CondoMinFico");

/* ==========================================================================
 * G-IneligibleCondoMinFico
 *
 *
 */
rule G-IneligibleCondoMinFico()
    if(
        ((pPropertyType == "HighRiseCondo") ||
		(pPropertyType == "MidRiseCondo") ||
		(pPropertyType == "LowRiseCondo")) &&
		(creditScore < 660)
      )
    then
        Decision = "Referred";
		
        message(exception,  exception, "All condos require min FICO of 660 with Max CLTV of 90.  HighRise Condos and MidRise Condos are restricted at Max CLTV of 70.");

    end
end	// rule G-IneligibleCondoMinFico





/* ==========================================================================
 * G-IneligibleCountyWV
 *
 *
 */
rule G-IneligibleCountyWV()
    if(
        (pSubjectPropertyState == "WV")
      )
    then
        
        condition(asset, docs, "Subject Property must be located in Jefferson or Berkeley county");

    end
end	// rule G-IneligibleCountyWV




alias(rule, G-IneligibleCreditScore, "G-Ineligible Credit Score");

/* ==========================================================================
 * G-IneligibleCreditScore
 *
 *
 */
rule G-IneligibleCreditScore()
    if(
        (ScoreCheck == "Pass") &&
		(creditScore < minScore)
      )
    then
        Decision = "Referred";
		
        message(exception,  exception, "Credit Score is less than the required Min Score of <DPM>Min Score</DPM>.");

    end
end	// rule G-IneligibleCreditScore





/* ==========================================================================
 * G-IneligibleDocType-NINA
 *
 *
 */
rule G-IneligibleDocType-NINA()
    if(
        (pDocumentType == "NINA")
      )
    then
        Decision = "Referred";
		
        message(exception,  exception, "NINA documentation type is not eligible for this program.");

    end
end	// rule G-IneligibleDocType-NINA





/* ==========================================================================
 * G-IneligibleDocType-SISA
 *
 *
 */
rule G-IneligibleDocType-SISA()
    if(
        (pDocumentType == "SISA")
      )
    then
        Decision = "Referred";
		
        message(exception,  exception, "SISA documentation type is not eligible for this program.");

    end
end	// rule G-IneligibleDocType-SISA




alias(rule, G-IneligibleEmploymentCk, "G-Ineligible EmploymentCk");

/* ==========================================================================
 * G-IneligibleEmploymentCk
 *
 *
 */
rule G-IneligibleEmploymentCk()
    if(
        ((pBorr1ID > 0) &&
		(pBorr1-EmployerCount > 0)) ||
		((pBorr2ID > 0) &&
		(pBorr2-EmployerCount > 0)) ||
		((pBorr3ID > 0) &&
		(pBorr3-EmployerCount > 0)) ||
		((pBorr4ID > 0) &&
		(pBorr4-EmployerCount > 0)) ||
		((pBorr5ID > 0) &&
		(pBorr5-EmployerCount > 0))
      )
    then
        HasEmployment = "TRUE";
		

    else
        HasEmployment = "FALSE";
		

    end
end	// rule G-IneligibleEmploymentCk




alias(rule, G-IneligibleEmploymentInfoReq, "G-Ineligible EmploymentInfoReq");

/* ==========================================================================
 * G-IneligibleEmploymentInfoReq
 *
 *
 */
rule G-IneligibleEmploymentInfoReq()
    if(
        ((pDocumentType != "No Doc") &&
		(pDocumentType != "No Doc with Assets")) &&
		(HasEmployment == "FALSE")
      )
    then
        Decision = "Referred";
		
        message(exception,  exception, "Employment information must be completed for the selected Doc Type.");

    end
end	// rule G-IneligibleEmploymentInfoReq




alias(rule, G-IneligibleEmploymentNoDoc, "G-Ineligible EmploymentNoDoc");

/* ==========================================================================
 * G-IneligibleEmploymentNoDoc
 *
 *
 */
rule G-IneligibleEmploymentNoDoc()
    if(
        ((pDocumentType == "No Doc") ||
		(pDocumentType == "No Doc with Assets")) &&
		((pBorr1-EmployerCount > 0) ||
		(pBorr2-EmployerCount > 0) ||
		(pBorr3-EmployerCount > 0) ||
		(pBorr4-EmployerCount > 0) ||
		(pBorr5-EmployerCount > 0))
      )
    then
        Decision = "Referred";
		
        message(exception,  exception, "Employment information is NOT allowed for the selected Doc Type.");

    end
end	// rule G-IneligibleEmploymentNoDoc




alias(rule, G-IneligibleFCBKCCCSRule, "G-Ineligible FC BK CCCS Rule");

/* ==========================================================================
 * G-IneligibleFCBKCCCSRule
 *
 *
 */
rule G-IneligibleFCBKCCCSRule()
    if(
        (TotalFCBKCCCSLast6Yr > 1)
      )
    then
        Decision = "Referred";
		
        message(exception,  exception, "Multiple Bankruptcies (Chapter 7/13), foreclosures and/or Consumer Credit Counseling Services in last 6 years not allowed.");

    end
end	// rule G-IneligibleFCBKCCCSRule





/* ==========================================================================
 * G-IneligibleForeignNationalBorrowers
 *
 *
 */
rule G-IneligibleForeignNationalBorrowers()
    if(
        (ForeignNationalIndicator == "Y")
      )
    then
        Decision = "Referred";
		
        message(exception,  exception, "Foreign National borrowers are ineligible for BSRM Financing.");

    end
end	// rule G-IneligibleForeignNationalBorrowers




alias(rule, G-IneligibleFTHBRule1, "G-Ineligible FTHB Rule 1");

/* ==========================================================================
 * G-IneligibleFTHBRule1
 *
 *
 */
rule G-IneligibleFTHBRule1()
    if(
        (FTHB == "Y") &&
		(pOwnershipType-Borr1 == "LivingRentFree")
      )
    then
        Decision = "Referred";
		
        message(exception,  exception, "Rent Free Not Allowed.");

    end
end	// rule G-IneligibleFTHBRule1




alias(rule, G-IneligibleIncomeCheck, "G-Ineligible Income Check");

/* ==========================================================================
 * G-IneligibleIncomeCheck
 *
 *
 */
rule G-IneligibleIncomeCheck()
    if(
        (pDocumentType != "NINA") &&
		(pDocumentType != "No Ratio") &&
		(pDocumentType != "No Doc") &&
		(pDocumentType != "No Doc with Assets") &&
		(TotalIncome == 0)
      )
    then
        Decision = "Referred";
		
        message(exception,  assets, "This document type requires income. Please resubmit with income.");

    end
end	// rule G-IneligibleIncomeCheck




alias(rule, G-IneligibleINNoteRate, "G-Ineligible IN NoteRate");

/* ==========================================================================
 * G-IneligibleINNoteRate
 *
 *
 */
rule G-IneligibleINNoteRate()
    if(
        (pSubjectPropertyState == "IN") &&
		(rate2nd > 21)
      )
    then
        Decision = "Referred";
		
        message(exception,  exception, "Indiana 2nd Lien rates cannot exceed 21%");

    end
end	// rule G-IneligibleINNoteRate




alias(rule, G-IneligibleIowaIntRate2nd, "G-Ineligible IowaIntRate 2nd");

/* ==========================================================================
 * G-IneligibleIowaIntRate2nd
 *
 *
 */
rule G-IneligibleIowaIntRate2nd()
    if(
        (pSubjectPropertyState == "IA") &&
		(pPurposeOfLoan == "Refinance") &&
		(pLienNumber == 2) &&
		(loanAmount2nd <= 25000) &&
		(rate2nd > 21)
      )
    then
        Decision = "Referred";
		
        message(exception,  exception, "2nd Liens in Iowa cannot exceed 21% interest rate.");

    end
end	// rule G-IneligibleIowaIntRate2nd




alias(rule, G-IneligibleKansas40or50DueIn30, "G-Ineligible Kansas40or50DueIn30");

/* ==========================================================================
 * G-IneligibleKansas40or50DueIn30
 *
 *
 */
rule G-IneligibleKansas40or50DueIn30()
    if(
        ((f40due30 == "Y") ||
		(f50due30 == "Y")) &&
		(pSubjectPropertyState == "KS") &&
		(pOccupancy == "PrimaryResidence") &&
		(rate1st > 12)
      )
    then
        Decision = "Referred";
		
        message(exception,  exception, "40/30 Balloon or 50/30 Balloon is not available for a Primary Residence in Kansas over 12% APR");

    end
end	// rule G-IneligibleKansas40or50DueIn30




alias(rule, G-IneligibleKSNoteRate, "G-Ineligible KS NoteRate");

/* ==========================================================================
 * G-IneligibleKSNoteRate
 *
 *
 */
rule G-IneligibleKSNoteRate()
    if(
        (pSubjectPropertyState == "KS") &&
		((rate1st > 18) ||
		(rate2nd > 18))
      )
    then
        Decision = "Referred";
		
        message(exception,  exception, "Kansas note rate cannot exceed 18%");

    end
end	// rule G-IneligibleKSNoteRate




alias(rule, G-IneligibleLivingRentFree, "G-Ineligible LivingRentFree");

/* ==========================================================================
 * G-IneligibleLivingRentFree
 *
 *
 */
rule G-IneligibleLivingRentFree()
    if(
        (pOwnershipType-Borr1 == "LivingRentFree") &&
		(fNonTraditionalTLReqd == "Y")
      )
    then
        Decision = "Referred";
		
        message(exception,  exception, "Non traditional trades may not be used to meet minimum tradeline requirements when rental history is not provided (Living Rent Free).");

    end
end	// rule G-IneligibleLivingRentFree




alias(rule, G-IneligibleLTVMaxLTVNotZero, "G-Ineligible LTV Max LTV Not Zero");

/* ==========================================================================
 * G-IneligibleLTVMaxLTVNotZero
 *
 *
 */
rule G-IneligibleLTVMaxLTVNotZero()
    if(
        (ScoreCheck == "Pass") &&
		(maxLTV > 0) &&
		(LTV > maxLTV)
      )
    then
        Decision = "Referred";
		
        message(exception,  assets, "LTV of <DPM>LTV</DPM>% exceeds the Max LTV of <DPM>Max LTV</DPM>%.");

    end
end	// rule G-IneligibleLTVMaxLTVNotZero




alias(rule, G-IneligibleLTVMaxLTVZero, "G-Ineligible LTV Max LTV Zero");

/* ==========================================================================
 * G-IneligibleLTVMaxLTVZero
 *
 *
 */
rule G-IneligibleLTVMaxLTVZero()
    if(
        (ScoreCheck == "Pass") &&
		(maxLTV == 0) &&
		(LTV > maxLTV)
      )
    then
        Decision = "Referred";
		
        message(exception,  exception, "This loan falls outside the program parameters; please consult the underwriting guide for product guidelines. (LTV)");

    end
end	// rule G-IneligibleLTVMaxLTVZero




alias(rule, G-IneligibleLTVSeasoning, "G-Ineligible LTV Seasoning");

/* ==========================================================================
 * G-IneligibleLTVSeasoning
 *
 *
 */
rule G-IneligibleLTVSeasoning()
    if(
        (pPropertyOwnedDuration < 12) &&
		(LTV > 75) &&
		(purposeAbbrev == "CO")
      )
    then
        Decision = "Referred";
		
        message(exception,  exception, "Max Ltv is 75% with Seasoning Less than 12 Months");

    end
end	// rule G-IneligibleLTVSeasoning




alias(rule, G-IneligibleMaineInterestRate2nd, "G-Ineligible MaineInterestRate2nd");

/* ==========================================================================
 * G-IneligibleMaineInterestRate2nd
 *
 *
 */
rule G-IneligibleMaineInterestRate2nd()
    if(
        (pSubjectPropertyState == "ME") &&
		(pLienNumber == 2) &&
		(rate2nd > 16)
      )
    then
        Decision = "Referred";
		
        message(exception,  exception, "2nd liens in Maine cannot exceed 16% interest rate");

    end
end	// rule G-IneligibleMaineInterestRate2nd




alias(rule, G-IneligibleMaineProduct, "G-Ineligible MaineProduct");

/* ==========================================================================
 * G-IneligibleMaineProduct
 *
 *
 */
rule G-IneligibleMaineProduct()
    if(
        (pSubjectPropertyState == "ME") &&
		(pLienNumber == 1) &&
		((amortType1st == "1 Mo OptA") ||
		(amortType1st == "3 Mo OptA"))
      )
    then
        Decision = "Referred";
		
        message(exception,  exception, "State of Maine not eligible for Option ARM");

    end
end	// rule G-IneligibleMaineProduct




alias(rule, G-IneligibleMaxLoanAmount, "G-Ineligible Max Loan Amount");

/* ==========================================================================
 * G-IneligibleMaxLoanAmount
 *
 *
 */
rule G-IneligibleMaxLoanAmount()
    if(
        (ScoreCheck == "Pass") &&
		(maxLoanAmount > 0) &&
		(pLoanAmount > maxLoanAmount)
      )
    then
        Decision = "Referred";
		
        message(exception,  assets, "Loan Amount of $<DPM>Loan Amount</DPM> exceeds the Max Loan Amount of $<DPM>Max Loan Amount</DPM>.");

    end
end	// rule G-IneligibleMaxLoanAmount




alias(rule, G-IneligibleMaxLoanAmount2, "G-Ineligible Max Loan Amount 2");

/* ==========================================================================
 * G-IneligibleMaxLoanAmount2
 *
 *
 */
rule G-IneligibleMaxLoanAmount2()
    if(
        (ScoreCheck == "Pass") &&
		(maxLoanAmount == 0) &&
		(pLoanAmount > maxLoanAmount)
      )
    then
        Decision = "Referred";
		
        message(exception,  exception, "This loan falls outside the program parameters; please consult the underwriting guide for product guidelines. (Loan Amount)");

    end
end	// rule G-IneligibleMaxLoanAmount2




alias(rule, G-IneligibleMaxLoanAmount3, "G-Ineligible Max Loan Amount 3");

/* ==========================================================================
 * G-IneligibleMaxLoanAmount3
 *
 *
 */
rule G-IneligibleMaxLoanAmount3()
    if(
        (ScoreCheck == "Pass") &&
		(maxLoanAmount == -1)
      )
    then
        Decision = "Referred";
		
        message(exception,  assets, "This loan falls outside the program parameters; please consult the underwriting guide for product guidelines.");

    end
end	// rule G-IneligibleMaxLoanAmount3




alias(rule, G-IneligibleMinLoanAmount, "G-Ineligible Min Loan Amount");

/* ==========================================================================
 * G-IneligibleMinLoanAmount
 *
 *
 */
rule G-IneligibleMinLoanAmount()
    if(
        (pLoanAmount < minLoanAmount)
      )
    then
        Decision = "Referred";
		
        message(exception,  assets, "Loan Amount of <DPM>Loan Amount</DPM> is less than the Minimum Loan Amount of <DPM>Min Loan Amount</DPM>.");

    end
end	// rule G-IneligibleMinLoanAmount




alias(rule, G-IneligibleMinLoanAmtTXCORule, "G-Ineligible Min Loan Amt TX CO Rule");

/* ==========================================================================
 * G-IneligibleMinLoanAmtTXCORule
 *
 *
 */
rule G-IneligibleMinLoanAmtTXCORule()
    if(
        (pLienNumber == 1) &&
		(pOccupancy == "PrimaryResidence") &&
		(pSubjectPropertyState == "TX") &&
		(purposeAbbrev == "CO") &&
		(pLoanAmount < minLoanAmount)
      )
    then
        Decision = "Referred";
		
        message(exception,  assets, "Minimum loan amount is <DPM>Min Loan Amount</DPM> for Texas Cash Out Refinance.");

    end
end	// rule G-IneligibleMinLoanAmtTXCORule




alias(rule, G-IneligibleMinnesotaDocType, "G-Ineligible MinnesotaDocType");

/* ==========================================================================
 * G-IneligibleMinnesotaDocType
 *
 *
 */
rule G-IneligibleMinnesotaDocType()
    if(
        (pOccupancy != "Investment") &&
		(pSubjectPropertyState == "MN") &&
		((pDocumentType == "No Doc") ||
		(pDocumentType == "No Doc with Assets"))
      )
    then
        Decision = "Referred";
		
        message(exception,  exception, "State of Minnesota does not allow No Doc or No Doc with Assets for Primary or Secondary Residence.");

    end
end	// rule G-IneligibleMinnesotaDocType




alias(rule, G-IneligibleMinnesotaProduct, "G-Ineligible MinnesotaProduct");

/* ==========================================================================
 * G-IneligibleMinnesotaProduct
 *
 *
 */
rule G-IneligibleMinnesotaProduct()
    if(
        (pOccupancy != "Investment") &&
		(pSubjectPropertyState == "MN") &&
		(pLienNumber == 1) &&
		((amortType1st == "1 Mo OptA") ||
		(amortType1st == "3 Mo OptA") ||
		(amortType1st == "5 Yr OptA"))
      )
    then
        Decision = "Referred";
		
        message(exception,  exception, "State of Minnesota does not allow Option Arm or Secure Option Arm Program for Primary or Secondary Residence.");

    end
end	// rule G-IneligibleMinnesotaProduct





/* ==========================================================================
 * G-IneligibleModelHomeLeaseback
 *
 *
 */
rule G-IneligibleModelHomeLeaseback()
    if(
        (pModelHomeLeaseback == "Y") &&
		(LTV > 80)
      )
    then
        Decision = "Referred";
		
        message(exception,  exception, "Max LTV for Model Home Leasebacks is 80%");

    end
end	// rule G-IneligibleModelHomeLeaseback





/* ==========================================================================
 * G-IneligibleMSRetention
 *
 *
 */
rule G-IneligibleMSRetention()
    if(
        (pSubjectPropertyState == "MS") &&
		(pUserType == "Retention")
      )
    then
        Decision = "Referred";
		
        message(exception,  exception, "Ineligible property state, refer to guidelines or contact your Account Executive for assistance.");

    end
end	// rule G-IneligibleMSRetention





/* ==========================================================================
 * G-IneligibleMtgLate
 *
 *
 */
rule G-IneligibleMtgLate()
    if(
        (((pCombo < 1) &&
		(pLoanAmount <= 1000000)) ||
		((pCombo > 0) &&
		(combinedLoanAmount <= 1000000))) &&
		((TDLN-Late30s > 0) ||
		(TDLN-Late60s > 0) ||
		(TDLN-Late90s > 0) ||
		(TDLN-Late120s > 0))
      )
    then
        Decision = "Referred";
		
        message(exception,  exception, "Mortgage lates exceed max allowed for program, last 12 month history must be equal to 0x30.");

    end
end	// rule G-IneligibleMtgLate





/* ==========================================================================
 * G-IneligibleMtgLateJumbo
 *
 *
 */
rule G-IneligibleMtgLateJumbo()
    if(
        (((pCombo < 1) &&
		(pLoanAmount > 1000000)) ||
		((pCombo > 0) &&
		(combinedLoanAmount > 1000000))) &&
		((TDLN-Late30sx24 > 0) ||
		(TDLN-Late60sx24 > 0) ||
		(TDLN-Late90sx24 > 0) ||
		(TDLN-Late120sx24 > 0))
      )
    then
        Decision = "Referred";
		
        message(exception,  exception, "Mortgage lates exceed max allowed for program, last 24 month history must be equal to 0x30.");

    end
end	// rule G-IneligibleMtgLateJumbo




alias(rule, G-IneligibleNon-OccCo-Borr, "G-Ineligible Non-OccCo-Borr");

/* ==========================================================================
 * G-IneligibleNon-OccCo-Borr
 *
 *
 */
rule G-IneligibleNon-OccCo-Borr()
    if(
        ((pOccupancy == "Investment") ||
		(pOccupancy == "SecondaryResidence")) &&
		((pDeclBorr1AppNonOccupancy == "N") ||
		(pDeclBorr2AppNonOccupancy == "N") ||
		(pDeclBorr3AppNonOccupancy == "N") ||
		(pDeclBorr4AppNonOccupancy == "N") ||
		(pDeclBorr5AppNonOccupancy == "N"))
      )
    then
        Decision = "Referred";
		
        message(exception,  exception, "Non-occupant co-borrowers are not eligible for the selected Occupancy ");

    end
end	// rule G-IneligibleNon-OccCo-Borr




alias(rule, G-IneligibleNon-OccCo-BorrDocType, "G-Ineligible Non-OccCo-BorrDocType");

/* ==========================================================================
 * G-IneligibleNon-OccCo-BorrDocType
 *
 *
 */
rule G-IneligibleNon-OccCo-BorrDocType()
    if(
        (pOccupancy == "PrimaryResidence") &&
		((pDeclBorr1AppNonOccupancy == "N") ||
		(pDeclBorr2AppNonOccupancy == "N") ||
		(pDeclBorr3AppNonOccupancy == "N") ||
		(pDeclBorr4AppNonOccupancy == "N") ||
		(pDeclBorr5AppNonOccupancy == "N")) &&
		(fIsFullDoc != "TRUE")
      )
    then
        Decision = "Referred";
		
        message(exception,  exception, "Non-occupant co-borrowers are not eligible for the selected document type, Full Documentation is required. ");

    end
end	// rule G-IneligibleNon-OccCo-BorrDocType




alias(rule, G-IneligibleNon-OccCo-BorrMaxCltv, "G-Ineligible Non-OccCo-BorrMaxCltv");

/* ==========================================================================
 * G-IneligibleNon-OccCo-BorrMaxCltv
 *
 *
 */
rule G-IneligibleNon-OccCo-BorrMaxCltv()
    if(
        (pOccupancy == "PrimaryResidence") &&
		((pDeclBorr1AppNonOccupancy == "N") ||
		(pDeclBorr2AppNonOccupancy == "N") ||
		(pDeclBorr3AppNonOccupancy == "N") ||
		(pDeclBorr4AppNonOccupancy == "N") ||
		(pDeclBorr5AppNonOccupancy == "N")) &&
		(maxCLTV > 90)
      )
    then
        Decision = "Referred";
		
        message(exception,  exception, "Max Cltv is 90% with a Non-occupant co-borrower");

    end
end	// rule G-IneligibleNon-OccCo-BorrMaxCltv





/* ==========================================================================
 * G-IneligibleNonSelfEmp-NoRatio
 *
 *
 */
rule G-IneligibleNonSelfEmp-NoRatio()
    if(
        (fIsSelfEmployed != "TRUE") &&
		(pDocumentType == "No Ratio") &&
		((pOccupancy != "PrimaryResidence") &&
		(pOccupancy != "SecondaryResidence"))
      )
    then
        Decision = "Referred";
		
        message(exception,  exception, "No Ratio, non-self employed restricted to primary/secondary homes.");

    end
end	// rule G-IneligibleNonSelfEmp-NoRatio





/* ==========================================================================
 * G-IneligibleNonSelfEmp-SVLL
 *
 *
 */
rule G-IneligibleNonSelfEmp-SVLL()
    if(
        (fIsSelfEmployed != "TRUE") &&
		(DocTypeAbbrev == "SVLL")
      )
    then
        Decision = "Referred";
		
        message(exception,  exception, "Non-self employed borrowers are ineligible for Stated and Lite document types.");

    end
end	// rule G-IneligibleNonSelfEmp-SVLL




alias(rule, G-IneligibleNonWarrCondo, "G-Ineligible NonWarrCondo");

/* ==========================================================================
 * G-IneligibleNonWarrCondo
 *
 *
 */
rule G-IneligibleNonWarrCondo()
    if(
        (pNonWarrantableCondo == "Y") &&
		((pPropertyType == "HighRiseCondo") ||
		(pPropertyType == "MidRiseCondo") ||
		(pPropertyType == "LowRiseCondo"))
      )
    then
        Decision = "Referred";
		
        message(exception,  exception, "Non Warrantable Condos are ineligible");

    end
end	// rule G-IneligibleNonWarrCondo





/* ==========================================================================
 * G-IneligibleNY6Mo2YrARMBalloon
 *
 *
 */
rule G-IneligibleNY6Mo2YrARMBalloon()
    if(
        (pSubjectPropertyState == "NY") &&
		(loanAmount1st <= 250000) &&
		((f40due30 == "Y") ||
		(f50due30 == "Y")) &&
		((amortType1st == "6 Mo Libor") ||
		(amortType1st == "2/6 Mo Libor"))
      )
    then
        Decision = "Referred";
		
        message(exception,  exception, "The selected amortization type with a balloon payment is ineligible for the state of New York.");

    end
end	// rule G-IneligibleNY6Mo2YrARMBalloon





/* ==========================================================================
 * G-IneligibleNYAttachedPropSIVA
 *
 *
 */
rule G-IneligibleNYAttachedPropSIVA()
    if(
        ((DocTypeAbbrev == "SVLL") ||
		(pDocumentType == "SIVA") ||
		(pDocumentType == "Lite Doc")) &&
		(DTI > 45) &&
		(LTV > 90) &&
		(pSubjectPropertyState == "NY") &&
		((pPropertyType == "Townhouse") ||
		(pPropertyType == "Rowhome"))
      )
    then
        Decision = "Referred";
		
        message(exception,  exception, "Loan is ineligible for exceeding max DTI of 45% ");

    end
end	// rule G-IneligibleNYAttachedPropSIVA




alias(rule, G-IneligibleOtherFinancingHUDRepoRule, "G-Ineligible OtherFinancing HUDRepo Rule");

/* ==========================================================================
 * G-IneligibleOtherFinancingHUDRepoRule
 *
 *
 */
rule G-IneligibleOtherFinancingHUDRepoRule()
    if(
        (pHudRepo == "Y") &&
		(pOtherFinancing > 0) &&
		(LTV > 70)
      )
    then
        Decision = "Referred";
		
        message(exception,  assets, "HUD Repo home with Secondary Financing are limited to LTV of 70%.");

    end
end	// rule G-IneligibleOtherFinancingHUDRepoRule




alias(rule, G-IneligiblePaymentShock, "G-Ineligible Payment Shock");

/* ==========================================================================
 * G-IneligiblePaymentShock
 *
 *
 */
rule G-IneligiblePaymentShock()
    if(
        (pOccupancy == "PrimaryResidence") &&
		(MaxPaymentShock > -1) &&
		(PaymentShock > MaxPaymentShock)
      )
    then
        Decision = "Referred";
		
        message(exception,  exception, "Payment shock of <DPM>Payment Shock</DPM> exceeds the max payment shock allowed of <DPM>Max Payment Shock</DPM>.");

    end
end	// rule G-IneligiblePaymentShock





/* ==========================================================================
 * G-IneligiblePaymentShock-LivingRentFree-1
 *
 *
 */
rule G-IneligiblePaymentShock-LivingRentFree-1()
    if(
        (pOccupancy == "PrimaryResidence") &&
		(PaymentShock == "NULL") &&
		(pOwnershipType-Borr1 == "LivingRentFree") &&
		(TotalCurrentHousingExpenses < 1)
      )
    then
        PaymentShock = 99;
		

    end
end	// rule G-IneligiblePaymentShock-LivingRentFree-1





/* ==========================================================================
 * G-IneligiblePaymentShock-LivingRentFree-2
 *
 *
 */
rule G-IneligiblePaymentShock-LivingRentFree-2()
    if(
        (pOccupancy == "PrimaryResidence") &&
		(PaymentShock == "NULL") &&
		(pOwnershipType-Borr1 != "LivingRentFree") &&
		(TotalCurrentHousingExpenses < 1)
      )
    then
        Decision = "Referred";
		PaymentShock = 0;
		
        message(exception,  exception, "Current housing expenses must be greater than $0 or the Living Rent Free checkbox must be selected. Update the borrower's information and run Product Finder again.");

    end
end	// rule G-IneligiblePaymentShock-LivingRentFree-2




alias(rule, G-IneligiblePaymentShock2, "G-Ineligible Payment Shock 2");

/* ==========================================================================
 * G-IneligiblePaymentShock2
 *
 *
 */
rule G-IneligiblePaymentShock2()
    if(
        (pOccupancy == "PrimaryResidence") &&
		(MaxPaymentShock != -1) &&
		(PaymentShock == "NULL")
      )
    then
        Decision = "Referred";
		
        message(exception,  exception, "Payment shock exceeds the max payment shock allowed of <DPM>Max Payment Shock</DPM>.");

    end
end	// rule G-IneligiblePaymentShock2





/* ==========================================================================
 * G-IneligiblePermResRule1
 *
 *
 */
rule G-IneligiblePermResRule1()
    if(
        ((pCitizenshipOfPrimaryApplicant == "PermanentResidentAlien") ||
		(pCitizenshipCoBorr1 == "PermanentResidentAlien") ||
		(pCitizenshipCoBorr2 == "PermanentResidentAlien") ||
		(pCitizenshipCoBorr3 == "PermanentResidentAlien") ||
		(pCitizenshipCoBorr4 == "PermanentResidentAlien")) &&
		((pDocumentType == "No Doc") ||
		(pDocumentType == "No Doc with Assets"))
      )
    then
        Decision = "Referred";
		
        message(exception,  exception, "'No Doc' documentation types are not allowed for Permanent Resident Aliens.");

    end
end	// rule G-IneligiblePermResRule1




alias(rule, G-IneligiblePP-CONoteRate, "G-Ineligible PP-CO Note Rate");

/* ==========================================================================
 * G-IneligiblePP-CONoteRate
 *
 *
 */
rule G-IneligiblePP-CONoteRate()
    if(
        (pSubjectPropertyState == "CO") &&
		(((rate2nd > 11) &&
		(PrepayIndicator2nd == "Y")) ||
		((rate1st > 11) &&
		(PrepayIndicator1st == "Y")))
      )
    then
        Decision = "Referred";
		
        message(exception,  exception, "Colorado prepayment penalty not allowed with APR greater than 12%.");

    end
end	// rule G-IneligiblePP-CONoteRate




alias(rule, G-IneligiblePP-FL2ndNoteRate, "G-Ineligible PP-FL 2nd Note Rate");

/* ==========================================================================
 * G-IneligiblePP-FL2ndNoteRate
 *
 *
 */
rule G-IneligiblePP-FL2ndNoteRate()
    if(
        ((pSubjectPropertyState == "FL") &&
		(loanAmount2nd < 500000) &&
		(rate2nd > 18)) ||
		((pSubjectPropertyState == "FL") &&
		(loanAmount2nd >= 500000) &&
		(rate2nd > 25) &&
		(PrepayIndicator2nd == "Y"))
      )
    then
        Decision = "Referred";
		
        message(exception,  exception, "Florida 2nd Mortgage less than $500,000 cannot exceed 18%.  Florida 2nd Mortgage more than $500,000 with a prepay penalty cannot exceed 25%.");

    end
end	// rule G-IneligiblePP-FL2ndNoteRate




alias(rule, G-IneligiblePP-IA1st, "G-Ineligible PP-IA 1st");

/* ==========================================================================
 * G-IneligiblePP-IA1st
 *
 *
 */
rule G-IneligiblePP-IA1st()
    if(
        (pSubjectPropertyState == "IA") &&
		(PrepayIndicator1st == "Y") &&
		(pNumberOfUnits < 3)
      )
    then
        Decision = "Referred";
		
        message(exception,  exception, "Iowa prepayment penalty not allowed on 1-2 unit properties.");

    end
end	// rule G-IneligiblePP-IA1st




alias(rule, G-IneligiblePP-IA2nd, "G-Ineligible PP-IA 2nd");

/* ==========================================================================
 * G-IneligiblePP-IA2nd
 *
 *
 */
rule G-IneligiblePP-IA2nd()
    if(
        (pSubjectPropertyState == "IA") &&
		(PrepayIndicator2nd == "Y") &&
		(pNumberOfUnits < 3) &&
		(loanAmount2nd <= 25000)
      )
    then
        Decision = "Referred";
		
        message(exception,  exception, "Iowa prepayment penalty not allowed on 1-2 unit properties.");

    end
end	// rule G-IneligiblePP-IA2nd




alias(rule, G-IneligiblePP-ILNoteRate, "G-Ineligible PP-IL Note Rate");

/* ==========================================================================
 * G-IneligiblePP-ILNoteRate
 *
 *
 */
rule G-IneligiblePP-ILNoteRate()
    if(
        (pSubjectPropertyState == "IL") &&
		(((rate1st > 8) &&
		(PrepayIndicator1st == "Y")) ||
		((rate2nd > 8) &&
		(PrepayIndicator2nd == "Y")))
      )
    then
        Decision = "Referred";
		
        message(exception,  assets, "The prepayment term selected exceeds the max allowed for the state selected.");

    end
end	// rule G-IneligiblePP-ILNoteRate




alias(rule, G-IneligiblePP-KS, "G-Ineligible PP-KS");

/* ==========================================================================
 * G-IneligiblePP-KS
 *
 *
 */
rule G-IneligiblePP-KS()
    if(
        (pSubjectPropertyState == "KS") &&
		((PrepayIndicator1st == "Y") ||
		(PrepayIndicator2nd == "Y"))
      )
    then
        Decision = "Referred";
		
        message(exception,  exception, "Prepayment penalty not allowed in Kansas.");

    end
end	// rule G-IneligiblePP-KS




alias(rule, G-IneligiblePP-MD, "G-Ineligible PP-MD");

/* ==========================================================================
 * G-IneligiblePP-MD
 *
 *
 */
rule G-IneligiblePP-MD()
    if(
        (pSubjectPropertyState == "MD") &&
		(PrepayIndicator1st == "Y") &&
		(rate1st >= 8)
      )
    then
        Decision = "Referred";
		
        message(exception,  exception, "Maryland prepayment penalty not allowed with Rate greater than or equal to 8%.");

    end
end	// rule G-IneligiblePP-MD




alias(rule, G-IneligiblePP-ME1st, "G-Ineligible PP-ME1st");

/* ==========================================================================
 * G-IneligiblePP-ME1st
 *
 *
 */
rule G-IneligiblePP-ME1st()
    if(
        (pSubjectPropertyState == "ME") &&
		(pLienNumber == 1) &&
		(PrepayIndicator1st == "Y") &&
		(pAmortizationType != "Fixed")
      )
    then
        Decision = "Referred";
		
        message(exception,  exception, "1st mortgages in Maine with a prepayment penalty must be a fully amortizing fixed rate product.");

    end
end	// rule G-IneligiblePP-ME1st




alias(rule, G-IneligiblePP-ME2nd, "G-Ineligible PP-ME2nd");

/* ==========================================================================
 * G-IneligiblePP-ME2nd
 *
 *
 */
rule G-IneligiblePP-ME2nd()
    if(
        (pSubjectPropertyState == "ME") &&
		(pLienNumber == 2) &&
		(PrepayIndicator2nd == "Y") &&
		((pAmortizationType != "Fixed") ||
		(pPurposeOfLoan != "Purchase"))
      )
    then
        Decision = "Referred";
		
        message(exception,  exception, "2nd mortgages in Maine must be a fully amortizing fixed rate purchase.");

    end
end	// rule G-IneligiblePP-ME2nd




alias(rule, G-IneligiblePP-NCLoanAmt, "G-Ineligible PP-NC LoanAmt");

/* ==========================================================================
 * G-IneligiblePP-NCLoanAmt
 *
 *
 */
rule G-IneligiblePP-NCLoanAmt()
    if(
        (pSubjectPropertyState == "NC") &&
		((pOccupancy == "PrimaryResidence") ||
		(pOccupancy == "SecondaryResidence") ||
		(pOccupancy == "Investment")) &&
		(PrepayIndicator1st == "Y") &&
		(loanAmount1st <= 150000)
      )
    then
        Decision = "Referred";
		
        message(exception,  exception, "North Carolina prepayment penalty not allowed on loan amount <= $150,000");

    end
end	// rule G-IneligiblePP-NCLoanAmt




alias(rule, G-IneligiblePP-NCTerm, "G-Ineligible PP-NC Term");

/* ==========================================================================
 * G-IneligiblePP-NCTerm
 *
 *
 */
rule G-IneligiblePP-NCTerm()
    if(
        (pSubjectPropertyState == "NC") &&
		((pOccupancy == "PrimaryResidence") ||
		(pOccupancy == "SecondaryResidence")) &&
		(PrepayIndicator1st == "Y") &&
		(loanAmount1st > 150000) &&
		(loanAmount1st <= 300000) &&
		(PrepayTerm1st > 24)
      )
    then
        Decision = "Referred";
		
        message(exception,  exception, "North Carolina prepayment penalty max 2 years.");

    end
end	// rule G-IneligiblePP-NCTerm




alias(rule, G-IneligiblePP-NJ, "G-Ineligible PP-NJ");

/* ==========================================================================
 * G-IneligiblePP-NJ
 *
 *
 */
rule G-IneligiblePP-NJ()
    if(
        (pSubjectPropertyState == "NJ") &&
		((PrepayIndicator1st == "Y") ||
		(PrepayIndicator2nd == "Y"))
      )
    then
        Decision = "Referred";
		
        message(exception,  exception, "New Jersey Prepayment Penalty not allowed.");

    end
end	// rule G-IneligiblePP-NJ




alias(rule, G-IneligiblePP-NY2nd, "G-Ineligible PP-NY 2nd");

/* ==========================================================================
 * G-IneligiblePP-NY2nd
 *
 *
 */
rule G-IneligiblePP-NY2nd()
    if(
        (pSubjectPropertyState == "NY") &&
		((pOccupancy == "PrimaryResidence") ||
		(pOccupancy == "SecondaryResidence")) &&
		(rate2nd > 6) &&
		(PrepayTerm2nd > 12)
      )
    then
        Decision = "Referred";
		
        message(exception,  exception, "New York 2nd mortgage max 1 year prepayment term for rate greater than 6.");

    end
end	// rule G-IneligiblePP-NY2nd




alias(rule, G-IneligiblePP-NYARMInitFixedPeriod, "G-Ineligible PP-NY ARM InitFixedPeriod");

/* ==========================================================================
 * G-IneligiblePP-NYARMInitFixedPeriod
 *
 *
 */
rule G-IneligiblePP-NYARMInitFixedPeriod()
    if(
        (pSubjectPropertyState == "NY") &&
		(loanAmount1st < 250000) &&
		((pOccupancy == "PrimaryResidence") ||
		(pOccupancy == "SecondaryResidence")) &&
		((pAmortizationType == "ARM") ||
		(pAmortizationType == "IOARM")) &&
		(((pFirstAdjTerm < 60) &&
		(PrepayTerm1st > 0)) ||
		((pFirstAdjTerm >= 60) &&
		(PrepayTerm1st > 12) &&
		(rate1st > 6)))
      )
    then
        Decision = "Referred";
		
        message(exception,  exception, "Prepayment penalty term not allowed in NY for selected ARM Initial Fixed Period.");

    end
end	// rule G-IneligiblePP-NYARMInitFixedPeriod




alias(rule, G-IneligiblePP-NYTermARM, "G-Ineligible PP-NY Term ARM");

/* ==========================================================================
 * G-IneligiblePP-NYTermARM
 *
 *
 */
rule G-IneligiblePP-NYTermARM()
    if(
        (pSubjectPropertyState == "NY") &&
		(loanAmount1st >= 250000) &&
		((pOccupancy == "PrimaryResidence") ||
		(pOccupancy == "SecondaryResidence")) &&
		(PrepayTerm1st > 12) &&
		((pAmortizationType == "ARM") ||
		(pAmortizationType == "IOARM")) &&
		(rate1st > 6)
      )
    then
        Decision = "Referred";
		
        message(exception,  exception, "New York ARM Max prepay term 1 year for loan amount greater than or equal to $250,000.");

    end
end	// rule G-IneligiblePP-NYTermARM




alias(rule, G-IneligiblePP-NYTermFixed, "G-Ineligible PP-NY Term Fixed");

/* ==========================================================================
 * G-IneligiblePP-NYTermFixed
 *
 *
 */
rule G-IneligiblePP-NYTermFixed()
    if(
        (pSubjectPropertyState == "NY") &&
		((pAmortizationType == "Fixed") ||
		(pAmortizationType == "IOFixed")) &&
		((pOccupancy == "PrimaryResidence") ||
		(pOccupancy == "SecondaryResidence")) &&
		(PrepayTerm1st > 12) &&
		(pLienNumber == 1) &&
		(rate1st > 6)
      )
    then
        Decision = "Referred";
		
        message(exception,  exception, "New York max 1 year prepayment penalty for owner occupied or second home with rate greater than 6.");

    end
end	// rule G-IneligiblePP-NYTermFixed




alias(rule, G-IneligiblePP-OK, "G-Ineligible PP-OK");

/* ==========================================================================
 * G-IneligiblePP-OK
 *
 *
 */
rule G-IneligiblePP-OK()
    if(
        (pSubjectPropertyState == "OK") &&
		(pPurposeOfLoan == "Refinance") &&
		(((PrepayIndicator1st == "Y") &&
		(rate1st > 12)) ||
		((PrepayIndicator2nd == "Y") &&
		(rate2nd > 12)))
      )
    then
        Decision = "Referred";
		
        message(exception,  exception, "Oklahoma prepayment penalty not allowed on refinance with APR > 13%.");

    end
end	// rule G-IneligiblePP-OK




alias(rule, G-IneligiblePP-PA, "G-Ineligible PP-PA");

/* ==========================================================================
 * G-IneligiblePP-PA
 *
 *
 */
rule G-IneligiblePP-PA()
    if(
        (pSubjectPropertyState == "PA") &&
		(((PrepayIndicator1st == "Y") &&
		(loanAmount1st <= 55000)) ||
		((PrepayIndicator2nd == "Y") &&
		(loanAmount2nd <= 55000)))
      )
    then
        Decision = "Referred";
		
        message(exception,  exception, "Pennsylvania prepayment penalty not allowed on loan amount <= $55,000");

    end
end	// rule G-IneligiblePP-PA




alias(rule, G-IneligiblePP-RI, "G-Ineligible PP-RI");

/* ==========================================================================
 * G-IneligiblePP-RI
 *
 *
 */
rule G-IneligiblePP-RI()
    if(
        (pSubjectPropertyState == "RI") &&
		((PrepayTerm1st > 12) ||
		(PrepayTerm2nd > 12))
      )
    then
        Decision = "Referred";
		
        message(exception,  exception, "Rhode Island max 1 year prepayment penalty term.");

    end
end	// rule G-IneligiblePP-RI




alias(rule, G-IneligiblePP-SC1st, "G-Ineligible PP-SC 1st");

/* ==========================================================================
 * G-IneligiblePP-SC1st
 *
 *
 */
rule G-IneligiblePP-SC1st()
    if(
        (pSubjectPropertyState == "SC") &&
		(PrepayIndicator1st == "Y") &&
		(loanAmount1st <= 180000)
      )
    then
        Decision = "Referred";
		
        message(exception,  exception, "South Carolina prepayment penalty not allowed on loan amount less than or equal to $180,000");

    end
end	// rule G-IneligiblePP-SC1st




alias(rule, G-IneligiblePP-SC2nd, "G-Ineligible PP-SC 2nd");

/* ==========================================================================
 * G-IneligiblePP-SC2nd
 *
 *
 */
rule G-IneligiblePP-SC2nd()
    if(
        (pSubjectPropertyState == "SC") &&
		(PrepayIndicator2nd == "Y")
      )
    then
        Decision = "Referred";
		
        message(exception,  exception, "South Carolina prepayment penalty not allowed on 2nd mortgage.");

    end
end	// rule G-IneligiblePP-SC2nd




alias(rule, G-IneligiblePP-TXCO, "G-Ineligible PP-TX CO");

/* ==========================================================================
 * G-IneligiblePP-TXCO
 *
 *
 */
rule G-IneligiblePP-TXCO()
    if(
        (pSubjectPropertyState == "TX") &&
		(pOccupancy == "PrimaryResidence") &&
		(purposeAbbrev == "CO") &&
		((PrepayIndicator1st == "Y") ||
		(PrepayIndicator2nd == "Y"))
      )
    then
        Decision = "Referred";
		
        message(exception,  exception, "Texas prepayment penalty not allowed on cash-out refinance.");

    end
end	// rule G-IneligiblePP-TXCO




alias(rule, G-IneligiblePP-TXNoteRate, "G-Ineligible PP-TX Note Rate");

/* ==========================================================================
 * G-IneligiblePP-TXNoteRate
 *
 *
 */
rule G-IneligiblePP-TXNoteRate()
    if(
        (pSubjectPropertyState == "TX") &&
		(((rate1st > 12) &&
		(PrepayIndicator1st == "Y")) ||
		((rate2nd > 10) &&
		(PrepayIndicator2nd == "Y")))
      )
    then
        Decision = "Referred";
		
        message(exception,  assets, "The prepayment term selected exceeds the max allowed for the state selected.");

    end
end	// rule G-IneligiblePP-TXNoteRate




alias(rule, G-IneligiblePP-UT, "G-Ineligible PP-UT");

/* ==========================================================================
 * G-IneligiblePP-UT
 *
 *
 */
rule G-IneligiblePP-UT()
    if(
        (pSubjectPropertyState == "UT") &&
		(PrepayIndicator2nd == "Y")
      )
    then
        Decision = "Referred";
		
        message(exception,  exception, "Utah prepayment penalty not allowed on second mortgage.");

    end
end	// rule G-IneligiblePP-UT




alias(rule, G-IneligiblePP-VT, "G-Ineligible PP-VT");

/* ==========================================================================
 * G-IneligiblePP-VT
 *
 *
 */
rule G-IneligiblePP-VT()
    if(
        (pSubjectPropertyState == "VT") &&
		((PrepayIndicator1st == "Y") ||
		(PrepayIndicator2nd == "Y"))
      )
    then
        Decision = "Referred";
		
        message(exception,  exception, "Vermont prepayment penalty not allowed.");

    end
end	// rule G-IneligiblePP-VT




alias(rule, G-IneligiblePP-VT2nd, "G-Ineligible PP-VT 2nd");

/* ==========================================================================
 * G-IneligiblePP-VT2nd
 *
 *
 */
rule G-IneligiblePP-VT2nd()
    if(
        (pSubjectPropertyState == "VT") &&
		(pLienNumber == 2) &&
		(rate2nd > 18)
      )
    then
        Decision = "Referred";
		
        message(exception,  exception, "Vermont 2nd Liens cannot exceed 18%.");

    end
end	// rule G-IneligiblePP-VT2nd




alias(rule, G-IneligiblePP-WA, "G-Ineligible PP-WA");

/* ==========================================================================
 * G-IneligiblePP-WA
 *
 *
 */
rule G-IneligiblePP-WA()
    if(
        (pSubjectPropertyState == "WA") &&
		(PrepayIndicator2nd == "Y")
      )
    then
        Decision = "Referred";
		
        message(exception,  exception, "Washington 2nd mortgage prepayment penalty not allowed.");

    end
end	// rule G-IneligiblePP-WA




alias(rule, G-IneligiblePP-WI2nd, "G-Ineligible PP-WI 2nd");

/* ==========================================================================
 * G-IneligiblePP-WI2nd
 *
 *
 */
rule G-IneligiblePP-WI2nd()
    if(
        (pSubjectPropertyState == "WI") &&
		(loanAmount2nd <= 25000) &&
		(PrepayIndicator2nd == "Y")
      )
    then
        Decision = "Referred";
		
        message(exception,  exception, "Wisconsin prepayment penalty not allowed 2nd mortgage with loan amount less than or equal to $25,000.");

    end
end	// rule G-IneligiblePP-WI2nd




alias(rule, G-IneligiblePP-WIARM, "G-Ineligible PP-WI ARM");

/* ==========================================================================
 * G-IneligiblePP-WIARM
 *
 *
 */
rule G-IneligiblePP-WIARM()
    if(
        (pSubjectPropertyState == "WI") &&
		((pAmortizationType == "ARM") ||
		(pAmortizationType == "IOARM")) &&
		(PrepayIndicator1st == "Y")
      )
    then
        Decision = "Referred";
		
        message(exception,  exception, "Wisconsin prepayment penalty not allowed on ARM.");

    end
end	// rule G-IneligiblePP-WIARM




alias(rule, G-IneligiblePP-WV, "G-Ineligible PP-WV");

/* ==========================================================================
 * G-IneligiblePP-WV
 *
 *
 */
rule G-IneligiblePP-WV()
    if(
        (pOccupancy != "Investment") &&
		(pSubjectPropertyState == "WV") &&
		(PrepayIndicator2nd == "Y")
      )
    then
        Decision = "Referred";
		
        message(exception,  exception, "West Virginia does not allow a prepayment penalty on 2nd Liens.");

    end
end	// rule G-IneligiblePP-WV




alias(rule, G-IneligiblePP-WY1st, "G-Ineligible PP-WY 1st");

/* ==========================================================================
 * G-IneligiblePP-WY1st
 *
 *
 */
rule G-IneligiblePP-WY1st()
    if(
        (pSubjectPropertyState == "WY") &&
		(PrepayIndicator1st == "Y") &&
		(rate1st > 17)
      )
    then
        Decision = "Referred";
		
        message(exception,  exception, "Wyoming prepayment penalty not allowed on APR greater than 18%.");

    end
end	// rule G-IneligiblePP-WY1st




alias(rule, G-IneligiblePP-WY2nd, "G-Ineligible PP-WY 2nd");

/* ==========================================================================
 * G-IneligiblePP-WY2nd
 *
 *
 */
rule G-IneligiblePP-WY2nd()
    if(
        (pSubjectPropertyState == "WY") &&
		(PrepayIndicator2nd == "Y")
      )
    then
        Decision = "Referred";
		
        message(exception,  exception, "Wyoming prepayment penalty not allowed on second mortgage.");

    end
end	// rule G-IneligiblePP-WY2nd





/* ==========================================================================
 * G-IneligiblePPNY2ndBalloons
 *
 *
 */
rule G-IneligiblePPNY2ndBalloons()
    if(
        (pSubjectPropertyState == "NY") &&
		(pCombo > 0) &&
		((f40due30 == "Y") ||
		(f50due30 == "Y")) &&
		(PrepayTerm2nd > 0)
      )
    then
        Decision = "Referred";
		
        message(exception,  exception, "Prepayment penalty term not allowed for selected balloon term on New York 2nd mortgages.");

    end
end	// rule G-IneligiblePPNY2ndBalloons




alias(rule, G-IneligiblePPTerm-MN, "G-Ineligible PP Term-MN");

/* ==========================================================================
 * G-IneligiblePPTerm-MN
 *
 *
 */
rule G-IneligiblePPTerm-MN()
    if(
        (pSubjectPropertyState == "MN") &&
		(cvProgram == "Prime-Option ARM") &&
		(PrepayIndicator1st == "Y")
      )
    then
        Decision = "Referred";
		
        message(exception,  assets, "The prepayment term exceeds the max allowed for this product.");

    end
end	// rule G-IneligiblePPTerm-MN




alias(rule, G-IneligiblePPTerm-NM, "G-Ineligible PP Term-NM");

/* ==========================================================================
 * G-IneligiblePPTerm-NM
 *
 *
 */
rule G-IneligiblePPTerm-NM()
    if(
        (pSubjectPropertyState == "NM") &&
		((PrepayIndicator1st == "Y") ||
		(PrepayIndicator2nd == "Y"))
      )
    then
        Decision = "Referred";
		
        message(exception,  exception, "New Mexico prepayment penalty not allowed.");

    end
end	// rule G-IneligiblePPTerm-NM




alias(rule, G-IneligiblePPTerm2nd-MN, "G-Ineligible PP Term 2nd-MN");

/* ==========================================================================
 * G-IneligiblePPTerm2nd-MN
 *
 *
 */
rule G-IneligiblePPTerm2nd-MN()
    if(
        (pSubjectPropertyState == "MN") &&
		(pCombo > 0) &&
		(pLienNumber == 2) &&
		(PrepayIndicator2nd == "Y") &&
		(pLoanAmount < 100000)
      )
    then
        Decision = "Referred";
		
        message(exception,  exception, "The prepayment term exceeds the max allowed for MN 2nds under $100000.");

    end
end	// rule G-IneligiblePPTerm2nd-MN




alias(rule, G-IneligiblePPTerm2ndMD, "G-Ineligible PP Term 2nd MD");

/* ==========================================================================
 * G-IneligiblePPTerm2ndMD
 *
 *
 */
rule G-IneligiblePPTerm2ndMD()
    if(
        (pSubjectPropertyState == "MD") &&
		(pCombo > 0) &&
		(pLienNumber == 2) &&
		(PrepayIndicator2nd == "Y")
      )
    then
        Decision = "Referred";
		
        message(exception,  exception, "Prepayment penalty is NOT allowed for a 2nd mtg in the State of MD");

    end
end	// rule G-IneligiblePPTerm2ndMD




alias(rule, G-IneligiblePrepayTermHUDRepoRule, "G-Ineligible Prepay Term HUDRepo Rule");

/* ==========================================================================
 * G-IneligiblePrepayTermHUDRepoRule
 *
 *
 */
rule G-IneligiblePrepayTermHUDRepoRule()
    if(
        (pHudRepo == "Y") &&
		(pPrepayTerm-Loan < 1)
      )
    then
        Decision = "Referred";
		
        message(exception,  assets, "HUD Repo Homes require a minimum of 1 year prepay.");

    end
end	// rule G-IneligiblePrepayTermHUDRepoRule





/* ==========================================================================
 * G-IneligiblePriResNULL
 *
 *
 */
rule G-IneligiblePriResNULL()
    if(
        (RetainResidence == "YES") &&
		(pCurrentResidencePropertyStatus == "NULL")
      )
    then
        Decision = "Referred";
		
        message(exception,  exception, "Property Status and Primary Residence indicator must be completed on the (REO) Real Estate Owned Screen.");

    end
end	// rule G-IneligiblePriResNULL





/* ==========================================================================
 * G-IneligiblePriResRetained
 *
 *
 */
rule G-IneligiblePriResRetained()
    if(
        (RetainResidence == "YES") &&
		((pCurrentResidencePropertyStatus == "Retained") ||
		(pCurrentResidencePropertyStatus == "Rental"))
      )
    then
        Decision = "Referred";
		
        message(exception,  exception, "Retention of Residency is not allowed for the selected doc type.");

    end
end	// rule G-IneligiblePriResRetained




alias(rule, G-IneligiblePropTypeMHLBRule, "G-Ineligible Prop Type MHLB Rule");

/* ==========================================================================
 * G-IneligiblePropTypeMHLBRule
 *
 *
 */
rule G-IneligiblePropTypeMHLBRule()
    if(
        (pModelHomeLeaseback == "Y") &&
		(pPropertyType != "SingleFamily") &&
		(pPropertyType != "PUD") &&
		((pPropertyType != "LowRiseCondo") ||
		((pPropertyType == "LowRiseCondo") &&
		(pNonWarrantableCondo == "Y"))) &&
		((pPropertyType != "MidRiseCondo") ||
		((pPropertyType == "MidRiseCondo") &&
		(pNonWarrantableCondo == "Y"))) &&
		((pPropertyType != "HighRiseCondo") ||
		((pPropertyType == "HighRiseCondo") &&
		(pNonWarrantableCondo == "Y")))
      )
    then
        Decision = "Referred";
		
        message(exception,  assets, "Selected property type is not eligible for a Model Home Leaseback.");

    end
end	// rule G-IneligiblePropTypeMHLBRule




alias(rule, G-IneligibleReservesReqd, "G-Ineligible Reserves Reqd");

/* ==========================================================================
 * G-IneligibleReservesReqd
 *
 *
 */
rule G-IneligibleReservesReqd()
    if(
        (pLoanAmount != pLoanAmount) &&
		(Reserves < ReservesReqdAmt) &&
		(pDocumentType != "NINA") &&
		(pDocumentType != "No Doc")
      )
    then
        
        condition(asset, docs, "Reserves do not meet guideline requirement, mitigating factors must be present.");

    end
end	// rule G-IneligibleReservesReqd





/* ==========================================================================
 * G-IneligibleSCInterestRate2nd
 *
 *
 */
rule G-IneligibleSCInterestRate2nd()
    if(
        (pSubjectPropertyState == "SC") &&
		(pLienNumber == 2) &&
		(rate2nd > 18)
      )
    then
        Decision = "Referred";
		
        message(exception,  exception, "2nd liens in South Carolina cannot exceed 18% APR.");

    end
end	// rule G-IneligibleSCInterestRate2nd




alias(rule, G-IneligibleSecondaryFinSOaProgram, "G-Ineligible SecondaryFinSOaProgram");

/* ==========================================================================
 * G-IneligibleSecondaryFinSOaProgram
 *
 *
 */
rule G-IneligibleSecondaryFinSOaProgram()
    if(
        (pLienNumber == 1) &&
		(pOutsideFinancing > 0) &&
		(amortType1st == "5 Yr OptA")
      )
    then
        Decision = "Referred";
		
        message(exception,  exception, "Secure Option Arm is not allowed with new simultaneous financing");

    end
end	// rule G-IneligibleSecondaryFinSOaProgram




alias(rule, G-IneligibleStatesRtnChannel, "G-Ineligible StatesRtnChannel");

/* ==========================================================================
 * G-IneligibleStatesRtnChannel
 *
 *
 */
rule G-IneligibleStatesRtnChannel()
    if(
        (pUserType == "Retention") &&
		((pSubjectPropertyState == "WV") ||
		(pSubjectPropertyState == "LA"))
      )
    then
        Decision = "Referred";
		
        message(exception,  exception, " Ineligible property state, refer to guidelines for retention users. ");

    end
end	// rule G-IneligibleStatesRtnChannel





/* ==========================================================================
 * G-IneligibleTexasCORefiMinFico
 *
 *
 */
rule G-IneligibleTexasCORefiMinFico()
    if(
        (pSubjectPropertyState == "TX") &&
		(purposeAbbrev == "CO") &&
		(creditScore < 660)
      )
    then
        Decision = "Referred";
		
        message(exception,  exception, "Minimum Credit score must be 660 or greater for a Texas CashOut Refi.");

    end
end	// rule G-IneligibleTexasCORefiMinFico




alias(rule, G-IneligibleTexasInterestRate2nd, "G-Ineligible TexasInterestRate2nd");

/* ==========================================================================
 * G-IneligibleTexasInterestRate2nd
 *
 *
 */
rule G-IneligibleTexasInterestRate2nd()
    if(
        (pSubjectPropertyState == "TX") &&
		(pLienNumber == 2) &&
		(rate2nd > 18)
      )
    then
        Decision = "Referred";
		
        message(exception,  exception, "2nd liens in Texas cannot exceed 18% interest rate");

    end
end	// rule G-IneligibleTexasInterestRate2nd




alias(rule, G-IneligibleThresholdMaxRate1st, "G-Ineligible ThresholdMaxRate1st");

/* ==========================================================================
 * G-IneligibleThresholdMaxRate1st
 *
 *
 */
rule G-IneligibleThresholdMaxRate1st()
    if(
        (rate1st > ThresholdMaxRate1st)
      )
    then
        Decision = "Referred";
		
        message(exception,  exception, "1st Lien Rate of <DPM>Rate 1st</DPM> exceeds max APR threshold rate of <DPM>ThresholdMaxRate1st</DPM>.  Please reduce requested price and resubmit or contact your Account Executive.");

    end
end	// rule G-IneligibleThresholdMaxRate1st




alias(rule, G-IneligibleThresholdMaxRate2nd, "G-Ineligible ThresholdMaxRate2nd");

/* ==========================================================================
 * G-IneligibleThresholdMaxRate2nd
 *
 *
 */
rule G-IneligibleThresholdMaxRate2nd()
    if(
        (rate2nd > ThresholdMaxRate2nd)
      )
    then
        Decision = "Referred";
		
        message(exception,  exception, "2nd Lien Rate of <DPM>Rate 2nd</DPM> exceeds max APR threshold rate of <DPM>ThresholdMaxRate2nd</DPM>.  Please reduce requested price and resubmit or contact your Account Executive.");

    end
end	// rule G-IneligibleThresholdMaxRate2nd




alias(rule, G-IneligibleTXCashOutNonWarrCondo, "G-Ineligible TXCashOutNonWarrCondo");

/* ==========================================================================
 * G-IneligibleTXCashOutNonWarrCondo
 *
 *
 */
rule G-IneligibleTXCashOutNonWarrCondo()
    if(
        (pSubjectPropertyState == "TX") &&
		(purposeAbbrev == "CO") &&
		(pNonWarrantableCondo == "Y") &&
		((pPropertyType == "HighRiseCondo") ||
		(pPropertyType == "MidRiseCondo") ||
		(pPropertyType == "LowRiseCondo"))
      )
    then
        Decision = "Referred";
		
        message(exception,  exception, "All condo types for TX Cash Out Refinance must be FNMA/FHLMC warrantable.");

    end
end	// rule G-IneligibleTXCashOutNonWarrCondo




alias(rule, G-InheritedPropCOConditionRule, "G-Inherited Prop CO Condition Rule");

/* ==========================================================================
 * G-InheritedPropCOConditionRule
 *
 *
 */
rule G-InheritedPropCOConditionRule()
    if(
        (pInheritedProperty == "Y") &&
		(purposeAbbrev == "CO") &&
		(LTV <= 70)
      )
    then
        
        condition(property, docs, "Enhanced Desk Review in addition to the full appraisal is required.");

    end
end	// rule G-InheritedPropCOConditionRule




alias(rule, G-InheritedPropConditionRule, "G-Inherited Prop Condition Rule");

/* ==========================================================================
 * G-InheritedPropConditionRule
 *
 *
 */
rule G-InheritedPropConditionRule()
    if(
        (pInheritedProperty == "Y")
      )
    then
        
        condition(property, docs, "Owner must have clear title and percentage of ownership by heirs must be demonstrated.");
        condition(property, docs, "Title can not currently be held in probate.");

    end
end	// rule G-InheritedPropConditionRule





/* ==========================================================================
 * G-InheritedPropMaxCltvCo
 *
 *
 */
rule G-InheritedPropMaxCltvCo()
    if(
        (pInheritedProperty == "Y") &&
		(purposeAbbrev == "CO") &&
		(CLTV > 70)
      )
    then
        maxCLTV = 70;
		

    end
end	// rule G-InheritedPropMaxCltvCo





/* ==========================================================================
 * G-InheritedPropMaxLtvCo
 *
 *
 */
rule G-InheritedPropMaxLtvCo()
    if(
        (pInheritedProperty == "Y") &&
		(purposeAbbrev == "CO") &&
		(LTV > 70)
      )
    then
        maxLTV = 70;
		

    end
end	// rule G-InheritedPropMaxLtvCo




alias(rule, G-InheritedPropRTConditionRule, "G-Inherited Prop RT Condition Rule");

/* ==========================================================================
 * G-InheritedPropRTConditionRule
 *
 *
 */
rule G-InheritedPropRTConditionRule()
    if(
        (pInheritedProperty == "Y") &&
		(purposeAbbrev == "RT") &&
		(LTV >= 80)
      )
    then
        
        condition(property, docs, "Enhanced Desk Review in addition to the full appraisal is required.");

    end
end	// rule G-InheritedPropRTConditionRule




alias(rule, G-Initialization-1, "G-Initialization.1");

/* ==========================================================================
 * G-Initialization-1
 *
 *
 */
rule G-Initialization-1()
    if(
        (pNo-ofApplicants > 0)
      )
    then
        ActualDisposableIncome = 0;
		ActualDisposableIncome1 = 0;
		ActualDisposableIncome2 = 0;
		ActualDisposableIncome3 = 0;
		ActualDisposableIncome4 = 0;
		ActualDisposableIncome5 = 0;
		appraisalvalue = 0;
		ApplyMarginAdjs = "Y";
		AssetReqd = 0;
		cvBaseRate = 0;
		CLTV = 0;
		creditScore = 0;
		DocTypeAbbrev = "NA";
		Decision = "Approved";
		dExtensionPeriod1st = 0;
		DisposableIncome = 0;
		dExtensionPeriod2nd = 0;
		DTI = 0;
		fBkTdlCk = 0;
		f40due30 = "N";
		f50due30 = "N";
		fEnableExceptionPricing = "TRUE";
		fEnableExtensions = "TRUE";
		fEnablePeg = "TRUE";
		fIsFullDoc = "FALSE";
		fIsStatedDoc = "FALSE";
		fIsSubFin = "FALSE";
		fNonTraditionalTLReqd = "N";
		fTLNotReqd-2 = "N";
		fTLNotReqd-3 = "N";
		fTLNotReqd-4 = "N";
		fTLNotReqd-5 = "N";
		ForeignNationalIndicator = "N";
		FourMoReserves = 0;
		FTHB = "Y";
		globalParam = 1;
		isRestrictedState = 0;
		loanAmount2nd = 0;
		LoanBalance-1 = 0;
		LoanTerm2nd = 0;
		lockPeriod1st = 0;
		lockPeriod2nd = 0;
		LTV = 0;
		MaxCashOut = "NA";
		maxCLTV = 0;
		MaxCLTV2 = 0;
		MaxCombinedLnAmt = -1;
		maxDTI = 0;
		MaxPaymentShock = -1;
		cvMaxPrice = 0;
		maxLoanAmount = 0;
		maxLTV = 0;
		cvMaxPPRate = "NA";
		minLoanAmount = 0;
		MinMaxAbbrev = "NA";
		MinReservesRequired = 0;
		MinScoreCombo = 0;
		OneUnitFlag = "N";
		OptA2YrPPStateFlag = "N";
		PaymentShock = 0;
		PITI = 0;
		PrepayTerm2nd = 0;
		programType = "NA";
		propertyType = "NA";
		PropertyTypeAbbrev = "NA";
		purposeAbbrev = "NA";
		cvRate = 0;
		Reserves = 0;
		ReservesParameter = 1;
		restrictionFlags = 0;
		ScoreCheck = "Pass";
		SixMoReserves = 0;
		SubjectPropertyZipcode = 0;
		tmp_MaxCltv = 0;
		tmp_MaxLtv = 0;
		TotalFCBKCCCSLast6Yr = 0;
		TotalIncomeAmt = 0;
		TotalIncomeAmt1 = 0;
		TotalIncomeAmt2 = 0;
		TotalIncomeAmt3 = 0;
		TotalIncomeAmt4 = 0;
		TotalIncomeAmt5 = 0;
		ThresholdGenericState = 1;
		ThresholdNotRequired1st = 0;
		ThresholdNotRequired2nd = 0;
		tmpThresholdNotRequired = 0;
		ThresholdIndex1st = 0;
		ThresholdIndex2nd = 0;
		ThresholdMaxRate1st = 0;
		ThresholdMaxRate2nd = 0;
		TotalDisposableIncome = 0;
		YieldAdj1st = 0;
		YieldAdj2nd = 0;
		RetainResidence = "NO";
		twoMoReserves = 0;
		PrBorrFICOAdvAnnualIncome = 0;
		fivePercOfLA = 0;
		fLimitLTVZip = 0;
		fLimitLTV80Zip = 0;
		fLimitLTV85Zip = 0;
		fLimitRuralZip = 0;
		

    end
end	// rule G-Initialization-1




alias(rule, G-InitializationCalcs, "G-Initialization Calcs");

/* ==========================================================================
 * G-InitializationCalcs
 *
 *
 */
rule G-InitializationCalcs()
    if(
        (pNo-ofApplicants > 0)
      )
    then
        programName = pProgramName;
		cvMtgNoUFMIP = pLoanAmount;
		ProposedExpenses = pProposedHazardInsurance + pProposedRealEstateTaxes + pProposedHoaDues + pProposedMtgInsurance + pProposedOtherHousingExpenses + pSubFinancingPayment + pProposedSubjectPropertyPayment + pProposedFloodInsurance;
		acquisitionCost = pPurchasePrice + pAlterations;
		combinedLoanAmount = pLoanAmount + pOtherLoanAmount;
		IneligibleStatedInc = pSocialSecurityDisabilityIncome-AllApp + pPensionRetirementIncome-AllApp + pNotesReceivableInstallment-AllApp + pREMortDiffIncome-AllApp + pDividendsInterest-AllApp + pTrustIncome-AllApp + pFosterCareIncome-AllApp + pAlimonyChildSupportIncome-AllApp + pTrailingSpouseIncome;
		IneligibleFullDocInc = pTrailingSpouseIncome;
		IneligibleLimitedDocInc = pTrailingSpouseIncome;
		

    end
end	// rule G-InitializationCalcs





/* ==========================================================================
 * G-Integrate-NormalizeBk13
 *
 *
 */
rule G-Integrate-NormalizeBk13()
    if(
        (BKCh13 > 0)
      )
    then
        BKCh13 = "Y";
		

    else
        BKCh13 = "N";
		BKCh13FiledDate = "00000000";
		

    end
end	// rule G-Integrate-NormalizeBk13





/* ==========================================================================
 * G-Integrate-NormalizeBk7
 *
 *
 */
rule G-Integrate-NormalizeBk7()
    if(
        (BKCh7 > 0)
      )
    then
        BKCh7 = "Y";
		

    else
        BKCh7 = "N";
		BKCh7FiledDate = "00000000";
		

    end
end	// rule G-Integrate-NormalizeBk7





/* ==========================================================================
 * G-IntegrateBKs
 *
 *
 */
rule G-IntegrateBKs()
    if(
        (pLoanAmount > 0)
      )
    then
        BKCh7 = pBankruptcyChapter7;
		BKCh13 = pBankruptcyChapter13;
		BKCh7FiledDate = pCh7FiledDate;
		BKCh13FiledDate = pCh13FiledDate;
		

    end
end	// rule G-IntegrateBKs





/* ==========================================================================
 * G-IntegrateForeclosures
 *
 *
 */
rule G-IntegrateForeclosures()
    if(
        (pLoanAmount > 0)
      )
    then
        ForeclosureFiledDate = pForeclosureDate;
		

    end
end	// rule G-IntegrateForeclosures





/* ==========================================================================
 * G-IntegrateMtgLates
 *
 *
 */
rule G-IntegrateMtgLates()
    if(
        (pLoanAmount > 0)
      )
    then
        MortLate30Days = pMtgConsumer30Last12noDerogs;
		MortLate60Days = pMtg60Last12inTLNwnoDerogs;
		MortLate90Days = pMtg90Last12inTLNwnoDerogs;
		MortLate120Days = pMtg120Last12inTLNwnoDerogs;
		

    end
end	// rule G-IntegrateMtgLates





/* ==========================================================================
 * G-InvalidUserType
 *
 *
 */
rule G-InvalidUserType()
    if(
        (pUserType != "Broker") &&
		(pUserType != "Correspondent") &&
		(pUserType != "Retention") &&
		(pUserType != "Conduit")
      )
    then
        tmp1 = dUserTypeNotFound;
		

    end
end	// rule G-InvalidUserType





/* ==========================================================================
 * G-IsNonTradationalTLReqd
 *
 *
 */
rule G-IsNonTradationalTLReqd()
    if(
        (((pCitizenshipBorr1 != "ForeignNational") &&
		(pValidTradtlTrades-24MoHistActive24MosBorr1 < 3)) ||
		((pBorr2ID > 0) &&
		(pCitizenshipBorr2 != "ForeignNational") &&
		(pValidTradtlTrades-24MoHistActive24MosBorr2 < 3)) ||
		((pBorr3ID > 0) &&
		(pCitizenshipBorr3 != "ForeignNational") &&
		(pValidTradtlTrades-24MoHistActive24MosBorr3 < 3)) ||
		((pBorr4ID > 0) &&
		(pCitizenshipBorr4 != "ForeignNational") &&
		(pValidTradtlTrades-24MoHistActive24MosBorr4 < 3)) ||
		((pBorr5ID > 0) &&
		(pCitizenshipBorr5 != "ForeignNational") &&
		(pValidTradtlTrades-24MoHistActive24MosBorr5 < 3)))
      )
    then
        fNonTraditionalTLReqd = "Y";
		

    end
end	// rule G-IsNonTradationalTLReqd




alias(rule, G-IsThresholdNotRequiredChicagoRule1, "G-IsThresholdNotRequiredChicago Rule 1");

/* ==========================================================================
 * G-IsThresholdNotRequiredChicagoRule1
 *
 *
 */
rule G-IsThresholdNotRequiredChicagoRule1()
    if(
        (pSubjectPropertyState == "IL") &&
		(pSubjectPropertyCity == "Chicago") &&
		(pLoanAmount > 250000)
      )
    then
        ThresholdNotRequired1st = 1;
		ThresholdNotRequired2nd = 1;
		

    end
end	// rule G-IsThresholdNotRequiredChicagoRule1




alias(rule, G-IsThresholdNotRequiredChicagoRule2, "G-IsThresholdNotRequiredChicago Rule 2");

/* ==========================================================================
 * G-IsThresholdNotRequiredChicagoRule2
 *
 *
 */
rule G-IsThresholdNotRequiredChicagoRule2()
    if(
        (pSubjectPropertyState == "IL") &&
		(pSubjectPropertyCity == "Chicago") &&
		(pLoanAmount <= 250000)
      )
    then
        ThresholdNotRequired1st = 0;
		ThresholdNotRequired2nd = 0;
		

    end
end	// rule G-IsThresholdNotRequiredChicagoRule2





/* ==========================================================================
 * G-IsThresholdNotRequiredLoanAmt
 *
 *
 */
rule G-IsThresholdNotRequiredLoanAmt()
    if(
        (ThresholdGenericState == 0)
      )
    then
        tmpThresholdNotRequired = lookup("G-ThresholdNotRequiredLoanAmt LK", pSubjectPropertyState, pLoanAmount);
		ThresholdNotRequired1st = ThresholdNotRequired1st + tmpThresholdNotRequired;
		ThresholdNotRequired2nd = ThresholdNotRequired2nd + tmpThresholdNotRequired;
		

    else
        tmpThresholdNotRequired = lookup("G-ThresholdNotReqGenericLoanAmt LK", globalParam, pLoanAmount);
		ThresholdNotRequired1st = ThresholdNotRequired1st + tmpThresholdNotRequired;
		ThresholdNotRequired2nd = ThresholdNotRequired2nd + tmpThresholdNotRequired;
		

    end
end	// rule G-IsThresholdNotRequiredLoanAmt





/* ==========================================================================
 * G-IsThresholdNotRequiredOccupancy
 *
 *
 */
rule G-IsThresholdNotRequiredOccupancy()
    if(
        (ThresholdGenericState == 0)
      )
    then
        tmpThresholdNotRequired = lookup("G-ThresholdNotRequiredOccupancy LK", pSubjectPropertyState, pOccupancy);
		ThresholdNotRequired1st = ThresholdNotRequired1st + tmpThresholdNotRequired;
		ThresholdNotRequired2nd = ThresholdNotRequired2nd + tmpThresholdNotRequired;
		

    else
        tmpThresholdNotRequired = lookup("G-ThresholdNotReqGenericOccupancy LK", globalParam, pOccupancy);
		ThresholdNotRequired1st = ThresholdNotRequired1st + tmpThresholdNotRequired;
		ThresholdNotRequired2nd = ThresholdNotRequired2nd + tmpThresholdNotRequired;
		

    end
end	// rule G-IsThresholdNotRequiredOccupancy





/* ==========================================================================
 * G-IsThresholdNotRequiredProvidence
 *
 *
 */
rule G-IsThresholdNotRequiredProvidence()
    if(
        (pSubjectPropertyState == "RI") &&
		(pSubjectPropertyCity == "Providence")
      )
    then
        ThresholdNotRequired1st = 0;
		ThresholdNotRequired2nd = 0;
		

    end
end	// rule G-IsThresholdNotRequiredProvidence





/* ==========================================================================
 * G-IsThresholdNotRequiredPurpose1st
 *
 *
 */
rule G-IsThresholdNotRequiredPurpose1st()
    if(
        (ThresholdGenericState == 0)
      )
    then
        tmpThresholdNotRequired = lookup("G-ThresholdNotRequiredPurpose1st LK", pSubjectPropertyState, pPurposeOfLoan);
		ThresholdNotRequired1st = ThresholdNotRequired1st + tmpThresholdNotRequired;
		

    else
        tmpThresholdNotRequired = lookup("G-ThresholdNotReqGenericPurpose1st LK", globalParam, pPurposeOfLoan);
		ThresholdNotRequired1st = ThresholdNotRequired1st + tmpThresholdNotRequired;
		

    end
end	// rule G-IsThresholdNotRequiredPurpose1st





/* ==========================================================================
 * G-IsThresholdNotRequiredPurpose2nd
 *
 *
 */
rule G-IsThresholdNotRequiredPurpose2nd()
    if(
        (ThresholdGenericState == 0)
      )
    then
        tmpThresholdNotRequired = lookup("G-ThresholdNotRequiredPurpose2nd LK", pSubjectPropertyState, pRateSheetDate2);
		ThresholdNotRequired2nd = ThresholdNotRequired2nd + tmpThresholdNotRequired;
		

    else
        tmpThresholdNotRequired = lookup("G-ThresholdNotReqGenericPurpose2nd LK", globalParam, pPurposeOfLoan);
		ThresholdNotRequired2nd = ThresholdNotRequired2nd + tmpThresholdNotRequired;
		

    end
end	// rule G-IsThresholdNotRequiredPurpose2nd





/* ==========================================================================
 * G-IsThresholdNotRequiredTexas
 *
 *
 */
rule G-IsThresholdNotRequiredTexas()
    if(
        (pSubjectPropertyState == "TX") &&
		(pLoanAmount <= 20000) &&
		(pPurposeOfLoan == "Purchase")
      )
    then
        ThresholdNotRequired1st = 1;
		ThresholdNotRequired2nd = 1;
		

    end
end	// rule G-IsThresholdNotRequiredTexas




alias(rule, G-LTVCLTVCalc, "G-LTV CLTV Calc");

/* ==========================================================================
 * G-LTVCLTVCalc
 *
 *
 */
rule G-LTVCLTVCalc()
    if(
        (pLoanAmount > 0)
      )
    then
        LTV = (pLoanAmount / propertyValue) * 100;
		CLTV = ((pLoanAmount + pOtherFinancing) / propertyValue) * 100;
		

    end
end	// rule G-LTVCLTVCalc




alias(rule, G-LTVCLTVRe-CalcforCO, "G-LTV CLTV Re-Calc for CO");

/* ==========================================================================
 * G-LTVCLTVRe-CalcforCO
 *
 *
 */
rule G-LTVCLTVRe-CalcforCO()
    if(
        (pLoanAmount > 0)
      )
    then
        LTV = (pLoanAmount / propertyValue) * 100;
		CLTV = ((pLoanAmount + pOtherFinancing) / propertyValue) * 100;
		

    end
end	// rule G-LTVCLTVRe-CalcforCO




alias(rule, G-MarginAdjustmentsInit-1, "G-Margin Adjustments Init.1");

/* ==========================================================================
 * G-MarginAdjustmentsInit-1
 *
 *
 */
rule G-MarginAdjustmentsInit-1()
    if(
        (pLoanAmount > 0)
      )
    then
        marginAdj-40YrTerm = 0;
		marginAdj-CashOut = 0;
		marginAdj-CLTV = 0;
		marginAdj-DocumentType = 0;
		marginAdj-FICO = 0;
		marginAdj-LoanAmount = 0;
		marginAdj-LTV = 0;
		marginAdj-NegAm1st = 0;
		marginAdj-NewYorkProperties = 0;
		marginAdj-NoEscrow = 0;
		marginAdj-Price = 0;
		marginAdj-PropertyType = 0;
		marginAdj-Occupancy = 0;
		marginAdj-NumberOfUnits = 0;
		marginAdj-Total = 0;
		

    end
end	// rule G-MarginAdjustmentsInit-1





/* ==========================================================================
 * G-MaxFloridaCondoCLtv
 *
 *
 */
rule G-MaxFloridaCondoCLtv()
    if(
        (pSubjectPropertyState == "FL") &&
		(cvProgram != "Subprime") &&
		((pPropertyType == "HighRiseCondo") ||
		(pPropertyType == "MidRiseCondo") ||
		(pPropertyType == "LowRiseCondo"))
      )
    then
        maxLTV = maxLTV - 10;
		maxCLTV = maxCLTV - 10;
		

    end
end	// rule G-MaxFloridaCondoCLtv





/* ==========================================================================
 * G-MaxLTV80Zip
 *
 *
 */
rule G-MaxLTV80Zip()
    if(
        (maxLTV > 80) &&
		(fLimitLTV80Zip == 1)
      )
    then
        maxLTV = 80;
		maxCLTV = 80;
		
        message(observation, "Subject Property is within the MSA boundaries. Max LTV/CLTV is 80%.");

    end
end	// rule G-MaxLTV80Zip





/* ==========================================================================
 * G-MaxLTV85Zip
 *
 *
 */
rule G-MaxLTV85Zip()
    if(
        (maxLTV >= 85) &&
		(fLimitLTV85Zip == 1)
      )
    then
        maxLTV = maxLTV - 5;
		maxCLTV = maxCLTV - 5;
		
        message(observation, "Subject Property is within the MSA boundaries. Reducing Program Max LTV/CLTV by 5%");

    end
end	// rule G-MaxLTV85Zip




alias(rule, G-MaxPPNoteRateCO, "G-Max PP Note Rate CO");

/* ==========================================================================
 * G-MaxPPNoteRateCO
 *
 *
 */
rule G-MaxPPNoteRateCO()
    if(
        (pSubjectPropertyState == "CO")
      )
    then
        cvMaxPPRate = 11;
		

    end
end	// rule G-MaxPPNoteRateCO




alias(rule, G-MaxPPNoteRateFL, "G-Max PP Note Rate FL");

/* ==========================================================================
 * G-MaxPPNoteRateFL
 *
 *
 */
rule G-MaxPPNoteRateFL()
    if(
        (pSubjectPropertyState == "FL") &&
		(pLienNumber == 2)
      )
    then
        cvMaxPPRate = 17.99;
		

    end
end	// rule G-MaxPPNoteRateFL




alias(rule, G-MaxPPNoteRateMD, "G-Max PP Note Rate MD");

/* ==========================================================================
 * G-MaxPPNoteRateMD
 *
 *
 */
rule G-MaxPPNoteRateMD()
    if(
        (pSubjectPropertyState == "MD") &&
		(pLienNumber == 1) &&
		(PrepayIndicator1st == "Y")
      )
    then
        cvMaxPPRate = 7.99;
		

    end
end	// rule G-MaxPPNoteRateMD




alias(rule, G-MaxPPNoteRateME, "G-Max PP Note Rate ME");

/* ==========================================================================
 * G-MaxPPNoteRateME
 *
 *
 */
rule G-MaxPPNoteRateME()
    if(
        (pSubjectPropertyState == "ME") &&
		(pLienNumber == 2)
      )
    then
        cvMaxPPRate = 16;
		

    end
end	// rule G-MaxPPNoteRateME




alias(rule, G-MaxPPNoteRateNY2nd, "G-Max PP Note Rate NY 2nd");

/* ==========================================================================
 * G-MaxPPNoteRateNY2nd
 *
 *
 */
rule G-MaxPPNoteRateNY2nd()
    if(
        (pSubjectPropertyState == "NY") &&
		(pLienNumber == 2) &&
		((pOccupancy == "PrimaryResidence") ||
		(pOccupancy == "SecondaryResidence")) &&
		(PrepayTerm1st > 12)
      )
    then
        cvMaxPPRate = 6;
		

    end
end	// rule G-MaxPPNoteRateNY2nd




alias(rule, G-MaxPPNoteRateNYARM, "G-Max PP Note Rate NY ARM");

/* ==========================================================================
 * G-MaxPPNoteRateNYARM
 *
 *
 */
rule G-MaxPPNoteRateNYARM()
    if(
        (pSubjectPropertyState == "NY") &&
		(pLienNumber == 1) &&
		(loanAmount1st >= 250000) &&
		(PrepayTerm1st > 12) &&
		((pAmortizationType == "ARM") ||
		(pAmortizationType == "IOARM"))
      )
    then
        cvMaxPPRate = 6;
		

    end
end	// rule G-MaxPPNoteRateNYARM




alias(rule, G-MaxPPNoteRateNYFixed, "G-Max PP Note Rate NY Fixed");

/* ==========================================================================
 * G-MaxPPNoteRateNYFixed
 *
 *
 */
rule G-MaxPPNoteRateNYFixed()
    if(
        (pSubjectPropertyState == "NY") &&
		(pLienNumber == 1) &&
		((pOccupancy == "PrimaryResidence") ||
		(pOccupancy == "SecondaryResidence")) &&
		((pAmortizationType == "Fixed") ||
		(pAmortizationType == "IOFixed")) &&
		(PrepayTerm1st > 12)
      )
    then
        cvMaxPPRate = 6;
		

    end
end	// rule G-MaxPPNoteRateNYFixed




alias(rule, G-MaxPPNoteRateOK, "G-Max PP Note Rate OK");

/* ==========================================================================
 * G-MaxPPNoteRateOK
 *
 *
 */
rule G-MaxPPNoteRateOK()
    if(
        (pSubjectPropertyState == "OK") &&
		(pPurposeOfLoan == "Refinance")
      )
    then
        cvMaxPPRate = 12;
		

    end
end	// rule G-MaxPPNoteRateOK




alias(rule, G-MaxPPNoteRateRule1, "G-Max PP Note Rate Rule 1");

/* ==========================================================================
 * G-MaxPPNoteRateRule1
 *
 *
 */
rule G-MaxPPNoteRateRule1()
    if(
        (pSubjectPropertyState == "CO") &&
		(pLienNumber == 2)
      )
    then
        cvMaxPPRate = 11;
		

    end
end	// rule G-MaxPPNoteRateRule1




alias(rule, G-MaxPPNoteRateRule2, "G-Max PP Note Rate Rule 2");

/* ==========================================================================
 * G-MaxPPNoteRateRule2
 *
 *
 */
rule G-MaxPPNoteRateRule2()
    if(
        (pSubjectPropertyState == "IL") &&
		(pLienNumber == 1)
      )
    then
        cvMaxPPRate = 8;
		

    end
end	// rule G-MaxPPNoteRateRule2




alias(rule, G-MaxPPNoteRateRule3, "G-Max PP Note Rate Rule 3");

/* ==========================================================================
 * G-MaxPPNoteRateRule3
 *
 *
 */
rule G-MaxPPNoteRateRule3()
    if(
        (pSubjectPropertyState == "IL") &&
		(pLienNumber == 2)
      )
    then
        cvMaxPPRate = 8;
		

    end
end	// rule G-MaxPPNoteRateRule3




alias(rule, G-MaxPPNoteRateRule4, "G-Max PP Note Rate Rule 4");

/* ==========================================================================
 * G-MaxPPNoteRateRule4
 *
 *
 */
rule G-MaxPPNoteRateRule4()
    if(
        (pSubjectPropertyState == "TX") &&
		(pLienNumber == 1) &&
		(pOccupancy == "PrimaryResidence")
      )
    then
        cvMaxPPRate = 12;
		

    end
end	// rule G-MaxPPNoteRateRule4




alias(rule, G-MaxPPNoteRateRule5, "G-Max PP Note Rate Rule 5");

/* ==========================================================================
 * G-MaxPPNoteRateRule5
 *
 *
 */
rule G-MaxPPNoteRateRule5()
    if(
        (pSubjectPropertyState == "TX") &&
		(pLienNumber == 2) &&
		(pOccupancy == "PrimaryResidence")
      )
    then
        cvMaxPPRate = 10;
		

    end
end	// rule G-MaxPPNoteRateRule5




alias(rule, G-MaxPPNoteRateVT, "G-Max PP Note Rate VT");

/* ==========================================================================
 * G-MaxPPNoteRateVT
 *
 *
 */
rule G-MaxPPNoteRateVT()
    if(
        (pSubjectPropertyState == "VT") &&
		(pLienNumber == 2)
      )
    then
        cvMaxPPRate = 18;
		

    end
end	// rule G-MaxPPNoteRateVT




alias(rule, G-MaxPPNoteRateWY, "G-Max PP Note Rate WY");

/* ==========================================================================
 * G-MaxPPNoteRateWY
 *
 *
 */
rule G-MaxPPNoteRateWY()
    if(
        (pSubjectPropertyState == "WY")
      )
    then
        cvMaxPPRate = 17;
		

    end
end	// rule G-MaxPPNoteRateWY





/* ==========================================================================
 * G-MiActivation
 *
 *
 */
rule G-MiActivation()
    if(
        ((pUserType == "Broker") ||
		(pUserType == "Retention")) &&
		(LTV > 80) &&
		(NoMIFlag != "Y")
      )
    then
        
        condition(property, docs, "Loan subject to receipt of MI cert ordered by Lender.");

    end
end	// rule G-MiActivation





/* ==========================================================================
 * G-MinCreditModelRestriction
 *
 *
 */
rule G-MinCreditModelRestriction()
    if(
        (pUniqueCreditModelCountBorrower1 < 3) &&
		(ForeignNationalIndicator != "Y")
      )
    then
        Decision = "Referred";
		
        message(exception,  exception, "The credit report must be a 'Tri-Merge' report to decision properly.");

    end
end	// rule G-MinCreditModelRestriction




alias(rule, G-ModelHomeLeasebackNOOConditionRule, "G-ModelHome Leaseback NOO Condition Rule");

/* ==========================================================================
 * G-ModelHomeLeasebackNOOConditionRule
 *
 *
 */
rule G-ModelHomeLeasebackNOOConditionRule()
    if(
        (pModelHomeLeaseback == "Y") &&
		(pOccupancy == "Investment")
      )
    then
        
        condition(property, docs, "Term of the lease can not exceed 24 months.");
        condition(purchase, funding, "Max allowed seller contribution is 3%.");

    end
end	// rule G-ModelHomeLeasebackNOOConditionRule





/* ==========================================================================
 * G-No26MoLibor
 *
 *
 */
rule G-No26MoLibor()
    if(
        (cvProgram != "Subprime") &&
		(amortType1st == "2/6 Mo Libor")
      )
    then
        Decision = "Referred";
		
        message(exception,  exception, "The 2/6 Mo Libor product is not available");

    end
end	// rule G-No26MoLibor





/* ==========================================================================
 * G-No40due30
 *
 *
 */
rule G-No40due30()
    if(
        (cvProgram != "Subprime") &&
		((f40due30 == "Y") ||
		(f50due30 == "Y"))
      )
    then
        Decision = "Referred";
		
        message(exception,  exception, "The 40 due in 30 Balloon Option is not available");

    end
end	// rule G-No40due30





/* ==========================================================================
 * G-NonTradTLNChk
 *
 *
 */
rule G-NonTradTLNChk()
    if(
        (CLTV > 70) &&
		(cvMtgNoUFMIP <= 1000000) &&
		(((pCitizenshipBorr1 != "ForeignNational") &&
		(pValidTradtlTrades-24MoHistActive24MosBorr1 < 1)) ||
		((pBorr2ID > 0) &&
		(pCitizenshipBorr2 != "ForeignNational") &&
		(pValidTradtlTrades-24MoHistActive24MosBorr2 < 1)) ||
		((pBorr3ID > 0) &&
		(pCitizenshipBorr3 != "ForeignNational") &&
		(pValidTradtlTrades-24MoHistActive24MosBorr3 < 1)) ||
		((pBorr4ID > 0) &&
		(pCitizenshipBorr4 != "ForeignNational") &&
		(pValidTradtlTrades-24MoHistActive24MosBorr4 < 1)) ||
		((pBorr5ID > 0) &&
		(pCitizenshipBorr5 != "ForeignNational") &&
		(pValidTradtlTrades-24MoHistActive24MosBorr5 < 1)))
      )
    then
        Decision = "Referred";
		
        message(exception,  exception, "Borrower does not meet the minimum tradeline requirements.");

    end
end	// rule G-NonTradTLNChk





/* ==========================================================================
 * G-NonTradTLNLT1Mil70CLTV
 *
 *
 */
rule G-NonTradTLNLT1Mil70CLTV()
    if(
        (CLTV > 70) &&
		(pLoanAmount <= 1000000) &&
		(((pCitizenshipBorr1 != "ForeignNational") &&
		(pValidTradtlTrades-24MoHistActive24MosBorr1 == 2)) ||
		((pBorr2ID > 0) &&
		(pCitizenshipBorr2 != "ForeignNational") &&
		(pValidTradtlTrades-24MoHistActive24MosBorr2 == 2)) ||
		((pBorr3ID > 0) &&
		(pCitizenshipBorr3 != "ForeignNational") &&
		(pValidTradtlTrades-24MoHistActive24MosBorr3 == 2)) ||
		((pBorr4ID > 0) &&
		(pCitizenshipBorr4 != "ForeignNational") &&
		(pValidTradtlTrades-24MoHistActive24MosBorr4 == 2)) ||
		((pBorr5ID > 0) &&
		(pCitizenshipBorr5 != "ForeignNational") &&
		(pValidTradtlTrades-24MoHistActive24MosBorr5 == 2)))
      )
    then
        
        condition(asset, docs, "Borrower may use one non-traditional tradeline to meet the tradeline requirements.");

    end
end	// rule G-NonTradTLNLT1Mil70CLTV





/* ==========================================================================
 * G-NoPrePayPenaltyFixedProducts
 *
 *
 */
rule G-NoPrePayPenaltyFixedProducts()
    if(
        (PrepayIndicator1st == "Y") &&
		((pAmortizationType == "Fixed") ||
		(pAmortizationType == "IOFixed"))
      )
    then
        Decision = "Referred";
		
        message(exception,  exception, "PrePayment penalties are not allowed on Fixed products");

    end
end	// rule G-NoPrePayPenaltyFixedProducts





/* ==========================================================================
 * G-NoReservesRequiredExit
 *
 *
 */
rule G-NoReservesRequiredExit()
    if(
        (reservesReqd == "NA") ||
		(ReservesReqdAmt == 0)
      )
    then
        
        message(observation, "This rule will prevent the (0) months reserves required condition msg from displaying on the LSR.");

    end
end	// rule G-NoReservesRequiredExit





/* ==========================================================================
 * G-OccCoBorr2FicoNoTL
 *
 *
 */
rule G-OccCoBorr2FicoNoTL()
    if(
        ((pBorr2ID > 0) &&
		(pDeclBorr2AppNonOccupancy == "NULL") &&
		(pValidTradtlTrades-24MoHistActive24MosBorr2 < 3))
      )
    then
        fTLNotReqd-2 = "Y";
		

    end
end	// rule G-OccCoBorr2FicoNoTL





/* ==========================================================================
 * G-OccCoBorr3FicoNoTL
 *
 *
 */
rule G-OccCoBorr3FicoNoTL()
    if(
        ((pBorr3ID > 0) &&
		(pDeclBorr3AppNonOccupancy == "NULL") &&
		(pValidTradtlTrades-24MoHistOpenActive24MosBorr3 < 3))
      )
    then
        fTLNotReqd-3 = "Y";
		

    end
end	// rule G-OccCoBorr3FicoNoTL





/* ==========================================================================
 * G-OccCoBorr4FicoNoTL
 *
 *
 */
rule G-OccCoBorr4FicoNoTL()
    if(
        ((pBorr4ID > 0) &&
		(pDeclBorr4AppNonOccupancy == "NULL") &&
		(pValidTradtlTrades-24MoHistActive24MosBorr4 < 3))
      )
    then
        fTLNotReqd-4 = "Y";
		

    end
end	// rule G-OccCoBorr4FicoNoTL





/* ==========================================================================
 * G-OccCoBorr5FicoNoTL
 *
 *
 */
rule G-OccCoBorr5FicoNoTL()
    if(
        ((pBorr5ID > 0) &&
		(pDeclBorr5AppNonOccupancy == "NULL") &&
		(pValidTradtlTrades-24MoHistActive24MosBorr5 < 3))
      )
    then
        fTLNotReqd-5 = "Y";
		

    end
end	// rule G-OccCoBorr5FicoNoTL





/* ==========================================================================
 * G-OccCoBorrFico
 *
 *
 */
rule G-OccCoBorrFico()
    if(
        ((fTLNotReqd-2 == "Y") &&
		(pRepScore(wSingle)Borr2 <= MinCBScore)) ||
		((fTLNotReqd-3 == "Y") &&
		(pRepScore(wSingle)Borr3 <= MinCBScore)) ||
		((fTLNotReqd-4 == "Y") &&
		(pRepScore(wSingle)Borr4 <= MinCBScore)) ||
		((fTLNotReqd-5 == "Y") &&
		(pRepScore(wSingle)Borr5 <= MinCBScore))
      )
    then
        Decision = "Referred";
		
        message(exception,  exception, "Occupying Co-Borrower ineligible.  Does not meet min. FICO score of <DPM>Min CBScore</DPM>");

    end
end	// rule G-OccCoBorrFico





/* ==========================================================================
 * G-PaymentShockMax4XPlus
 *
 *
 */
rule G-PaymentShockMax4XPlus()
    if(
        ((pDocumentType != "Full Doc") &&
		(pDocumentType != "1 Yr Full Doc") &&
		(pDocumentType != "24 Mth Bank Stmt")) &&
		(pOccupancy == "PrimaryResidence") &&
		((PaymentShock > 2) &&
		(PaymentShock > 4)) &&
		(combinedLoanAmount < 1000000) &&
		(CLTV > 80)
      )
    then
        MaxPaymentShock = 4;
		

    end
end	// rule G-PaymentShockMax4XPlus





/* ==========================================================================
 * G-PaymentShockReservesCk
 *
 *
 */
rule G-PaymentShockReservesCk()
    if(
        (pOccupancy == "PrimaryResidence") &&
		(CLTV > 80) &&
		(PaymentShock > 1.5) &&
		(pOwnershipType-Borr1 != "LivingRentFree")
      )
    then
        PaymentShockReservesReqd = ReservesReqdAmt * 2;
		

    end
end	// rule G-PaymentShockReservesCk





/* ==========================================================================
 * G-PaymentShockReservesFTHB
 *
 *
 */
rule G-PaymentShockReservesFTHB()
    if(
        (pOccupancy == "PrimaryResidence") &&
		(CLTV > 80) &&
		(pOwnershipType-Borr1 == "LivingRentFree")
      )
    then
        PaymentShockReservesReqd = ReservesReqdAmt;
		

    end
end	// rule G-PaymentShockReservesFTHB





/* ==========================================================================
 * G-PaymentShockSelfEmpLTE90CLTV
 *
 *
 */
rule G-PaymentShockSelfEmpLTE90CLTV()
    if(
        (pOccupancy == "PrimaryResidence") &&
		(CLTV <= 90) &&
		(fIsSelfEmployed == "TRUE") &&
		((pDocumentType == "SIVA") ||
		(pDocumentType == "No Ratio") ||
		(pDocumentType == "No Doc with Assets"))
      )
    then
        MaxPaymentShock = -1;
		

    end
end	// rule G-PaymentShockSelfEmpLTE90CLTV





/* ==========================================================================
 * G-PoaNotAllowed
 *
 *
 */
rule G-PoaNotAllowed()
    if(
        (DocTypeAbbrev == "No Doc") ||
		(ForeignNationalIndicator == "Y") ||
		(pCitizenshipBorr1 == "NonPermanentResidentAlien") ||
		(pCitizenshipBorr2 == "NonPermanentResidentAlien") ||
		(pCitizenshipBorr3 == "NonPermanentResidentAlien") ||
		(pCitizenshipBorr4 == "NonPermanentResidentAlien") ||
		(pCitizenshipBorr5 == "NonPermanentResidentAlien")
      )
    then
        
        condition(asset, funding, "Power of Attorney not allowed with the selected program.");

    end
end	// rule G-PoaNotAllowed




alias(rule, G-PriceAdjustmentsInit-1, "G-Price Adjustments Init.1");

/* ==========================================================================
 * G-PriceAdjustmentsInit-1
 *
 *
 */
rule G-PriceAdjustmentsInit-1()
    if(
        (pLoanAmount > 0)
      )
    then
        priceAdj-2YrPrePay = 0;
		priceAdj-40DueIn30 = 0;
		priceAdj-40YrTerm = 0;
		priceAdj-AltAPricingSpecial = 0;
		priceAdj-CashOut = 0;
		priceAdj-CLTV = 0;
		priceAdj-CLTV-LoanAmount = 0;
		priceAdj-DocumentType = 0;
		priceAdj-EscrowHoldback = 0;
		priceAdj-FICO = 0;
		priceAdj-ForeignNational = 0;
		priceAdj-InterestOnly = 0;
		priceAdj-Investor = 0;
		priceAdj-LoanAmount = 0;
		priceAdj-LTV = 0;
		priceAdj-MixedUse = 0;
		priceAdj-NewYorkProperties = 0;
		priceAdj-NoEscrow = 0;
		priceAdj-NonWarrantableCondo = 0;
		priceAdj-NOOLoanAmount = 0;
		priceAdj-NumberofUnits = 0;
		priceAdj-Occupancy = 0;
		priceAdj-PrepayTerm = 0;
		priceAdj-PropertyType = 0;
		priceAdj-Region = 0;
		priceAdj-Rural = 0;
		priceAdj-SOASpecial = 0;
		priceAdj-SOACLTV = 0;
		priceAdj-Total = 0;
		priceAdj-WaiveEscrow = 0;
		priceAdj-Extension1 = 0;
		priceAdj-Extension2 = 0;
		priceAdj-Exception-Name1 = 0;
		priceAdj-Exception-Name2 = 0;
		priceAdj-Exception-Name3 = 0;
		priceAdj-Exception-Name4 = 0;
		priceAdj-Exception-Name5 = 0;
		priceAdj-Exception-Name6 = 0;
		priceAdj-Exception-Name7 = 0;
		priceAdj-Exception-Name8 = 0;
		priceAdj-Exception-Name9 = 0;
		priceAdj-Exception-Value1 = 0;
		priceAdj-Exception-Value2 = 0;
		priceAdj-Exception-Value3 = 0;
		priceAdj-Exception-Value4 = 0;
		priceAdj-Exception-Value5 = 0;
		priceAdj-Exception-Value6 = 0;
		priceAdj-Exception-Value7 = 0;
		priceAdj-Exception-Value8 = 0;
		priceAdj-Exception-Value9 = 0;
		priceAdj-Special = 0;
		priceAdj-5-6PricingSpecial = 0;
		priceAdj-Special30FX80CLTV = 0;
		tmp_MaxCltv = 0;
		tmp_MaxLtv = 0;
		

    end
end	// rule G-PriceAdjustmentsInit-1





/* ==========================================================================
 * G-PriResPendingSaleSold
 *
 *
 */
rule G-PriResPendingSaleSold()
    if(
        (RetainResidence == "YES") &&
		((pCurrentResidencePropertyStatus == "PendingSale") ||
		(pCurrentResidencePropertyStatus == "Sold"))
      )
    then
        
        condition(asset, docs, "The selected doc type does not allow for retention of residence. Provide a Hud-1 for proof property is sold.");

    end
end	// rule G-PriResPendingSaleSold





/* ==========================================================================
 * G-PriRetainResidenceInit
 *
 *
 */
rule G-PriRetainResidenceInit()
    if(
        ((pOwnershipType-Borr1 == "Own") &&
		(pOccupancy == "PrimaryResidence") &&
		(pPurposeOfLoan == "Purchase")) &&
		((pDocumentType == "No Doc") ||
		(pDocumentType == "No Doc with Assets")) ||
		(((pOwnershipType-Borr1 == "Own") &&
		(pOccupancy == "PrimaryResidence") &&
		(pPurposeOfLoan == "Purchase")) &&
		(CLTV > 85) &&
		((amortType1st == "1 Mo OptA") ||
		(amortType1st == "3 Mo OptA")))
      )
    then
        RetainResidence = "YES";
		

    else
        RetainResidence = "NO";
		

    end
end	// rule G-PriRetainResidenceInit




alias(rule, G-PropertyReviewValue, "G-Property Review Value");

/* ==========================================================================
 * G-PropertyReviewValue
 *
 *
 */
rule G-PropertyReviewValue()
    if(
        (pReviewValue > 0)
      )
    then
        appraisalvalue = pReviewValue;
		

    else
        appraisalvalue = pAppraisalValue;
		

    end
end	// rule G-PropertyReviewValue




alias(rule, G-PropertyValueAppraised, "G-Property Value Appraised");

/* ==========================================================================
 * G-PropertyValueAppraised
 *
 *
 */
rule G-PropertyValueAppraised()
    if(
        (pLoanAmount > 0)
      )
    then
        propertyValue = appraisalvalue;
		

    end
end	// rule G-PropertyValueAppraised




alias(rule, G-PropertyValuePurchase, "G-Property Value Purchase");

/* ==========================================================================
 * G-PropertyValuePurchase
 *
 *
 */
rule G-PropertyValuePurchase()
    if(
        (purposeAbbrev == "P") &&
		(pPurchasePrice > 0) &&
		(pPurchasePrice < appraisalvalue)
      )
    then
        propertyValue = pPurchasePrice;
		

    end
end	// rule G-PropertyValuePurchase




alias(rule, G-PropertyValueRefinance, "G-Property Value Refinance");

/* ==========================================================================
 * G-PropertyValueRefinance
 *
 *
 */
rule G-PropertyValueRefinance()
    if(
        (purposeAbbrev == "CO") &&
		(pPropertyOwnedDuration < 12) &&
		(CLTV > 75) &&
		(acquisitionCost > 0) &&
		(acquisitionCost < appraisalvalue)
      )
    then
        propertyValue = acquisitionCost;
		

    end
end	// rule G-PropertyValueRefinance




alias(rule, G-PurchaseCheck, "G-Purchase Check");

/* ==========================================================================
 * G-PurchaseCheck
 *
 *
 */
rule G-PurchaseCheck()
    if(
        (pPurposeOfLoan != "Purchase")
      )
    then
        

    end
end	// rule G-PurchaseCheck




alias(rule, G-PurchaseContactConditionRule, "G-Purchase Contact Condition Rule");

/* ==========================================================================
 * G-PurchaseContactConditionRule
 *
 *
 */
rule G-PurchaseContactConditionRule()
    if(
        (pPurposeOfLoan == "Purchase")
      )
    then
        
        condition(asset, docs, "Fully executed purchase contract to include a copy of the earnest money deposit check, if applicable.");

    end
end	// rule G-PurchaseContactConditionRule




alias(rule, G-PurposeAbbrevCashOut, "G-Purpose Abbrev Cash Out");

/* ==========================================================================
 * G-PurposeAbbrevCashOut
 *
 *
 */
rule G-PurposeAbbrevCashOut()
    if(
        (pPurposeOfLoan == "Refinance") &&
		(pTypeofRefinance == "CashOutOther")
      )
    then
        purposeAbbrev = "CO";
		

    end
end	// rule G-PurposeAbbrevCashOut




alias(rule, G-PurposeAbbrevPRT, "G-Purpose Abbrev PRT");

/* ==========================================================================
 * G-PurposeAbbrevPRT
 *
 *
 */
rule G-PurposeAbbrevPRT()
    if(
        (purposeAbbrev == "P") ||
		(purposeAbbrev == "RT")
      )
    then
        purposeAbbrev = "PRT";
		

    end
end	// rule G-PurposeAbbrevPRT




alias(rule, G-PurposeAbbrevPurchase, "G-Purpose Abbrev Purchase");

/* ==========================================================================
 * G-PurposeAbbrevPurchase
 *
 *
 */
rule G-PurposeAbbrevPurchase()
    if(
        (pPurposeOfLoan == "Purchase")
      )
    then
        purposeAbbrev = "P";
		

    end
end	// rule G-PurposeAbbrevPurchase




alias(rule, G-PurposeAbbrevRateandTermRefi, "G-Purpose Abbrev Rate and Term Refi");

/* ==========================================================================
 * G-PurposeAbbrevRateandTermRefi
 *
 *
 */
rule G-PurposeAbbrevRateandTermRefi()
    if(
        ((pPurposeOfLoan == "Refinance") &&
		(pTypeofRefinance == "NoCashOutRateORTerm100DollarMax")) ||
		(pPurposeOfLoan == "ConstructionPermanent")
      )
    then
        purposeAbbrev = "RT";
		

    end
end	// rule G-PurposeAbbrevRateandTermRefi




alias(rule, G-RateAdjustmentsInit-1, "G-Rate Adjustments Init.1");

/* ==========================================================================
 * G-RateAdjustmentsInit-1
 *
 *
 */
rule G-RateAdjustmentsInit-1()
    if(
        (pLoanAmount > 0)
      )
    then
        rateAdj-40DueIn30 = 0;
		rateAdj-40YrTerm = 0;
		rateAdj-50DueIn30 = 0;
		rateAdj-CashOut = 0;
		rateAdj-CLTV = 0;
		rateAdj-DocumentType = 0;
		rateAdj-FICO = 0;
		rateAdj-LoanAmount = 0;
		rateAdj-LTV = 0;
		rateAdj-Margin = 0;
		rateAdj-NewYorkProperties = 0;
		rateAdj-NoEscrow = 0;
		rateAdj-PropertyType = 0;
		rateAdj-NOOCLTV = 0;
		rateAdj-InterestOnly = 0;
		rateAdj-PrepayTerm = 0;
		rateAdj-30Year = 0;
		rateAdj-NumberOfUnits = 0;
		rateAdj-NoPrepay = 0;
		rateAdj-Occupancy = 0;
		rateAdj-NewYorkProperties = 0;
		rateAdj-Total = 0;
		rateAdj-Purpose = 0;
		rateAdj-NonCAProperty = 0;
		rateAdj-NegAm1st = 0;
		rateAdj-Special = 0;
		rateAdj-BKLs24Months = 0;
		rateAdj-BKLs24Months1st = 0;
		rateAdj-2YrARMSpecial = 0;
		rateAdj-PurchaseSpecial = 0;
		rateAdj-DTI = 0;
		rateAdj-ARM = 0;
		rateAdj-State = 0;
		rateAdj-Rural = 0;
		rateAdj-FullDocSpecial = 0;
		RateAdj-BKSeasoning = 0;
		RateAdj-Impounds = 0;
		RateAdj-TXCashOutLoanSize = 0;
		rateAdj-TXCashOut = 0;
		

    end
end	// rule G-RateAdjustmentsInit-1




alias(rule, G-RatePriceDisplayQualRateRule, "G-Rate Price Display Qual Rate Rule");

/* ==========================================================================
 * G-RatePriceDisplayQualRateRule
 *
 *
 */
rule G-RatePriceDisplayQualRateRule()
    if(
        ((amortType1st == "1 Mo Libor") ||
		(amortType1st == "6 Mo Libor") ||
		(amortType1st == "2/6 Mo Libor")) &&
		((pCombo == 0) ||
		((pCombo > 0) &&
		(pLienNumber == 1)))
      )
    then
        cvRateQual = 2;
		

    end
end	// rule G-RatePriceDisplayQualRateRule




alias(rule, G-RatePriceDisplayRule1, "G-Rate Price Display Rule 1");

/* ==========================================================================
 * G-RatePriceDisplayRule1
 *
 *
 */
rule G-RatePriceDisplayRule1()
    if(
        (pCombo == 0) ||
		((pCombo > 0) &&
		(pLienNumber == 1))
      )
    then
        cvRate = rate1st;
		cvMaxPrice = maxPrice1st;
		rateAdj-Total = rateAdj1st-Total;
		cvLockPeriod = lockPeriod1st;
		cvMtgNoUFMIP = loanAmount1st;
		cvLoanTerm = LoanTerm1st;
		cvPI = pi1st;
		cvPrice = FinalPrice1st;
		cvBaseRate = BaseRate1st;
		

    end
end	// rule G-RatePriceDisplayRule1




alias(rule, G-RatePriceDisplayRule2, "G-Rate Price Display Rule 2");

/* ==========================================================================
 * G-RatePriceDisplayRule2
 *
 *
 */
rule G-RatePriceDisplayRule2()
    if(
        (pCombo > 0) &&
		(pLienNumber == 2)
      )
    then
        cvRate = rate2nd;
		cvPrice = FinalPrice2nd;
		cvMaxPrice = MaxPrice2nd;
		cvLockPeriod = lockPeriod2nd;
		cvMtgNoUFMIP = loanAmount2nd;
		cvLoanTerm = LoanTerm2nd;
		cvPI = pi2nd;
		cvRateQual = 0;
		cvBaseRate = BaseRate2nd;
		LTV = (loanAmount2nd * 100) / propertyValue;
		

    end
end	// rule G-RatePriceDisplayRule2





/* ==========================================================================
 * G-ReservesCalcUseCO1
 *
 *
 */
rule G-ReservesCalcUseCO1()
    if(
        (pOccupancy == "PrimaryResidence") ||
		(pOccupancy == "SecondaryResidence") &&
		(purposeAbbrev == "CO") &&
		(CLTV <= 80) &&
		(Reserves < ReservesReqdAmt)
      )
    then
        reservesDiff = ReservesReqdAmt - Reserves;
		

    else
        reservesDiff = 0;
		

    end
end	// rule G-ReservesCalcUseCO1





/* ==========================================================================
 * G-ReservesCalcUseCO2
 *
 *
 */
rule G-ReservesCalcUseCO2()
    if(
        (reservesDiff > 0) &&
		(reservesDiff <= EstimatedCashtoBorrower)
      )
    then
        ReservesReqdAmt = ReservesReqdAmt - reservesDiff;
		

    end
end	// rule G-ReservesCalcUseCO2





/* ==========================================================================
 * G-ReservesRequiredLivRntFreeGT90
 *
 *
 */
rule G-ReservesRequiredLivRntFreeGT90()
    if(
        (pOwnershipType-Borr1 == "LivingRentFree") &&
		((pDocumentType == "SIVA") ||
		(pDocumentType == "No Ratio")) &&
		(CLTV > 90)
      )
    then
        reservesReqd = 6;
		ReservesReqdAmt = reservesReqd * PITI;
		
        condition(asset, docs, "6 months PITI reserves required for borrowers living rent free with CLTVs > 90%");

    end
end	// rule G-ReservesRequiredLivRntFreeGT90





/* ==========================================================================
 * G-ReservesRequiredNoDocNoRatGT1Mil
 *
 *
 */
rule G-ReservesRequiredNoDocNoRatGT1Mil()
    if(
        ((pDocumentType == "No Doc with Assets") ||
		(pDocumentType == "No Ratio")) &&
		(combinedLoanAmount > 1000000)
      )
    then
        reservesReqd = 8;
		ReservesReqdAmt = reservesReqd * PITI;
		

    end
end	// rule G-ReservesRequiredNoDocNoRatGT1Mil





/* ==========================================================================
 * G-ReservesRequiredPri
 *
 *
 */
rule G-ReservesRequiredPri()
    if(
        (pOccupancy == "PrimaryResidence")
      )
    then
        reservesReqd = lookup("G-Reserves PriSec LK", DocTypeAbbrev, CLTV);
		ReservesReqdAmt = reservesReqd * PITI;
		

    end
end	// rule G-ReservesRequiredPri





/* ==========================================================================
 * G-ReservesRequiredSecInvestment
 *
 *
 */
rule G-ReservesRequiredSecInvestment()
    if(
        (pOccupancy == "Investment") ||
		(pOccupancy == "SecondaryResidence")
      )
    then
        reservesReqd = lookup("G-Reserves NOO LK", pDocumentType, CLTV);
		ReservesReqdAmt = reservesReqd * PITI;
		

    end
end	// rule G-ReservesRequiredSecInvestment





/* ==========================================================================
 * G-ReservesRequiredSivaLitePriGT90
 *
 *
 */
rule G-ReservesRequiredSivaLitePriGT90()
    if(
        (pOccupancy == "PrimaryResidence") &&
		((pDocumentType == "SIVA") ||
		(pDocumentType == "Lite Doc")) &&
		(CLTV > 90)
      )
    then
        reservesReqd = 4;
		ReservesReqdAmt = reservesReqd * PITI;
		

    end
end	// rule G-ReservesRequiredSivaLitePriGT90





/* ==========================================================================
 * G-ReservesReqWaiveDupCondLivRntFree
 *
 *
 */
rule G-ReservesReqWaiveDupCondLivRntFree()
    if(
        (pOwnershipType-Borr1 == "LivingRentFree") &&
		((pDocumentType == "SIVA") ||
		(pDocumentType == "No Ratio")) &&
		(CLTV > 90)
      )
    then
        

    end
end	// rule G-ReservesReqWaiveDupCondLivRntFree





/* ==========================================================================
 * G-RestrictedState
 *
 *
 */
rule G-RestrictedState()
    if(
        (isRestrictedState == 1)
      )
    then
        Decision = "Referred";
		
        message(exception,  exception, "Ineligible property state, refer to guidelines or contact your Account Executive for assistance.");

    end
end	// rule G-RestrictedState





/* ==========================================================================
 * G-RetentionRTRefiCoBorr
 *
 *
 */
rule G-RetentionRTRefiCoBorr()
    if(
        (pUserType == "Retention") &&
		(purposeAbbrev == "RT")
      )
    then
        MinCBScore = 580;
		

    end
end	// rule G-RetentionRTRefiCoBorr




alias(rule, G-RowHomeConditionRule, "G-Row Home Condition Rule");

/* ==========================================================================
 * G-RowHomeConditionRule
 *
 *
 */
rule G-RowHomeConditionRule()
    if(
        (pPropertyType == "RowHome") &&
		((pSubjectPropertyState == "PA") ||
		(pSubjectPropertyState == "MD"))
      )
    then
        
        condition(property, docs, "A Row Home in the city of Baltimore or Philadelphia, requires an acceptable Field Review in addition to a full appraisal.");

    end
end	// rule G-RowHomeConditionRule





/* ==========================================================================
 * G-SetCOPropertyValue-Over75CLTV
 *
 *
 */
rule G-SetCOPropertyValue-Over75CLTV()
    if(
        (purposeAbbrev == "CO") &&
		(pPropertyOwnedDuration < 12) &&
		(CLTV > 75) &&
		(acquisitionCost > 0) &&
		(acquisitionCost < appraisalvalue)
      )
    then
        propertyValue = acquisitionCost;
		

    end
end	// rule G-SetCOPropertyValue-Over75CLTV





/* ==========================================================================
 * G-SetCOPropertyValue-Under75CLTV
 *
 *
 */
rule G-SetCOPropertyValue-Under75CLTV()
    if(
        (purposeAbbrev == "CO") &&
		(CLTV <= 75)
      )
    then
        propertyValue = appraisalvalue;
		

    end
end	// rule G-SetCOPropertyValue-Under75CLTV





/* ==========================================================================
 * G-SetCreditScoreFromSingleScore
 *
 *
 */
rule G-SetCreditScoreFromSingleScore()
    if(
        (pUniqueCreditModelCountBorrower1 > 2)
      )
    then
        creditScore = pSingleScore-Primary;
		

    end
end	// rule G-SetCreditScoreFromSingleScore





/* ==========================================================================
 * G-SetDecisionValue
 *
 *
 */
rule G-SetDecisionValue()
    if(
        (Decision == "Approved")
      )
    then
        DecisionValue = "AU Approved";
		

    else
        DecisionValue = "Referred";
		

    end
end	// rule G-SetDecisionValue





/* ==========================================================================
 * G-SetLTVZipRestrictionFlag
 *
 *
 */
rule G-SetLTVZipRestrictionFlag()
    if(
        (pUserType != "Retention") ||
		((pUserType == "Retention") &&
		(purposeAbbrev != "RT"))
      )
    then
        fLimitLTV80Zip = lookup("G-LimitLTV80ZipRestrictions LK", pSubjectPropertyZipcode, globalParam);
		fLimitLTV85Zip = lookup("G-LimitLTV85ZipRestrictions LK", pSubjectPropertyZipcode, globalParam);
		

    end
end	// rule G-SetLTVZipRestrictionFlag





/* ==========================================================================
 * G-SetMinLoanAmount
 *
 *
 */
rule G-SetMinLoanAmount()
    if(
        (pLoanAmount > 0)
      )
    then
        minLoanAmount = 50000;
		

    end
end	// rule G-SetMinLoanAmount




alias(rule, G-SetMinMaxAbb-CONOO1-2, "G-SetMinMaxAbb-CO NOO 1-2");

/* ==========================================================================
 * G-SetMinMaxAbb-CONOO1-2
 *
 *
 */
rule G-SetMinMaxAbb-CONOO1-2()
    if(
        (purposeAbbrev == "CO") &&
		(pOccupancy == "Investment") &&
		((PropertyTypeAbbrev == "SFR") ||
		(pNumberOfUnits == 2) ||
		(pPropertyType == "LowRiseCondo") ||
		(pPropertyType == "MidRiseCondo") ||
		(pPropertyType == "HighRiseCondo"))
      )
    then
        MinMaxAbbrev = "CO NOO 1-2";
		

    end
end	// rule G-SetMinMaxAbb-CONOO1-2




alias(rule, G-SetMinMaxAbb-CONOO1UnitNew, "G-SetMinMaxAbb-CO NOO 1UnitNew");

/* ==========================================================================
 * G-SetMinMaxAbb-CONOO1UnitNew
 *
 *
 */
rule G-SetMinMaxAbb-CONOO1UnitNew()
    if(
        ((MinMaxAbbrev == "CO NOO 1-2") ||
		(MinMaxAbbrev == "CO NOO 3-4")) &&
		(programType != "Pref") &&
		(pNumberOfUnits == 1)
      )
    then
        MinMaxAbbrev = "CO NOO 1";
		

    end
end	// rule G-SetMinMaxAbb-CONOO1UnitNew




alias(rule, G-SetMinMaxAbb-CONOO2UnitNew, "G-SetMinMaxAbb-CO NOO 2UnitNew");

/* ==========================================================================
 * G-SetMinMaxAbb-CONOO2UnitNew
 *
 *
 */
rule G-SetMinMaxAbb-CONOO2UnitNew()
    if(
        ((MinMaxAbbrev == "CO NOO 1-2") ||
		(MinMaxAbbrev == "CO NOO 3-4")) &&
		(pNumberOfUnits == 2) &&
		(programType != "Pref")
      )
    then
        MinMaxAbbrev = "CO NOO 2";
		

    end
end	// rule G-SetMinMaxAbb-CONOO2UnitNew




alias(rule, G-SetMinMaxAbb-CONOO3-4, "G-SetMinMaxAbb-CO NOO 3-4");

/* ==========================================================================
 * G-SetMinMaxAbb-CONOO3-4
 *
 *
 */
rule G-SetMinMaxAbb-CONOO3-4()
    if(
        (purposeAbbrev == "CO") &&
		(pOccupancy == "Investment") &&
		((pNumberOfUnits == 3) ||
		(pNumberOfUnits == 4))
      )
    then
        MinMaxAbbrev = "CO NOO 3-4";
		

    end
end	// rule G-SetMinMaxAbb-CONOO3-4




alias(rule, G-SetMinMaxAbb-CONOO3UnitNew, "G-SetMinMaxAbb-CO NOO 3UnitNew");

/* ==========================================================================
 * G-SetMinMaxAbb-CONOO3UnitNew
 *
 *
 */
rule G-SetMinMaxAbb-CONOO3UnitNew()
    if(
        ((MinMaxAbbrev == "CO NOO 1-2") ||
		(MinMaxAbbrev == "CO NOO 3-4")) &&
		(programType != "Pref") &&
		(pNumberOfUnits == 3)
      )
    then
        MinMaxAbbrev = "CO NOO 3";
		

    end
end	// rule G-SetMinMaxAbb-CONOO3UnitNew




alias(rule, G-SetMinMaxAbb-CONOO4UnitNew, "G-SetMinMaxAbb-CO NOO 4UnitNew");

/* ==========================================================================
 * G-SetMinMaxAbb-CONOO4UnitNew
 *
 *
 */
rule G-SetMinMaxAbb-CONOO4UnitNew()
    if(
        ((MinMaxAbbrev == "CO NOO 1-2") ||
		(MinMaxAbbrev == "CO NOO 3-4")) &&
		(programType != "Pref") &&
		(pNumberOfUnits == 4)
      )
    then
        MinMaxAbbrev = "CO NOO 4";
		

    end
end	// rule G-SetMinMaxAbb-CONOO4UnitNew




alias(rule, G-SetMinMaxAbb-COOO1, "G-SetMinMaxAbb-CO OO 1");

/* ==========================================================================
 * G-SetMinMaxAbb-COOO1
 *
 *
 */
rule G-SetMinMaxAbb-COOO1()
    if(
        (purposeAbbrev == "CO") &&
		(pOccupancy == "PrimaryResidence") &&
		((PropertyTypeAbbrev == "SFR") ||
		(pNumberOfUnits == 1) ||
		(pPropertyType == "LowRiseCondo") ||
		(pPropertyType == "MidRiseCondo") ||
		(pPropertyType == "HighRiseCondo"))
      )
    then
        MinMaxAbbrev = "CO OO 1";
		

    end
end	// rule G-SetMinMaxAbb-COOO1




alias(rule, G-SetMinMaxAbb-COOO2-4, "G-SetMinMaxAbb-CO OO 2-4");

/* ==========================================================================
 * G-SetMinMaxAbb-COOO2-4
 *
 *
 */
rule G-SetMinMaxAbb-COOO2-4()
    if(
        (purposeAbbrev == "CO") &&
		(pOccupancy == "PrimaryResidence") &&
		(pNumberOfUnits >= 2)
      )
    then
        MinMaxAbbrev = "CO OO 2-4";
		

    end
end	// rule G-SetMinMaxAbb-COOO2-4




alias(rule, G-SetMinMaxAbb-COOO2UnitNew, "G-SetMinMaxAbb-CO OO 2UnitNew");

/* ==========================================================================
 * G-SetMinMaxAbb-COOO2UnitNew
 *
 *
 */
rule G-SetMinMaxAbb-COOO2UnitNew()
    if(
        (MinMaxAbbrev == "CO OO 2-4") &&
		(programType != "Pref") &&
		(pNumberOfUnits == 2)
      )
    then
        MinMaxAbbrev = "CO OO 2";
		

    end
end	// rule G-SetMinMaxAbb-COOO2UnitNew




alias(rule, G-SetMinMaxAbb-COOO3UnitNew, "G-SetMinMaxAbb-CO OO 3UnitNew");

/* ==========================================================================
 * G-SetMinMaxAbb-COOO3UnitNew
 *
 *
 */
rule G-SetMinMaxAbb-COOO3UnitNew()
    if(
        (MinMaxAbbrev == "CO OO 2-4") &&
		(programType != "Pref") &&
		(pNumberOfUnits == 3)
      )
    then
        MinMaxAbbrev = "CO OO 3";
		

    end
end	// rule G-SetMinMaxAbb-COOO3UnitNew




alias(rule, G-SetMinMaxAbb-COOO4UnitNew, "G-SetMinMaxAbb-CO OO 4UnitNew");

/* ==========================================================================
 * G-SetMinMaxAbb-COOO4UnitNew
 *
 *
 */
rule G-SetMinMaxAbb-COOO4UnitNew()
    if(
        (MinMaxAbbrev == "CO OO 2-4") &&
		(programType != "Pref") &&
		(pNumberOfUnits == 4)
      )
    then
        MinMaxAbbrev = "CO OO 4";
		

    end
end	// rule G-SetMinMaxAbb-COOO4UnitNew




alias(rule, G-SetMinMaxAbb-COSH1-2, "G-SetMinMaxAbb-CO SH 1-2");

/* ==========================================================================
 * G-SetMinMaxAbb-COSH1-2
 *
 *
 */
rule G-SetMinMaxAbb-COSH1-2()
    if(
        (purposeAbbrev == "CO") &&
		(pOccupancy == "SecondaryResidence") &&
		((PropertyTypeAbbrev == "SFR") ||
		(pPropertyType == "LowRiseCondo") ||
		(pPropertyType == "MidRiseCondo") ||
		(pPropertyType == "HighRiseCondo"))
      )
    then
        MinMaxAbbrev = "CO SH 1-2";
		

    end
end	// rule G-SetMinMaxAbb-COSH1-2




alias(rule, G-SetMinMaxAbb-PRTNOO1-2, "G-SetMinMaxAbb-PRT NOO 1-2");

/* ==========================================================================
 * G-SetMinMaxAbb-PRTNOO1-2
 *
 *
 */
rule G-SetMinMaxAbb-PRTNOO1-2()
    if(
        (purposeAbbrev == "PRT") &&
		(pOccupancy == "Investment") &&
		((PropertyTypeAbbrev == "SFR") ||
		(pNumberOfUnits == 2) ||
		(pPropertyType == "LowRiseCondo") ||
		(pPropertyType == "MidRiseCondo") ||
		(pPropertyType == "HighRiseCondo"))
      )
    then
        MinMaxAbbrev = "PRT NOO 1-2";
		

    end
end	// rule G-SetMinMaxAbb-PRTNOO1-2




alias(rule, G-SetMinMaxAbb-PRTNOO1UnitNew, "G-SetMinMaxAbb-PRT NOO 1UnitNew");

/* ==========================================================================
 * G-SetMinMaxAbb-PRTNOO1UnitNew
 *
 *
 */
rule G-SetMinMaxAbb-PRTNOO1UnitNew()
    if(
        ((MinMaxAbbrev == "PRT NOO 1-2") ||
		(MinMaxAbbrev == "PRT NOO 3-4")) &&
		(programType != "Pref") &&
		(pNumberOfUnits == 1)
      )
    then
        MinMaxAbbrev = "PRT NOO 1";
		

    end
end	// rule G-SetMinMaxAbb-PRTNOO1UnitNew




alias(rule, G-SetMinMaxAbb-PRTNOO2UnitNew, "G-SetMinMaxAbb-PRT NOO 2UnitNew");

/* ==========================================================================
 * G-SetMinMaxAbb-PRTNOO2UnitNew
 *
 *
 */
rule G-SetMinMaxAbb-PRTNOO2UnitNew()
    if(
        ((MinMaxAbbrev == "PRT NOO 1-2") ||
		(MinMaxAbbrev == "PRT NOO 3-4")) &&
		(programType != "Pref") &&
		(pNumberOfUnits == 2)
      )
    then
        MinMaxAbbrev = "PRT NOO 2";
		

    end
end	// rule G-SetMinMaxAbb-PRTNOO2UnitNew




alias(rule, G-SetMinMaxAbb-PRTNOO3-4, "G-SetMinMaxAbb-PRT NOO 3-4");

/* ==========================================================================
 * G-SetMinMaxAbb-PRTNOO3-4
 *
 *
 */
rule G-SetMinMaxAbb-PRTNOO3-4()
    if(
        (purposeAbbrev == "PRT") &&
		(pOccupancy == "Investment") &&
		((pNumberOfUnits == 3) ||
		(pNumberOfUnits == 4))
      )
    then
        MinMaxAbbrev = "PRT NOO 3-4";
		

    end
end	// rule G-SetMinMaxAbb-PRTNOO3-4




alias(rule, G-SetMinMaxAbb-PRTNOO3UnitNew, "G-SetMinMaxAbb-PRT NOO 3UnitNew");

/* ==========================================================================
 * G-SetMinMaxAbb-PRTNOO3UnitNew
 *
 *
 */
rule G-SetMinMaxAbb-PRTNOO3UnitNew()
    if(
        ((MinMaxAbbrev == "PRT NOO 1-2") ||
		(MinMaxAbbrev == "PRT NOO 3-4")) &&
		(programType != "Pref") &&
		(pNumberOfUnits == 3)
      )
    then
        MinMaxAbbrev = "PRT NOO 3";
		

    end
end	// rule G-SetMinMaxAbb-PRTNOO3UnitNew




alias(rule, G-SetMinMaxAbb-PRTNOO4UnitNew, "G-SetMinMaxAbb-PRT NOO 4UnitNew");

/* ==========================================================================
 * G-SetMinMaxAbb-PRTNOO4UnitNew
 *
 *
 */
rule G-SetMinMaxAbb-PRTNOO4UnitNew()
    if(
        ((MinMaxAbbrev == "PRT NOO 1-2") ||
		(MinMaxAbbrev == "PRT NOO 3-4")) &&
		(programType != "Pref") &&
		(pNumberOfUnits == 4)
      )
    then
        MinMaxAbbrev = "PRT NOO 4";
		

    end
end	// rule G-SetMinMaxAbb-PRTNOO4UnitNew




alias(rule, G-SetMinMaxAbb-PRTOO1, "G-SetMinMaxAbb-PRT OO 1");

/* ==========================================================================
 * G-SetMinMaxAbb-PRTOO1
 *
 *
 */
rule G-SetMinMaxAbb-PRTOO1()
    if(
        (purposeAbbrev == "PRT") &&
		(pOccupancy == "PrimaryResidence") &&
		((PropertyTypeAbbrev == "SFR") ||
		(pNumberOfUnits == 1) ||
		(pPropertyType == "LowRiseCondo") ||
		(pPropertyType == "MidRiseCondo") ||
		(pPropertyType == "HighRiseCondo"))
      )
    then
        MinMaxAbbrev = "PRT OO 1";
		

    end
end	// rule G-SetMinMaxAbb-PRTOO1




alias(rule, G-SetMinMaxAbb-PRTOO2-4, "G-SetMinMaxAbb-PRT OO 2-4");

/* ==========================================================================
 * G-SetMinMaxAbb-PRTOO2-4
 *
 *
 */
rule G-SetMinMaxAbb-PRTOO2-4()
    if(
        (purposeAbbrev == "PRT") &&
		(pOccupancy == "PrimaryResidence") &&
		(pNumberOfUnits >= 2)
      )
    then
        MinMaxAbbrev = "PRT OO 2-4";
		

    end
end	// rule G-SetMinMaxAbb-PRTOO2-4




alias(rule, G-SetMinMaxAbb-PRTOO2UnitNew, "G-SetMinMaxAbb-PRT OO 2UnitNew");

/* ==========================================================================
 * G-SetMinMaxAbb-PRTOO2UnitNew
 *
 *
 */
rule G-SetMinMaxAbb-PRTOO2UnitNew()
    if(
        (MinMaxAbbrev == "PRT OO 2-4") &&
		(programType != "Pref") &&
		(pNumberOfUnits == 2)
      )
    then
        MinMaxAbbrev = "PRT OO 2";
		

    end
end	// rule G-SetMinMaxAbb-PRTOO2UnitNew




alias(rule, G-SetMinMaxAbb-PRTOO3UnitNew, "G-SetMinMaxAbb-PRT OO 3UnitNew");

/* ==========================================================================
 * G-SetMinMaxAbb-PRTOO3UnitNew
 *
 *
 */
rule G-SetMinMaxAbb-PRTOO3UnitNew()
    if(
        (MinMaxAbbrev == "PRT OO 2-4") &&
		(programType != "Pref") &&
		(pNumberOfUnits == 3)
      )
    then
        MinMaxAbbrev = "PRT OO 3";
		

    end
end	// rule G-SetMinMaxAbb-PRTOO3UnitNew




alias(rule, G-SetMinMaxAbb-PRTOO4UnitNew, "G-SetMinMaxAbb-PRT OO 4UnitNew");

/* ==========================================================================
 * G-SetMinMaxAbb-PRTOO4UnitNew
 *
 *
 */
rule G-SetMinMaxAbb-PRTOO4UnitNew()
    if(
        (MinMaxAbbrev == "PRT OO 2-4") &&
		(programType != "Pref") &&
		(pNumberOfUnits == 4)
      )
    then
        MinMaxAbbrev = "PRT OO 4";
		

    end
end	// rule G-SetMinMaxAbb-PRTOO4UnitNew




alias(rule, G-SetMinMaxAbb-PRTSH1-2, "G-SetMinMaxAbb-PRT SH 1-2");

/* ==========================================================================
 * G-SetMinMaxAbb-PRTSH1-2
 *
 *
 */
rule G-SetMinMaxAbb-PRTSH1-2()
    if(
        (purposeAbbrev == "PRT") &&
		(pOccupancy == "SecondaryResidence") &&
		((PropertyTypeAbbrev == "SFR") ||
		(pPropertyType == "LowRiseCondo") ||
		(pPropertyType == "MidRiseCondo") ||
		(pPropertyType == "HighRiseCondo"))
      )
    then
        MinMaxAbbrev = "PRT SH 1-2";
		

    end
end	// rule G-SetMinMaxAbb-PRTSH1-2





/* ==========================================================================
 * G-SetMtgTradelineCounts-12Mo
 *
 *
 */
rule G-SetMtgTradelineCounts-12Mo()
    if(
        (pManualCredit != "false")
      )
    then
        TDLN-Rolling30s = pRolling30s;
		TDLN-Late30s = pMtg30Last12inTLNwnoDerogs;
		TDLN-Late60s = pMtg60Last12inTLNwnoDerogs;
		TDLN-Late90s = pMtg90Last12inTLNwnoDerogs;
		TDLN-Late120s = pMtg120Last12inTLNwnoDerogs;
		

    else
        TDLN-Rolling30s = pMtgConsumer30Last12RollingnoDerogs;
		TDLN-Late30s = pMtgConsumer30Last12noDerogs;
		TDLN-Late60s = pMtgConsumer60Last12noDerogs;
		TDLN-Late90s = pMtgConsumer90Last12noDerogs;
		TDLN-Late120s = pMtgConsumer120Last12noDerogs;
		

    end
end	// rule G-SetMtgTradelineCounts-12Mo





/* ==========================================================================
 * G-SetMtgTradelineCounts-24Mo
 *
 *
 */
rule G-SetMtgTradelineCounts-24Mo()
    if(
        (pManualCredit != "false")
      )
    then
        TDLN-Late30sx24 = pMtg30Last12inTLNwnoDerogs;
		TDLN-Late60sx24 = pMtg60Last12inTLNwnoDerogs;
		TDLN-Late90sx24 = pMtg90Last12inTLNwnoDerogs;
		TDLN-Late120sx24 = pMtg120Last12inTLNwnoDerogs;
		

    else
        TDLN-Late30sx24 = pMtgConsumer30Last24noDerogs;
		TDLN-Late60sx24 = pMtgConsumer60Last24noDerogs;
		TDLN-Late90sx24 = pMtgConsumer90Last24noDerogs;
		TDLN-Late120sx24 = pMtgConsumer120Last24noDerogs;
		

    end
end	// rule G-SetMtgTradelineCounts-24Mo





/* ==========================================================================
 * G-SetPropTypeIndicator-SFR
 *
 *
 */
rule G-SetPropTypeIndicator-SFR()
    if(
        (pPropertyType == "SingleFamily") ||
		(pPropertyType == "PUD") ||
		(pPropertyType == "Townhouse") ||
		(pPropertyType == "RowHome")
      )
    then
        PropertyTypeAbbrev = "SFR";
		

    end
end	// rule G-SetPropTypeIndicator-SFR





/* ==========================================================================
 * G-SetSelfEmployedFlag
 *
 *
 */
rule G-SetSelfEmployedFlag()
    if(
        (pPrBorrHghstIncSelfEmployment == 1) ||
		(pIs1099EarnerPrimBorr == 1)
      )
    then
        fIsSelfEmployed = "TRUE";
		

    else
        fIsSelfEmployed = "FALSE";
		

    end
end	// rule G-SetSelfEmployedFlag





/* ==========================================================================
 * G-SetThresholdGenericState
 *
 *
 */
rule G-SetThresholdGenericState()
    if(
        (pLoanAmount > 0)
      )
    then
        ThresholdGenericState = lookup("G-ThresholdGenericState LK", pSubjectPropertyState, globalParam);
		

    end
end	// rule G-SetThresholdGenericState





/* ==========================================================================
 * G-SetThresholdIndex
 *
 *
 */
rule G-SetThresholdIndex()
    if(
        (pLoanAmount > 0)
      )
    then
        ThresholdIndex1st = lookup("G-ThresholdIndex1st LK", LoanTerm1st, globalParam);
		ThresholdIndex2nd = lookup("G-ThresholdIndex2nd LK", LoanTerm2nd, globalParam);
		

    end
end	// rule G-SetThresholdIndex





/* ==========================================================================
 * G-SetThresholdMaxPPRate1st
 *
 *
 */
rule G-SetThresholdMaxPPRate1st()
    if(
        (pLienNumber == 1) &&
		((cvMaxPPRate > ThresholdMaxRate1st) ||
		(cvMaxPPRate == "NA"))
      )
    then
        cvMaxPPRate = ThresholdMaxRate1st;
		

    end
end	// rule G-SetThresholdMaxPPRate1st





/* ==========================================================================
 * G-SetThresholdMaxPPRate2nd
 *
 *
 */
rule G-SetThresholdMaxPPRate2nd()
    if(
        (pLienNumber == 2) &&
		((cvMaxPPRate > ThresholdMaxRate2nd) ||
		(cvMaxPPRate == "NA"))
      )
    then
        cvMaxPPRate = ThresholdMaxRate2nd;
		

    end
end	// rule G-SetThresholdMaxPPRate2nd





/* ==========================================================================
 * G-SetThresholdMaxRate1st
 *
 *
 */
rule G-SetThresholdMaxRate1st()
    if(
        (ThresholdNotRequired1st == 0)
      )
    then
        ThresholdMaxRate1st = ThresholdIndex1st + YieldAdj1st;
		

    else
        ThresholdMaxRate1st = 999;
		

    end
end	// rule G-SetThresholdMaxRate1st





/* ==========================================================================
 * G-SetThresholdMaxRate2nd
 *
 *
 */
rule G-SetThresholdMaxRate2nd()
    if(
        (ThresholdNotRequired2nd == 0)
      )
    then
        ThresholdMaxRate2nd = ThresholdIndex2nd + YieldAdj2nd;
		

    else
        ThresholdMaxRate2nd = 999;
		

    end
end	// rule G-SetThresholdMaxRate2nd





/* ==========================================================================
 * G-StateCORestrictionsAPR
 *
 *
 */
rule G-StateCORestrictionsAPR()
    if(
        (pSubjectPropertyState == "CO")
      )
    then
        
        condition(asset, funding, "Max APR for Colorado is 12%");

    end
end	// rule G-StateCORestrictionsAPR





/* ==========================================================================
 * G-StateOKRestrictionsAPR
 *
 *
 */
rule G-StateOKRestrictionsAPR()
    if(
        (pSubjectPropertyState == "OK")
      )
    then
        
        condition(asset, funding, "Max APR for Oklahoma is 13%");

    end
end	// rule G-StateOKRestrictionsAPR





/* ==========================================================================
 * G-TLNLT1Mil70CLTV
 *
 *
 */
rule G-TLNLT1Mil70CLTV()
    if(
        (CLTV > 70) &&
		(pLoanAmount <= 1000000) &&
		(pCitizenshipBorr1 != "ForeignNational") &&
		(pValidTradtlTrades-24MoHistActive24MosBorr1 == 1)
      )
    then
        
        condition(credit, docs, "Tradelines do not meet guideline requirement, mitigating factors must be present.");

    end
end	// rule G-TLNLT1Mil70CLTV





/* ==========================================================================
 * G-TLNLT1Mil70CLTVCoBorr
 *
 *
 */
rule G-TLNLT1Mil70CLTVCoBorr()
    if(
        (CLTV > 70) &&
		(pLoanAmount <= 1000000) &&
		(((pBorr2ID > 0) &&
		(pCitizenshipBorr2 != "ForeignNational") &&
		(pValidTradtlTrades-24MoHistActive24MosBorr2 == 1)) ||
		((pBorr3ID > 0) &&
		(pCitizenshipBorr3 != "ForeignNational") &&
		(pValidTradtlTrades-24MoHistActive24MosBorr3 == 1)) ||
		((pBorr4ID > 0) &&
		(pCitizenshipBorr4 != "ForeignNational") &&
		(pValidTradtlTrades-24MoHistActive24MosBorr4 == 1)) ||
		((pBorr5ID > 0) &&
		(pCitizenshipBorr5 != "ForeignNational") &&
		(pValidTradtlTrades-24MoHistActive24MosBorr5 == 1)))
      )
    then
        
        condition(credit, docs, "Co-Borrower Tradelines do not meet guideline requirement, mitigating factors must be present.");

    end
end	// rule G-TLNLT1Mil70CLTVCoBorr




alias(rule, G-TotalCurrentHousingExpensesCalc, "G-Total Current Housing Expenses Calc");

/* ==========================================================================
 * G-TotalCurrentHousingExpensesCalc
 *
 *
 */
rule G-TotalCurrentHousingExpensesCalc()
    if(
        (pLoanAmount > 0)
      )
    then
        TotalCurrentHousingExpenses = pPresentMonthlyRent + pPresentHazardInsurance + pPresentRealEstateTaxes + pPresentHoaDues + pPresentMtgInsurance + pPresentOtherHousingExpenses + pPresentFirstMortgagePI + pPresentOtherFinancingPI;
		

    end
end	// rule G-TotalCurrentHousingExpensesCalc




alias(rule, G-TotalFCBKCCCSLast6YrRule1, "G-Total FC BK CCCS Last 6 Yr Rule 1");

/* ==========================================================================
 * G-TotalFCBKCCCSLast6YrRule1
 *
 *
 */
rule G-TotalFCBKCCCSLast6YrRule1()
    if(
        (pBankruptcyChapter7 > 0) &&
		(pChapter7BKClosedDuration <= 72)
      )
    then
        TotalFCBKCCCSLast6Yr = TotalFCBKCCCSLast6Yr + pBankruptcyChapter7;
		

    end
end	// rule G-TotalFCBKCCCSLast6YrRule1




alias(rule, G-TotalFCBKCCCSLast6YrRule2, "G-Total FC BK CCCS Last 6 Yr Rule 2");

/* ==========================================================================
 * G-TotalFCBKCCCSLast6YrRule2
 *
 *
 */
rule G-TotalFCBKCCCSLast6YrRule2()
    if(
        (pBankruptcyChapter13 > 0) &&
		(pChapter13FiledDuration <= 72)
      )
    then
        TotalFCBKCCCSLast6Yr = TotalFCBKCCCSLast6Yr + pBankruptcyChapter13;
		

    end
end	// rule G-TotalFCBKCCCSLast6YrRule2




alias(rule, G-TotalFCBKCCCSLast6YrRule3, "G-Total FC BK CCCS Last 6 Yr Rule 3");

/* ==========================================================================
 * G-TotalFCBKCCCSLast6YrRule3
 *
 *
 */
rule G-TotalFCBKCCCSLast6YrRule3()
    if(
        (pConsumerCounseling > 0) &&
		(pCCCSFiledDuration <= 72)
      )
    then
        TotalFCBKCCCSLast6Yr = TotalFCBKCCCSLast6Yr + pConsumerCounseling;
		

    end
end	// rule G-TotalFCBKCCCSLast6YrRule3




alias(rule, G-TotalFCBKCCCSLast6YrRule4, "G-Total FC BK CCCS Last 6 Yr Rule 4");

/* ==========================================================================
 * G-TotalFCBKCCCSLast6YrRule4
 *
 *
 */
rule G-TotalFCBKCCCSLast6YrRule4()
    if(
        ((pForeclosure > 0) &&
		(pForeclosureClosedDuration <= 72)) ||
		(pVirtualForeclosureLast72 > 0)
      )
    then
        TotalFCBKCCCSLast6Yr = TotalFCBKCCCSLast6Yr + pForeclosure + pVirtualForeclosureLast72;
		

    end
end	// rule G-TotalFCBKCCCSLast6YrRule4




alias(rule, G-UnifiBankruptcyCheckRule, "G-Unifi Bankruptcy Check Rule");

/* ==========================================================================
 * G-UnifiBankruptcyCheckRule
 *
 *
 */
rule G-UnifiBankruptcyCheckRule()
    if(
        (pBKFiled7YrsCount > 0)
      )
    then
        BKExists7Yrs = "Y";
		

    else
        BKExists7Yrs = "N";
		

    end
end	// rule G-UnifiBankruptcyCheckRule




alias(rule, G-UnifiBorr1FICORule, "G-Unifi Borr 1 FICO Rule");

/* ==========================================================================
 * G-UnifiBorr1FICORule
 *
 *
 */
rule G-UnifiBorr1FICORule()
    if(
        (pBorr1ID > 0)
      )
    then
        RepFICOBorr1 = pRepScore(wSingle)Borr1;
		

    end
end	// rule G-UnifiBorr1FICORule




alias(rule, G-UnifiBorr2FICORule, "G-Unifi Borr 2 FICO Rule");

/* ==========================================================================
 * G-UnifiBorr2FICORule
 *
 *
 */
rule G-UnifiBorr2FICORule()
    if(
        (pBorr2ID > 0)
      )
    then
        RepFICOBorr2 = pRepScore(wSingle)Borr2;
		

    end
end	// rule G-UnifiBorr2FICORule




alias(rule, G-UnifiBorr3FICORule, "G-Unifi Borr 3 FICO Rule");

/* ==========================================================================
 * G-UnifiBorr3FICORule
 *
 *
 */
rule G-UnifiBorr3FICORule()
    if(
        (pBorr3ID > 0)
      )
    then
        RepFICOBorr3 = pRepScore(wSingle)Borr3;
		

    end
end	// rule G-UnifiBorr3FICORule




alias(rule, G-UnifiBorr4FICORule, "G-Unifi Borr 4 FICO Rule");

/* ==========================================================================
 * G-UnifiBorr4FICORule
 *
 *
 */
rule G-UnifiBorr4FICORule()
    if(
        (pBorr4ID > 0)
      )
    then
        RepFICOBorr4 = pRepScore(wSingle)Borr4;
		

    end
end	// rule G-UnifiBorr4FICORule




alias(rule, G-UnifiBorr5FICORule, "G-Unifi Borr 5 FICO Rule");

/* ==========================================================================
 * G-UnifiBorr5FICORule
 *
 *
 */
rule G-UnifiBorr5FICORule()
    if(
        (pBorr5ID > 0)
      )
    then
        RepFICOBorr5 = pRepScore(wSingle)Borr5;
		

    end
end	// rule G-UnifiBorr5FICORule




alias(rule, G-UnifiForeclosureCheckRule, "G-Unifi Foreclosure Check Rule");

/* ==========================================================================
 * G-UnifiForeclosureCheckRule
 *
 *
 */
rule G-UnifiForeclosureCheckRule()
    if(
        (pFCFiled7YrsCount > 0)
      )
    then
        FCExists7Yrs = "Y";
		

    else
        FCExists7Yrs = "N";
		

    end
end	// rule G-UnifiForeclosureCheckRule




alias(rule, G-UnifiIOTerm, "G-Unifi IO Term");

/* ==========================================================================
 * G-UnifiIOTerm
 *
 *
 */
rule G-UnifiIOTerm()
    if(
        (pAmortizationType == "IOFixed") ||
		(pAmortizationType == "IOARM")
      )
    then
        IOTerm = 120;
		

    end
end	// rule G-UnifiIOTerm





/* ==========================================================================
 * G-UnifiPaymentShock
 *
 *
 */
rule G-UnifiPaymentShock()
    if(
        (pLoanAmount > 0)
      )
    then
        PaymentShockTimes = PaymentShock;
		

    end
end	// rule G-UnifiPaymentShock




alias(rule, G-UserTypeNotBrokerorRetention, "G-User Type Not Broker or Retention");

/* ==========================================================================
 * G-UserTypeNotBrokerorRetention
 *
 *
 */
rule G-UserTypeNotBrokerorRetention()
    if(
        (pUserType != "Broker") &&
		(pUserType != "Retention")
      )
    then
        

    end
end	// rule G-UserTypeNotBrokerorRetention




alias(rule, HLK-CondInitialDraw, "HLK-Cond InitialDraw");

/* ==========================================================================
 * HLK-CondInitialDraw
 *
 *
 */
rule HLK-CondInitialDraw()
    if(
        (AmortType2nd == "HELOC")
      )
    then
        
        condition(asset, funding, "The initial draw will be at close for the entire balance with a 'Draw Period' of 10 years.");

    end
end	// rule HLK-CondInitialDraw





/* ==========================================================================
 * InitHasSubFinancing
 *
 *
 */
rule InitHasSubFinancing()
    if(
        (pOutsideFinancing > 0)
      )
    then
        hasSubFinancing = "true";
		

    else
        hasSubFinancing = "false";
		

    end
end	// rule InitHasSubFinancing





/* ==========================================================================
 * InitIsCashOut
 *
 *
 */
rule InitIsCashOut()
    if(
        (pPurposeOfLoan == "Refinance") &&
		((pRefinanceType == "CashOutOther") ||
		(pGovRefiType == "CashOutOther"))
      )
    then
        isCashOut = "true";
		

    else
        isCashOut = "false";
		

    end
end	// rule InitIsCashOut





/* ==========================================================================
 * InitIsCondo
 *
 *
 */
rule InitIsCondo()
    if(
        (pPropertyType == "LowRiseCondo") ||
		(pPropertyType == "MidRiseCondo") ||
		(pPropertyType == "HighRiseCondo")
      )
    then
        isCondo = "true";
		

    else
        isCondo = "false";
		

    end
end	// rule InitIsCondo





/* ==========================================================================
 * InitIsFixed
 *
 *
 */
rule InitIsFixed()
    if(
        (pAmortizationType == "IOFixed") ||
		(pAmortizationType == "Fixed")
      )
    then
        isFixed = "true";
		

    else
        isFixed = "false";
		

    end
end	// rule InitIsFixed





/* ==========================================================================
 * InitIsForeignNatl
 *
 *
 */
rule InitIsForeignNatl()
    if(
        (pCitizenshipOfPrimaryApplicant == "ForeignNational") ||
		(pCitizenshipCoBorr1 == "ForeignNational") ||
		(pCitizenshipCoBorr2 == "ForeignNational") ||
		(pCitizenshipCoBorr3 == "ForeignNational") ||
		(pCitizenshipCoBorr4 == "ForeignNational")
      )
    then
        isForeignNatl = "true";
		

    else
        isForeignNatl = "false";
		

    end
end	// rule InitIsForeignNatl





/* ==========================================================================
 * InitIsFTHB
 *
 *
 */
rule InitIsFTHB()
    if(
        (pFTHB >= 1)
      )
    then
        isFTHB = "true";
		

    else
        isFTHB = "false";
		

    end
end	// rule InitIsFTHB





/* ==========================================================================
 * InitIsHudRepo
 *
 *
 */
rule InitIsHudRepo()
    if(
        (pHudRepo == "Y")
      )
    then
        isHudRepo = "true";
		

    else
        isHudRepo = "false";
		

    end
end	// rule InitIsHudRepo





/* ==========================================================================
 * InitIsInterestOnly
 *
 *
 */
rule InitIsInterestOnly()
    if(
        (pAmortizationType == "IOFixed") ||
		(pAmortizationType == "IOARM")
      )
    then
        isInterestOnly = "true";
		

    else
        isInterestOnly = "false";
		

    end
end	// rule InitIsInterestOnly





/* ==========================================================================
 * InitIsLeasehold
 *
 *
 */
rule InitIsLeasehold()
    if(
        (pEstateHeld == "Leasehold")
      )
    then
        isLeasehold = "true";
		

    else
        isLeasehold = "false";
		

    end
end	// rule InitIsLeasehold





/* ==========================================================================
 * InitIsMixedUse
 *
 *
 */
rule InitIsMixedUse()
    if(
        (pZoning == "MixedUse")
      )
    then
        isMixedUse = "true";
		

    else
        isMixedUse = "false";
		

    end
end	// rule InitIsMixedUse





/* ==========================================================================
 * InitIsNoEscrow
 *
 *
 */
rule InitIsNoEscrow()
    if(
        (pWaiveEscrow == "Y")
      )
    then
        isNoEscrow = "true";
		

    else
        isNoEscrow = "false";
		

    end
end	// rule InitIsNoEscrow





/* ==========================================================================
 * InitIsNoMI
 *
 *
 */
rule InitIsNoMI()
    if(
        (pNoMI == "Y")
      )
    then
        isNoMI = "true";
		

    else
        isNoMI = "false";
		

    end
end	// rule InitIsNoMI





/* ==========================================================================
 * InitIsNonWarrantable
 *
 *
 */
rule InitIsNonWarrantable()
    if(
        (pNonWarrantableCondo == "Y")
      )
    then
        isNonWarrantable = "true";
		

    else
        isNonWarrantable = "false";
		

    end
end	// rule InitIsNonWarrantable





/* ==========================================================================
 * InitIsRestrictedState
 *
 *
 */
rule InitIsRestrictedState()
    if(
        (pLoanAmount == pLoanAmount)
      )
    then
        isRestrictedState = lookup("RestrictedStateLK", pSubjectPropertyState, globalParam);
		

    end
end	// rule InitIsRestrictedState





/* ==========================================================================
 * InitIsSelfEmployed
 *
 *
 */
rule InitIsSelfEmployed()
    if(
        (pPrBorrHghstIncSelfEmployment != 0) ||
		(pIs1099EarnerPrimBorr != 0)
      )
    then
        isSelfEmployed = 1;
		

    else
        isSelfEmployed = 0;
		

    end
end	// rule InitIsSelfEmployed




alias(rule, InsertPricingGuidelineRule, "Insert Pricing Guideline Rule");

/* ==========================================================================
 * InsertPricingGuidelineRule
 *
 *
 */
rule InsertPricingGuidelineRule()
    if(
        
      )
    then
        

    end
end	// rule InsertPricingGuidelineRule





/* ==========================================================================
 * MaxDTIReducedDocTypes-AltA
 *
 *
 */
rule MaxDTIReducedDocTypes-AltA()
    if(
        (maxDTI > 45) &&
		(LTV > 80) &&
		((pDocumentType == "SIVA") ||
		(pDocumentType == "Lite Doc") ||
		(pDocumentType == "Limited Doc"))
      )
    then
        maxDTI = 45;
		
        message(observation, "Max DTI reduced to 45 for reduced doc type.");

    end
end	// rule MaxDTIReducedDocTypes-AltA




alias(rule, NoMI-MaxLTVHighRiseCondo, "NoMI-Max LTV HighRiseCondo");

/* ==========================================================================
 * NoMI-MaxLTVHighRiseCondo
 *
 *
 */
rule NoMI-MaxLTVHighRiseCondo()
    if(
        (pProgramName == "NoMI First Lien") &&
		(pPropertyType == "HighRiseCondo") &&
		(maxLTV > 95)
      )
    then
        maxLTV = 95;
		

    end
end	// rule NoMI-MaxLTVHighRiseCondo





/* ==========================================================================
 * Override-MA
 *
 *
 */
rule Override-MA()
    if(
        ((pDocumentType == "Full Doc") ||
		(pDocumentType == "1Yr Full Doc")) &&
		(isRestrictedState == 1) &&
		(pSubjectPropertyState == "DISABLED") &&
		(pUDFStr2 == "Override:MA")
      )
    then
        isRestrictedState = 0;
		

    end
end	// rule Override-MA





/* ==========================================================================
 * SetZipPoconoRuralFlag
 *
 *
 */
rule SetZipPoconoRuralFlag()
    if(
        (pSubjectPropertyState == "PA") &&
		(pLocation == "Rural")
      )
    then
        fLimitRuralZip = lookup("PoconoPaZips LK", pSubjectPropertyZipcode, globalParam);
		

    end
end	// rule SetZipPoconoRuralFlag




alias(rule, SubP-ComboLoansClosingCondition, "SubP-Combo Loans Closing Condition");

/* ==========================================================================
 * SubP-ComboLoansClosingCondition
 *
 *
 */
rule SubP-ComboLoansClosingCondition()
    if(
        (pCombo >= 1)
      )
    then
        
        condition(asset, docs, "Combo loans with Lender must close simultaneously.");

    end
end	// rule SubP-ComboLoansClosingCondition




alias(rule, SubP-ConditionsPermResidentAliens1, "SubP-Conditions Perm Resident Aliens 1");

/* ==========================================================================
 * SubP-ConditionsPermResidentAliens1
 *
 *
 */
rule SubP-ConditionsPermResidentAliens1()
    if(
        (BorrowerType == "Permanent Resident Alien")
      )
    then
        
        condition(credit, docs, "Refer to the guidelines for restrictions and acceptable evidence for residency type and established asset base.");

    end
end	// rule SubP-ConditionsPermResidentAliens1




alias(rule, ZDbg-AltACheck, "ZDbg-AltA Check");

/* ==========================================================================
 * ZDbg-AltACheck
 *
 *
 */
rule ZDbg-AltACheck()
    if(
        (cvProgram != "Prime") &&
		(DbgFlag > 0)
      )
    then
        DbgFlag = 0;
		

    end
end	// rule ZDbg-AltACheck




alias(rule, ZDbg-ComboInit, "ZDbg-Combo Init");

/* ==========================================================================
 * ZDbg-ComboInit
 *
 *
 */
rule ZDbg-ComboInit()
    if(
        (DbgFlag > 0)
      )
    then
        DbgCombo = pCombo;
		DbgLienNumber = pLienNumber;
		

    end
end	// rule ZDbg-ComboInit




alias(rule, ZDbg-ComboTrace, "ZDbg-Combo Trace");

/* ==========================================================================
 * ZDbg-ComboTrace
 *
 *
 */
rule ZDbg-ComboTrace()
    if(
        (DbgFlag > 0)
      )
    then
        
        message(exception,  assets, "Combo: <DPM>DbgCombo</DPM>");
        message(exception,  assets, "Lien Number: <DPM>DbgLienNumber</DPM>");

    end
end	// rule ZDbg-ComboTrace




alias(rule, ZDbg-CreditScoreTrace, "ZDbg-Credit Score Trace");

/* ==========================================================================
 * ZDbg-CreditScoreTrace
 *
 *
 */
rule ZDbg-CreditScoreTrace()
    if(
        (DbgFlag > 0)
      )
    then
        
        message(exception,  assets, "Credit Score: <DPM>Credit Score</DPM>");

    end
end	// rule ZDbg-CreditScoreTrace




alias(rule, ZDbg-DbgFlagTrace, "ZDbg-Dbg Flag Trace");

/* ==========================================================================
 * ZDbg-DbgFlagTrace
 *
 *
 */
rule ZDbg-DbgFlagTrace()
    if(
        (DbgFlag > 0)
      )
    then
        
        message(exception,  assets, "Debugging ON");

    end
end	// rule ZDbg-DbgFlagTrace




alias(rule, ZDbg-DbgVarTrace, "ZDbg-DbgVar Trace");

/* ==========================================================================
 * ZDbg-DbgVarTrace
 *
 *
 */
rule ZDbg-DbgVarTrace()
    if(
        (DbgFlag > 0)
      )
    then
        
        message(exception,  assets, "DbgVar: <DPM>DbgVar</DPM>");

    end
end	// rule ZDbg-DbgVarTrace




alias(rule, ZDbg-DebugFlagInit, "ZDbg-Debug Flag Init");

/* ==========================================================================
 * ZDbg-DebugFlagInit
 *
 *
 */
rule ZDbg-DebugFlagInit()
    if(
        (pLoanAmount > 0)
      )
    then
        DbgFlag = lookup("ZDbg-Debug Flags", pPrice, globalParam);
		

    end
end	// rule ZDbg-DebugFlagInit




alias(rule, ZDbg-ForceRefer, "ZDbg-Force Refer");

/* ==========================================================================
 * ZDbg-ForceRefer
 *
 *
 */
rule ZDbg-ForceRefer()
    if(
        (DbgFlag > 0)
      )
    then
        Decision = "Referred";
		
        message(exception,  assets, "Dbg END");

    end
end	// rule ZDbg-ForceRefer




alias(rule, ZDbg-LoanAmount1stTrace, "ZDbg-Loan Amount 1st Trace");

/* ==========================================================================
 * ZDbg-LoanAmount1stTrace
 *
 *
 */
rule ZDbg-LoanAmount1stTrace()
    if(
        (DbgFlag > 0)
      )
    then
        
        message(exception,  assets, "Loan Amount 1st: <DPM>Loan Amount 1st</DPM>");

    end
end	// rule ZDbg-LoanAmount1stTrace




alias(rule, ZDbg-LoanAmount2ndTrace, "ZDbg-Loan Amount 2nd Trace");

/* ==========================================================================
 * ZDbg-LoanAmount2ndTrace
 *
 *
 */
rule ZDbg-LoanAmount2ndTrace()
    if(
        (DbgFlag > 0)
      )
    then
        
        message(exception,  assets, "Loan Amount 2nd: <DPM>Loan Amount 2nd</DPM>");

    end
end	// rule ZDbg-LoanAmount2ndTrace




alias(rule, ZDbg-LoanAmountInit, "ZDbg-Loan Amount Init");

/* ==========================================================================
 * ZDbg-LoanAmountInit
 *
 *
 */
rule ZDbg-LoanAmountInit()
    if(
        (DbgFlag > 0)
      )
    then
        DbgLoanAmount = pLoanAmount;
		

    end
end	// rule ZDbg-LoanAmountInit




alias(rule, ZDbg-LoanAmountTrace, "ZDbg-Loan Amount Trace");

/* ==========================================================================
 * ZDbg-LoanAmountTrace
 *
 *
 */
rule ZDbg-LoanAmountTrace()
    if(
        (DbgFlag > 0)
      )
    then
        
        message(exception,  assets, "Loan Amount: <DPM>DbgLoanAmount</DPM>");

    end
end	// rule ZDbg-LoanAmountTrace




alias(rule, ZDbg-LookupNameTrace, "ZDbg-LookupName Trace");

/* ==========================================================================
 * ZDbg-LookupNameTrace
 *
 *
 */
rule ZDbg-LookupNameTrace()
    if(
        (DbgFlag > 0)
      )
    then
        
        message(exception,  assets, "Lookup Name: <DPM>Lookup Name</DPM>");

    end
end	// rule ZDbg-LookupNameTrace




alias(rule, ZDbg-LTV1stTrace, "ZDbg-LTV 1st Trace");

/* ==========================================================================
 * ZDbg-LTV1stTrace
 *
 *
 */
rule ZDbg-LTV1stTrace()
    if(
        (DbgFlag > 0)
      )
    then
        
        message(exception,  assets, "LTV 1st: <DPM>LTV 1st</DPM>");

    end
end	// rule ZDbg-LTV1stTrace




alias(rule, ZDbg-LTVCLTVTrace, "ZDbg-LTV CLTV Trace");

/* ==========================================================================
 * ZDbg-LTVCLTVTrace
 *
 *
 */
rule ZDbg-LTVCLTVTrace()
    if(
        (DbgFlag > 0)
      )
    then
        
        message(exception,  assets, "LTV: <DPM>LTV</DPM>");
        message(exception,  assets, "CLTV: <DPM>CLTV</DPM>");

    end
end	// rule ZDbg-LTVCLTVTrace




alias(rule, ZDbg-MarginAdj-TotalTrace, "ZDbg-Margin Adj-Total Trace");

/* ==========================================================================
 * ZDbg-MarginAdj-TotalTrace
 *
 *
 */
rule ZDbg-MarginAdj-TotalTrace()
    if(
        (DbgFlag > 0)
      )
    then
        
        message(exception,  assets, "Margin Adj-Total: <DPM>Margin Adj-Total</DPM>");

    end
end	// rule ZDbg-MarginAdj-TotalTrace




alias(rule, ZDbg-MarginTrace, "ZDbg-Margin Trace");

/* ==========================================================================
 * ZDbg-MarginTrace
 *
 *
 */
rule ZDbg-MarginTrace()
    if(
        (DbgFlag > 0)
      )
    then
        
        message(exception,  assets, "Margin: <DPM>Margin</DPM>");

    end
end	// rule ZDbg-MarginTrace




alias(rule, ZDbg-MaxLoanAmountTrace, "ZDbg-Max Loan Amount Trace");

/* ==========================================================================
 * ZDbg-MaxLoanAmountTrace
 *
 *
 */
rule ZDbg-MaxLoanAmountTrace()
    if(
        (DbgFlag > 0)
      )
    then
        
        message(exception,  assets, "Max Loan Amount: <DPM>Max Loan Amount</DPM>");

    end
end	// rule ZDbg-MaxLoanAmountTrace




alias(rule, ZDbg-MaxLTVCLTVTrace, "ZDbg-Max LTV CLTV Trace");

/* ==========================================================================
 * ZDbg-MaxLTVCLTVTrace
 *
 *
 */
rule ZDbg-MaxLTVCLTVTrace()
    if(
        (DbgFlag > 0)
      )
    then
        
        message(exception,  assets, "Max LTV: <DPM>Max LTV</DPM>");
        message(exception,  assets, "Max CLTV: <DPM>Max CLTV</DPM>");

    end
end	// rule ZDbg-MaxLTVCLTVTrace





/* ==========================================================================
 * ZDbg-MtgLatesTrace
 *
 *
 */
rule ZDbg-MtgLatesTrace()
    if(
        (DbgFlag > 0)
      )
    then
        
        message(exception,  assets, "Mtg Rolling 30 Lates: <DPM>TDLN-Rolling30s</DPM>");
        message(exception,  assets, "Mtg 30 Lates: <DPM>TDLN-Late30s</DPM>");
        message(exception,  assets, "Mtg 60 Lates: <DPM>TDLN-Late60s</DPM>");
        message(exception,  assets, "Mtg 90 Lates: <DPM>TDLN-Late90s</DPM>");
        message(exception,  assets, "Mtg 120+ Lates: <DPM>TDLN-Late120s</DPM>");

    end
end	// rule ZDbg-MtgLatesTrace




alias(rule, ZDbg-PPIndicatorTrace, "ZDbg-PP Indicator Trace");

/* ==========================================================================
 * ZDbg-PPIndicatorTrace
 *
 *
 */
rule ZDbg-PPIndicatorTrace()
    if(
        (DbgFlag > 0)
      )
    then
        
        message(exception,  assets, "Prepay Indicator 1st: <DPM>Prepay Indicator 1st</DPM>");
        message(exception,  assets, "Prepay Indicator 2nd: <DPM>Prepay Indicator 2nd</DPM>");

    end
end	// rule ZDbg-PPIndicatorTrace




alias(rule, ZDbg-PriceAdj-TotalTrace, "ZDbg-Price Adj-Total Trace");

/* ==========================================================================
 * ZDbg-PriceAdj-TotalTrace
 *
 *
 */
rule ZDbg-PriceAdj-TotalTrace()
    if(
        (DbgFlag > 0)
      )
    then
        
        message(exception,  assets, "Price Adj-Total: <DPM>Price Adj-Total</DPM>");

    end
end	// rule ZDbg-PriceAdj-TotalTrace




alias(rule, ZDbg-PropertyTypeTrace, "ZDbg-PropertyType Trace");

/* ==========================================================================
 * ZDbg-PropertyTypeTrace
 *
 *
 */
rule ZDbg-PropertyTypeTrace()
    if(
        (DbgFlag > 0)
      )
    then
        DbgPropType = pPropertyType;
		
        message(exception,  exception, "Property Type: <DPM>DbgPropType</DPM>");

    end
end	// rule ZDbg-PropertyTypeTrace




alias(rule, ZDbg-RateAdj-TotalTrace, "ZDbg-Rate Adj-Total Trace");

/* ==========================================================================
 * ZDbg-RateAdj-TotalTrace
 *
 *
 */
rule ZDbg-RateAdj-TotalTrace()
    if(
        (DbgFlag > 0)
      )
    then
        
        message(exception,  assets, "Rate Adj-Total: <DPM>Rate Adj-Total</DPM>");

    end
end	// rule ZDbg-RateAdj-TotalTrace








// +++++++++++++++++++++++++ Ruleset Definitions +++++++++++++++++++++++++
		
alias(ruleset, AltA-CCCSExceptionRuleset, "AltA-CCCS Exception Ruleset");

/* ==========================================================================
 * AltA-CCCSExceptionRuleset
 *
 *
 */
ruleset AltA-CCCSExceptionRuleset(continue)
    rule  AltA-IneligibleCCCSRule1();
    rule  AltA-IneligibleCCCSRule2();
    rule  AltA-IneligibleCCCSRule3();
    rule  AltA-IneligibleCCCSRule4();
    rule  AltA-IneligibleCCCSRule5();

end // ruleset AltA-CCCSExceptionRuleset




alias(ruleset, AltA-Chapter13BKExceptionRuleset, "AltA-Chapter 13 BK Exception Ruleset");

/* ==========================================================================
 * AltA-Chapter13BKExceptionRuleset
 *
 *
 */
ruleset AltA-Chapter13BKExceptionRuleset(continue)
    rule  AltA-IneligibleChapter13BKRule1();
    rule  AltA-IneligibleChapter13BKRuleGT80();
    rule  AltA-IneligibleChapter13BKRule2();
    rule  AltA-IneligibleChap13BKRuleLatesGT80();
    rule  AltA-IneligibleChapter13BKRule3();
    rule  AltA-IneligibleChapter13BKRule4();

end // ruleset AltA-Chapter13BKExceptionRuleset




alias(ruleset, AltA-Chapter7BKExceptionRuleset, "AltA-Chapter 7 BK Exception Ruleset");

/* ==========================================================================
 * AltA-Chapter7BKExceptionRuleset
 *
 *
 */
ruleset AltA-Chapter7BKExceptionRuleset(continue)
    rule  AltA-IneligibleChapter7BKRule1();
    rule  AltA-IneligibleChapter7BKRuleGT80();
    rule  AltA-IneligibleChapter7BKRule2();
    rule  AltA-IneligibleChap7BKRuleLatesGT80();
    rule  AltA-IneligibleChapter7BKRule3();
    rule  AltA-IneligibleChapter7BKRule4();

end // ruleset AltA-Chapter7BKExceptionRuleset




alias(ruleset, AltA-CondCitizenRulesetRuleset, "AltA-Cond Citizen Ruleset Ruleset");

/* ==========================================================================
 * AltA-CondCitizenRulesetRuleset
 *
 *
 */
ruleset AltA-CondCitizenRulesetRuleset(continue)
    rule  SubP-ConditionsPermResidentAliens1();
    rule  AltA-CondNonPermResidentDocumentation();

end // ruleset AltA-CondCitizenRulesetRuleset




alias(ruleset, AltA-CondEarnestDepositRuleset, "AltA-Cond Earnest Deposit Ruleset");

/* ==========================================================================
 * AltA-CondEarnestDepositRuleset
 *
 *
 */
ruleset AltA-CondEarnestDepositRuleset(true)
    rule  AltA-CondEarnestDepositRule1();
    rule  AltA-CondEarnestDepositRule2();

end // ruleset AltA-CondEarnestDepositRuleset




alias(ruleset, AltA-CondGiftFundsRuleset, "AltA-Cond Gift Funds Ruleset");

/* ==========================================================================
 * AltA-CondGiftFundsRuleset
 *
 *
 */
ruleset AltA-CondGiftFundsRuleset(continue)
    rule  AltA-CondGiftFundsRule1();
    rule  AltA-CondGiftFundsRule2();

end // ruleset AltA-CondGiftFundsRuleset




alias(ruleset, AltA-CondGiftofEquityRuleset, "AltA-Cond Gift of Equity Ruleset");

/* ==========================================================================
 * AltA-CondGiftofEquityRuleset
 *
 *
 */
ruleset AltA-CondGiftofEquityRuleset(continue)
    rule  AltA-CondGiftofEquityRule1();
    rule  AltA-CondGiftofEquityRule2();
    rule  AltA-CondGiftofEquityRule3();
    rule  AltA-CondGiftofEquityRule4();

end // ruleset AltA-CondGiftofEquityRuleset




alias(ruleset, AltA-ConditionsGeneralRuleset, "AltA-Conditions General Ruleset");

/* ==========================================================================
 * AltA-ConditionsGeneralRuleset
 *
 *
 */
ruleset AltA-ConditionsGeneralRuleset(continue)
    rule  AltA-CondGeneralRule1();
    rule  AltA-CondGeneralRule2();
    rule  AltA-CondAllLoansRule3();
    rule  AltA-CondAllLoansRule4();
    rule  AltA-CondAllLoansRule5();
    rule  G-HudRepoApprslReview();
    rule  G-CondoAttPudApprslReview();

end // ruleset AltA-ConditionsGeneralRuleset




alias(ruleset, AltA-CondNon-OccCo-BorrIRuleset, "AltA-Cond Non-Occ Co-Borr I Ruleset");

/* ==========================================================================
 * AltA-CondNon-OccCo-BorrIRuleset
 *
 *
 */
ruleset AltA-CondNon-OccCo-BorrIRuleset(continue)
    rule  AltA-CondNon-OccCo-BorrIRule1();
    rule  AltA-CondNon-OccCo-BorrIRule2();

end // ruleset AltA-CondNon-OccCo-BorrIRuleset




alias(ruleset, AltA-CondNon-OccCoBorrIIRuleset, "AltA-Cond Non-Occ Co Borr II Ruleset");

/* ==========================================================================
 * AltA-CondNon-OccCoBorrIIRuleset
 *
 *
 */
ruleset AltA-CondNon-OccCoBorrIIRuleset(true)
    rule  AltA-CondNon-OccCo-BorrIIRule1();
    rule  AltA-CondNon-OccCo-BorrIIRule2();

end // ruleset AltA-CondNon-OccCoBorrIIRuleset




alias(ruleset, AltA-CondOccRuleset, "AltA-Cond Occ Ruleset");

/* ==========================================================================
 * AltA-CondOccRuleset
 *
 *
 */
ruleset AltA-CondOccRuleset(continue)
    rule  G-CondOccRule1();
    rule  G-CondOccRule2();

end // ruleset AltA-CondOccRuleset




alias(ruleset, AltA-CondPublicRecordsRuleset, "AltA-Cond Public Records Ruleset");

/* ==========================================================================
 * AltA-CondPublicRecordsRuleset
 *
 *
 */
ruleset AltA-CondPublicRecordsRuleset(continue)
    rule  AltA-CondPublcRecordsRule1();
    rule  AltA-CondPublcRecordsRule2();

end // ruleset AltA-CondPublicRecordsRuleset




alias(ruleset, AltA-CondRe-estdTLNRuleset, "AltA-Cond Re-estd TLN Ruleset");

/* ==========================================================================
 * AltA-CondRe-estdTLNRuleset
 *
 *
 */
ruleset AltA-CondRe-estdTLNRuleset(continue)
    rule  AltA-AltA-CondRe-estdTLN1();
    rule  AltA-AltA-CondRe-estdTLN2();

end // ruleset AltA-CondRe-estdTLNRuleset




alias(ruleset, AltA-CondSellerContribution, "AltA-Cond Seller Contribution");

/* ==========================================================================
 * AltA-CondSellerContribution
 *
 *
 */
ruleset AltA-CondSellerContribution(true)
    rule  G-PurchaseCheck();
    rule  AltA-CondSellerContributionRule1();
    rule  AltA-CondSellerContributionRule2();
    rule  AltA-CondSellerContributionRule3();
    rule  AltA-CondSellerContributionSecRes();
    rule  AltA-CondSellerContributionRule6();

end // ruleset AltA-CondSellerContribution




alias(ruleset, AltA-CondSubFinRuleset, "AltA-Cond Sub Fin Ruleset");

/* ==========================================================================
 * AltA-CondSubFinRuleset
 *
 *
 */
ruleset AltA-CondSubFinRuleset(continue)
    rule  AltA-CondSubFinRule1();
    rule  AltA-CondSubFinRule2();

end // ruleset AltA-CondSubFinRuleset




alias(ruleset, AltA-CondTransTypeRuleset, "AltA-Cond Trans Type Ruleset");

/* ==========================================================================
 * AltA-CondTransTypeRuleset
 *
 *
 */
ruleset AltA-CondTransTypeRuleset(continue)
    rule  AltA-CondTransTypeRule2();
    rule  AltA-CondTransTypeRule3();

end // ruleset AltA-CondTransTypeRuleset




alias(ruleset, AltA-CondVOMVORRuleset, "AltA-Cond VOM VOR Ruleset");

/* ==========================================================================
 * AltA-CondVOMVORRuleset
 *
 *
 */
ruleset AltA-CondVOMVORRuleset(true)
    rule  G-CondNonSelfEmp-SIVA-FTHB();
    rule  G-CondNonSelfEmp-NoRatio-CLTV();
    rule  AltA-CondVOMVORRule();
    rule  AltA-CondVOMVORRule1();
    rule  AltA-CondVOMVORRule2();

end // ruleset AltA-CondVOMVORRuleset




alias(ruleset, AltA-DocRequirementConditionsRuleset, "AltA-Doc Requirement Conditions Ruleset");

/* ==========================================================================
 * AltA-DocRequirementConditionsRuleset
 *
 *
 */
ruleset AltA-DocRequirementConditionsRuleset(continue)
    rule  AltA-ConditionsDocVODReqRule();
    rule  AltA-ConditionsDocReqRule1();
    rule  AltA-ConditionsDocReqRule2();
    rule  AltA-ConditionsDocReqRule3();
    rule  AltA-ConditionsDocReqRule4();
    rule  AltA-ConditionsDocReqRule5();
    rule  AltA-ConditionsDocReqRule5a();
    rule  AltA-ConditionsDocReqRule6();
    rule  AltA-ConditionsDocReqRule7();
    rule  AltA-ConditionsDocReqRule8();
    rule  AltA-ConditionsDocReqRule9();
    rule  AltA-ConditionsDocReqRule10();
    rule  AltA-ConditionsDocReqRule11();
    rule  AltA-ConditionsDocVOESameLineWork();
    rule  G-Cond1YrFullDocSalary();
    rule  G-Cond1YrFullDocSelfEmp();
    rule  G-Cond24MthBankStmtSalary();
    rule  G-Cond24MthBankStmtSelfEmp();
    rule  G-CondREOsGrossRent2();
    rule  G-CondSivaDocRequiredAssetsLTE1Mil();
    rule  G-CondSivaDocRequiredAssetsGT1Mil();

end // ruleset AltA-DocRequirementConditionsRuleset




alias(ruleset, AltA-DownPaymentConditionRuleset, "AltA-Down Payment Condition Ruleset");

/* ==========================================================================
 * AltA-DownPaymentConditionRuleset
 *
 *
 */
ruleset AltA-DownPaymentConditionRuleset(true)
    rule  AltA-CondDownPaymtNOORule();
    rule  AltA-CondDownPaymtRule1();
    rule  AltA-CondDownPaymtRule2();

end // ruleset AltA-DownPaymentConditionRuleset




alias(ruleset, AltA-DTIExceptionRuleset, "AltA-DTI Exception Ruleset");

/* ==========================================================================
 * AltA-DTIExceptionRuleset
 *
 *
 */
ruleset AltA-DTIExceptionRuleset(true)
    rule  AltA-IneligibleDTIRule1();
    rule  AltA-IneligibleDTIRule2();

end // ruleset AltA-DTIExceptionRuleset




alias(ruleset, AltA-ForeclosureExceptionRuleset, "AltA-Foreclosure Exception Ruleset");

/* ==========================================================================
 * AltA-ForeclosureExceptionRuleset
 *
 *
 */
ruleset AltA-ForeclosureExceptionRuleset(continue)
    rule  AltA-IneligibleForeclosureRule1();
    rule  AltA-IneligibleForeclosureRule2();
    rule  AltA-IneligibleForeclosureRule3();
    rule  AltA-IneligibleForeclosureRule4();
    rule  AltA-IneligibleForeclosureRule5();

end // ruleset AltA-ForeclosureExceptionRuleset




alias(ruleset, AltA-ForeignNationalExceptionRuleset, "AltA-Foreign National Exception Ruleset");

/* ==========================================================================
 * AltA-ForeignNationalExceptionRuleset
 *
 *
 */
ruleset AltA-ForeignNationalExceptionRuleset(true)
    rule  G-IneligibleForeignNationalBorrowers();
    rule  AltA-IneligibleForeignNationalRule1();
    rule  AltA-IneligibleForeignNationalRule2();
    rule  AltA-IneligibleForeignNationalRule3();
    rule  AltA-IneligibleForeignNationalRule4();
    rule  AltA-IneligibleForeignNationalRule5();

end // ruleset AltA-ForeignNationalExceptionRuleset




alias(ruleset, AltA-ForNatlCondRuleset, "AltA-For Natl Cond Ruleset");

/* ==========================================================================
 * AltA-ForNatlCondRuleset
 *
 *
 */
ruleset AltA-ForNatlCondRuleset(continue)
    rule  AltA-CondForNatlRule1();
    rule  AltA-CondForNatlRule2();
    rule  AltA-CondForNatlRule3();

end // ruleset AltA-ForNatlCondRuleset




alias(ruleset, AltA-FTHBExceptionRuleset, "AltA-FTHB Exception Ruleset");

/* ==========================================================================
 * AltA-FTHBExceptionRuleset
 *
 *
 */
ruleset AltA-FTHBExceptionRuleset(true)
    rule  G-IneligibleFTHBRule1();
    rule  AltA-IneligibleFTHBRule2();

end // ruleset AltA-FTHBExceptionRuleset




alias(ruleset, AltA-FTHBRuleset, "AltA-FTHB Ruleset");

/* ==========================================================================
 * AltA-FTHBRuleset
 *
 *
 */
ruleset AltA-FTHBRuleset(true)
    rule  G-FTHBRule2();
    rule  AltA-PrimaryFirstTimeHomeBuyer();

end // ruleset AltA-FTHBRuleset





/* ==========================================================================
 * AltA-Initialization
 *
 *
 */
ruleset AltA-Initialization(true)
    rule  AltA-Initialization-1();

end // ruleset AltA-Initialization




alias(ruleset, AltA-LoanAmountConditionsRuleset, "AltA-Loan Amount Conditions Ruleset");

/* ==========================================================================
 * AltA-LoanAmountConditionsRuleset
 *
 *
 */
ruleset AltA-LoanAmountConditionsRuleset(continue)
    rule  AltA-CondLnAmtRule1();
    rule  AltA-CondLnAmtRule2();
    rule  G-CondCAAppraisalReview-GT650LTEQ1500K();
    rule  G-CondCAAppraisalReview-GT1500K();

end // ruleset AltA-LoanAmountConditionsRuleset




alias(ruleset, AltA-MaxCashOut, "AltA-Max Cash Out");

/* ==========================================================================
 * AltA-MaxCashOut
 *
 *
 */
ruleset AltA-MaxCashOut(false)
    rule  AltA-Cashout();
    rule  AltA-MaxCashOut80LTV();

end // ruleset AltA-MaxCashOut




alias(ruleset, AltA-MaxDTILimitsCalcRuleset, "AltA-Max DTI Limits Calc Ruleset");

/* ==========================================================================
 * AltA-MaxDTILimitsCalcRuleset
 *
 *
 */
ruleset AltA-MaxDTILimitsCalcRuleset(true)
    rule  MaxDTIReducedDocTypes-AltA();
    rule  AltA-MaxDtiSivaLiteDoc();
    rule  AltA-MaxDTIInvestment();
    rule  AltA-MaxDTIPriSecResidence();

end // ruleset AltA-MaxDTILimitsCalcRuleset




alias(ruleset, AltA-MaxLimitsReductionCalcRuleset, "AltA-Max Limits Reduction Calc Ruleset");

/* ==========================================================================
 * AltA-MaxLimitsReductionCalcRuleset
 *
 *
 */
ruleset AltA-MaxLimitsReductionCalcRuleset(continue)
    rule  AltA-MaxCLTVRednFTHB();
    rule  AltA-MaxLTVRednFTHB();
    rule  AltA-MinFICORednFTHB();
    rule  AltA-MaxCLTVLeashold();
    rule  AltA-MaxLTVLeashold();
    rule  AltA-MaxCLTVRednNonOccCoBorr();
    rule  AltA-MaxLTVRednNonOccCoBorr();
    rule  AltA-MaxLTVRednSecondaryFinanci();
    rule  AltA-MaxCLTVForNatl1();
    rule  AltA-MaxLTVForNatl1();
    rule  AltA-MaxCLTVForNatl2();
    rule  AltA-MaxLTVForNatl2();
    rule  AltA-MaxCLTVRednForNatlHRCondo();
    rule  NoMI-MaxLTVHighRiseCondo();

end // ruleset AltA-MaxLimitsReductionCalcRuleset





/* ==========================================================================
 * AltA-MinMax
 *
 *
 */
ruleset AltA-MinMax(true)
    rule  AltA-MinMax-1();
    rule  AltA-MinMax-2();
    rule  AltA-MinMax-3();
    rule  AltA-MinMax-4();
    rule  AltA-MinMax-5();
    rule  AltA-MinMax-6();
    rule  AltA-MinMax-7();
    rule  AltA-MinMax-8();
    rule  AltA-MinMax-9();
    rule  AltA-MinMax-10();
    rule  AltA-MinMax-11();
    rule  AltA-MinMax-12();
    rule  AltA-MinMax-13();
    rule  AltA-MinMax-14();
    rule  AltA-MinMax-15();
    rule  AltA-MinMax-16();
    rule  AltA-MinMax-17();
    rule  AltA-MinMax-18();
    rule  AltA-MinMax-19();
    rule  AltA-MinMax-20();
    rule  AltA-MinMax-21();
    rule  AltA-MinMax-22();
    rule  AltA-MinMax-23();
    rule  AltA-MinMax-24();
    rule  AltA-MinMax-25();
    rule  AltA-MinMax-26();
    rule  AltA-MinMax-27();
    rule  AltA-MinMax-28();
    rule  AltA-MinMax-29();
    rule  AltA-MinMax-30();
    rule  AltA-MinMax-31();
    rule  AltA-MinMax-32();
    rule  AltA-MinMax-33();
    rule  AltA-MinMax-34();
    rule  AltA-MinMax-35();
    rule  AltA-MinMax-36();
    rule  AltA-MinMax-37();
    rule  AltA-MinMax-38();
    rule  AltA-MinMax-39();
    rule  AltA-MinMax-40();
    rule  AltA-MinMax-41();
    rule  AltA-MinMax-42();
    rule  AltA-MinMax-43();
    rule  AltA-MinMax-44();
    rule  AltA-MinMax-45();
    rule  AltA-MinMax-46();
    rule  AltA-MinMax-47();
    rule  AltA-MinMax-48();

end // ruleset AltA-MinMax





/* ==========================================================================
 * AltA-NoMICheck
 *
 *
 */
ruleset AltA-NoMICheck(continue)
    rule  AltA-NoMICheck();

end // ruleset AltA-NoMICheck




alias(ruleset, AltA-Non-PermanentResidentAliensExceptionRules, "AltA-Non-Permanent Resident Aliens Exception Rules");

/* ==========================================================================
 * AltA-Non-PermanentResidentAliensExceptionRules
 *
 *
 */
ruleset AltA-Non-PermanentResidentAliensExceptionRules(true)
    rule  AltA-IneligibleNon-PermRes();
    rule  AltA-IneligibleNon-PermResRule1();
    rule  AltA-IneligibleNon-PermResRule2();
    rule  AltA-IneligibleNon-PermResRule3();

end // ruleset AltA-Non-PermanentResidentAliensExceptionRules




alias(ruleset, AltA-OccupancyExceptionRuleset, "AltA-Occupancy Exception Ruleset");

/* ==========================================================================
 * AltA-OccupancyExceptionRuleset
 *
 *
 */
ruleset AltA-OccupancyExceptionRuleset(continue)
    rule  AltA-IneligibleOccupancyRule1();
    rule  AltA-IneligibleOccupancyRule2();

end // ruleset AltA-OccupancyExceptionRuleset




alias(ruleset, AltA-PrimaryBorrowerRuleset, "AltA-Primary Borrower Ruleset");

/* ==========================================================================
 * AltA-PrimaryBorrowerRuleset
 *
 *
 */
ruleset AltA-PrimaryBorrowerRuleset(true)
    rule  AltA-PrimaryBorrowerCalc1();
    rule  AltA-PrimaryBorrowerCalc2();
    rule  AltA-PrimaryBorrowerCalc3();

end // ruleset AltA-PrimaryBorrowerRuleset




alias(ruleset, AltA-RepFICOScoreRuleset, "AltA-Rep FICO Score Ruleset");

/* ==========================================================================
 * AltA-RepFICOScoreRuleset
 *
 *
 */
ruleset AltA-RepFICOScoreRuleset(true)
    rule  AltA-RepFICOScoreCalc1();
    rule  AltA-RepFICOScoreCalc2();
    rule  AltA-RepFICOScoreCalc3();

end // ruleset AltA-RepFICOScoreRuleset




alias(ruleset, AltA-ReservesConditionsRuleset, "AltA-Reserves Conditions Ruleset");

/* ==========================================================================
 * AltA-ReservesConditionsRuleset
 *
 *
 */
ruleset AltA-ReservesConditionsRuleset(true)
    rule  G-ReservesReqWaiveDupCondLivRntFree();
    rule  AltA-CondReservesNDNINA();
    rule  G-NoReservesRequiredExit();
    rule  AltA-CondReserves();

end // ruleset AltA-ReservesConditionsRuleset





/* ==========================================================================
 * AltA-RetentionMaxLTV
 *
 *
 */
ruleset AltA-RetentionMaxLTV(true)
    rule  AltA-RetentionSVLLDoc95LTV();

end // ruleset AltA-RetentionMaxLTV





/* ==========================================================================
 * AltA-SetDocTypeAbbrev
 *
 *
 */
ruleset AltA-SetDocTypeAbbrev(true)
    rule  AltA-SetDocTypeAbbrev-1();
    rule  AltA-SetDocTypeAbbrev-2();
    rule  AltA-SetDocTypeAbbrev-3();
    rule  AltA-SetDocTypeAbbrev-4();
    rule  AltA-SetDocTypeAbbrev-5();
    rule  AltA-SetDocTypeAbbrev-6();
    rule  AltA-SetDocTypeAbbrev-7();
    rule  AltA-SetDocTypeAbbrev-8();
    rule  AltA-SetDocTypeAbbrev-9();
    rule  AltA-SetDocTypeAbbrev-10();
    rule  AltA-SetDocTypeAbbrev-11();

end // ruleset AltA-SetDocTypeAbbrev




alias(ruleset, AltA-SourceofFundsExceptionRuleset, "AltA-Source of Funds Exception Ruleset");

/* ==========================================================================
 * AltA-SourceofFundsExceptionRuleset
 *
 *
 */
ruleset AltA-SourceofFundsExceptionRuleset(continue)
    rule  AltA-IneligibleSourceofFundsRule1();
    rule  AltA-IneligibleSourceofFundsRule2();

end // ruleset AltA-SourceofFundsExceptionRuleset




alias(ruleset, AltA-TexasCORefiExceptionRuleset, "AltA-Texas CO Refi Exception Ruleset");

/* ==========================================================================
 * AltA-TexasCORefiExceptionRuleset
 *
 *
 */
ruleset AltA-TexasCORefiExceptionRuleset(continue)
    rule  G-IneligibleTXCashOutNonWarrCondo();
    rule  AltA-IneligibleTexasCORefiRule2();
    rule  AltA-IneligibleTexasCORefiRule3();
    rule  AltA-IneligibleTexasCORefiRule4();
    rule  AltA-IneligibleTexasCORefiRule5();
    rule  AltA-IneligibleTexasCORefiRule6();
    rule  AltA-IneligibleTexasCORefiRule7();
    rule  AltA-IneligibleTexasCORefiRule8();
    rule  AltA-IneligibleTexasCORefiLockPeriod();
    rule  AltA-IneligibleTexasCORefiMaxCltv();
    rule  G-IneligibleTexasCORefiMinFico();

end // ruleset AltA-TexasCORefiExceptionRuleset




alias(ruleset, AltA-TradelinesExceptionRuleset, "AltA-Tradelines Exception Ruleset");

/* ==========================================================================
 * AltA-TradelinesExceptionRuleset
 *
 *
 */
ruleset AltA-TradelinesExceptionRuleset(true)
    rule  AltA-MtgLateExceptionChk();
    rule  G-FullDocWaiveTradelines();
    rule  AltA-IneligibleTLN1MRule1();
    rule  G-NonTradTLNLT1Mil70CLTV();
    rule  AltA-IneligibleTLN1M70CLTVRule1();
    rule  G-CondNonTradTLNLT1Mil();
    rule  G-TLNLT1Mil70CLTV();
    rule  G-TLNLT1Mil70CLTVCoBorr();
    rule  G-NonTradTLNChk();

end // ruleset AltA-TradelinesExceptionRuleset




alias(ruleset, AltA-VirtualFCConditionRuleset, "AltA-Virtual FC Condition Ruleset");

/* ==========================================================================
 * AltA-VirtualFCConditionRuleset
 *
 *
 */
ruleset AltA-VirtualFCConditionRuleset(true)
    rule  AltA-VirtualFCConditionRule1();
    rule  AltA-VirtualFCConditionRule2();

end // ruleset AltA-VirtualFCConditionRuleset





/* ==========================================================================
 * G-APRStateRestrictions
 *
 *
 */
ruleset G-APRStateRestrictions(continue)
    rule  G-StateOKRestrictionsAPR();
    rule  G-StateCORestrictionsAPR();

end // ruleset G-APRStateRestrictions





/* ==========================================================================
 * G-CalcTotalIncomeAmt
 *
 *
 */
ruleset G-CalcTotalIncomeAmt(true)
    rule  G-CalcTotalIncome-FullDoc();
    rule  G-CalcTotalIncome-Stated();

end // ruleset G-CalcTotalIncomeAmt




alias(ruleset, G-CheckOtherFinancingRuleset, "G-CheckOtherFinancing Ruleset");

/* ==========================================================================
 * G-CheckOtherFinancingRuleset
 *
 *
 */
ruleset G-CheckOtherFinancingRuleset(true)
    rule  G-CheckOtherFinancingRule1();
    rule  G-CheckOtherFinancingRule2();
    rule  G-CheckOtherFinancingRule3();

end // ruleset G-CheckOtherFinancingRuleset





/* ==========================================================================
 * G-CLTVNoDocExceptions
 *
 *
 */
ruleset G-CLTVNoDocExceptions(continue)
    rule  G-CLTVNoDocExceptions();
    rule  G-CLTVNoDocFTHBExceptions();
    rule  G-CLTVNoDocfNonTradTLReqd();

end // ruleset G-CLTVNoDocExceptions




alias(ruleset, G-ColoradoRuleset, "G-Colorado Ruleset");

/* ==========================================================================
 * G-ColoradoRuleset
 *
 *
 */
ruleset G-ColoradoRuleset(continue)
    rule  G-CondColoradoDisclosureForm();

end // ruleset G-ColoradoRuleset





/* ==========================================================================
 * G-Cond-GdlExpiration
 *
 *
 */
ruleset G-Cond-GdlExpiration(true)
    rule  G-Cond-GdlExp-Whsl();
    rule  G-Cond-GdlExp-Corr();

end // ruleset G-Cond-GdlExpiration




alias(ruleset, G-CondDeclarationsRuleset, "G-Cond Declarations Ruleset");

/* ==========================================================================
 * G-CondDeclarationsRuleset
 *
 *
 */
ruleset G-CondDeclarationsRuleset(continue)
    rule  G-DeclarationaRule();
    rule  G-DeclarationbRule();
    rule  G-DeclarationcRule();
    rule  G-DeclarationdRule();
    rule  G-DeclarationeRule();
    rule  G-DeclarationfRule();
    rule  G-DeclarationgRule();
    rule  G-DeclarationhRule();
    rule  G-DeclarationiRule();

end // ruleset G-CondDeclarationsRuleset




alias(ruleset, G-ConditionsGeneral, "G-Conditions General");

/* ==========================================================================
 * G-ConditionsGeneral
 *
 *
 */
ruleset G-ConditionsGeneral(continue)
    rule  G-CondBrokerSubmissionForm();
    rule  G-CondInitial_1003();
    rule  G-CondFloodCert();
    rule  G-CondStandardFinalDocumentReview();
    rule  G-CondInconsistantPPSD();
    rule  G-CondNoDataInMtgPaymentPattern();
    rule  G-CondPropertySurvey();
    rule  G-CondMSMtgAgreemt();
    rule  HLK-CondInitialDraw();
    rule  G-IneligibleCountyWV();
    rule  Conditions-State-NV();

end // ruleset G-ConditionsGeneral




alias(ruleset, G-ConditionsGrossRentRuleset, "G-Conditions Gross Rent Ruleset");

/* ==========================================================================
 * G-ConditionsGrossRentRuleset
 *
 *
 */
ruleset G-ConditionsGrossRentRuleset(true)
    rule  G-ConditionsGrossRentRule1();
    rule  G-ConditionsGrossRentRule2();

end // ruleset G-ConditionsGrossRentRuleset




alias(ruleset, G-CondNetTangibleBenefit, "G-Cond Net Tangible Benefit");

/* ==========================================================================
 * G-CondNetTangibleBenefit
 *
 *
 */
ruleset G-CondNetTangibleBenefit(true)
    rule  G-CondMARefi();
    rule  G-CondMNRefi();

end // ruleset G-CondNetTangibleBenefit




alias(ruleset, G-CondNonTraditionalTDLNGT1Mil, "G-Cond NonTraditionalTDLN GT 1 Mil");

/* ==========================================================================
 * G-CondNonTraditionalTDLNGT1Mil
 *
 *
 */
ruleset G-CondNonTraditionalTDLNGT1Mil(continue)
    rule  G-CondNonTraditionalTDLNGT1Mil();

end // ruleset G-CondNonTraditionalTDLNGT1Mil





/* ==========================================================================
 * G-CondPaymentShockExceeded
 *
 *
 */
ruleset G-CondPaymentShockExceeded(true)
    rule  G-CondPaymentShockExceededSIVA();
    rule  G-CondPaymentShockExceededNoRatio();
    rule  G-CondPaymentShockExceededNoDoc();
    rule  G-PaymentShockSelfEmpLTE90CLTV();
    rule  G-CondPaymentShockMaxLT4X();
    rule  G-PaymentShockMax4XPlus();

end // ruleset G-CondPaymentShockExceeded




alias(ruleset, G-CondRateTermRefi, "G-Cond RateTermRefi");

/* ==========================================================================
 * G-CondRateTermRefi
 *
 *
 */
ruleset G-CondRateTermRefi(true)
    rule  G-CondRateTermTexas();
    rule  AltA-CondRateTerm();

end // ruleset G-CondRateTermRefi




alias(ruleset, G-CondREOsGrossRentRuleset, "G-Cond REOs Gross Rent Ruleset");

/* ==========================================================================
 * G-CondREOsGrossRentRuleset
 *
 *
 */
ruleset G-CondREOsGrossRentRuleset(true)
    rule  G-CondREOsGrossRent1();
    rule  G-CondREOsGrossRent1a();
    rule  G-CondREOsGrossRent2();

end // ruleset G-CondREOsGrossRentRuleset





/* ==========================================================================
 * G-DefaultMessages
 *
 *
 */
ruleset G-DefaultMessages(continue)
    rule  G-CheckCompatibilityOf1st();
    rule  G-CheckCompatibilityOf2nd();
    rule  G-DefaultReferralMsg();

end // ruleset G-DefaultMessages





/* ==========================================================================
 * G-DeprecatedDPMs
 *
 *
 */
ruleset G-DeprecatedDPMs(true)
    rule  G-DeprecatedDPMs-1();

end // ruleset G-DeprecatedDPMs




alias(ruleset, G-FloridaPropertyRestrictions, "G-Florida Property Restrictions");

/* ==========================================================================
 * G-FloridaPropertyRestrictions
 *
 *
 */
ruleset G-FloridaPropertyRestrictions(continue)
    rule  G-MaxFloridaCondoCLtv();

end // ruleset G-FloridaPropertyRestrictions




alias(ruleset, G-ForeignNationalNoFICORuleset, "G-ForeignNationalNoFICO Ruleset");

/* ==========================================================================
 * G-ForeignNationalNoFICORuleset
 *
 *
 */
ruleset G-ForeignNationalNoFICORuleset(continue)
    rule  G-ForeignNationalNoFICOBorr1();
    rule  G-ForeignNationalNoFICOBorr2();
    rule  G-ForeignNationalNoFICOBorr3();
    rule  G-ForeignNationalNoFICOBorr4();
    rule  G-ForeignNationalNoFICOBorr5();

end // ruleset G-ForeignNationalNoFICORuleset





/* ==========================================================================
 * G-HawaiiMaxLoanAmt
 *
 *
 */
ruleset G-HawaiiMaxLoanAmt(true)
    rule  G-HawaiiCheck();
    rule  G-HawaiiCltvGT90();
    rule  G-Hawaii1UnitCltvGT80LTE90();
    rule  G-Hawaii2UnitCltvGT80LTE90();
    rule  G-Hawaii3UnitCltvGT80LTE90();
    rule  G-Hawaii4UnitCltvGT80LTE90();
    rule  G-Hawaii1UnitCltvLTE80();
    rule  G-Hawaii2UnitCltvLTE80();
    rule  G-Hawaii3UnitCltvLTE80();
    rule  G-Hawaii4UnitCltvLTE80();

end // ruleset G-HawaiiMaxLoanAmt





/* ==========================================================================
 * G-Ineligible-DocType
 *
 *
 */
ruleset G-Ineligible-DocType(true)
    rule  G-IneligibleDocType-SISA();
    rule  G-IneligibleDocType-NINA();

end // ruleset G-Ineligible-DocType





/* ==========================================================================
 * G-Ineligible-PaymentShock
 *
 *
 */
ruleset G-Ineligible-PaymentShock(true)
    rule  G-IneligiblePaymentShock2();
    rule  G-IneligiblePaymentShock();
    rule  G-IneligiblePaymentShock-LivingRentFree-1();
    rule  G-IneligiblePaymentShock-LivingRentFree-2();

end // ruleset G-Ineligible-PaymentShock





/* ==========================================================================
 * G-IneligibleBalloonState
 *
 *
 */
ruleset G-IneligibleBalloonState(true)
    rule  G-IneligibleNY6Mo2YrARMBalloon();

end // ruleset G-IneligibleBalloonState




alias(ruleset, G-IneligibleCLTVRuleset, "G-Ineligible CLTV Ruleset");

/* ==========================================================================
 * G-IneligibleCLTVRuleset
 *
 *
 */
ruleset G-IneligibleCLTVRuleset(true)
    rule  G-IneligibleCLTVMaxCLTVNotZero();
    rule  G-IneligibleCLTVMaxCLTVZero();

end // ruleset G-IneligibleCLTVRuleset





/* ==========================================================================
 * G-IneligibleCondo
 *
 *
 */
ruleset G-IneligibleCondo(continue)
    rule  G-IneligibleCondoMinFico();
    rule  G-IneligibleNonWarrCondo();
    rule  G-IneligibleCondoGT70LtvCltv();
    rule  G-IneligibleCondoGT90LtvCltv();

end // ruleset G-IneligibleCondo




alias(ruleset, G-IneligibleEmploymentField, "G-Ineligible EmploymentField");

/* ==========================================================================
 * G-IneligibleEmploymentField
 *
 *
 */
ruleset G-IneligibleEmploymentField(continue)
    rule  G-IneligibleEmploymentCk();
    rule  G-IneligibleEmploymentInfoReq();
    rule  G-IneligibleEmploymentNoDoc();

end // ruleset G-IneligibleEmploymentField




alias(ruleset, G-IneligibleIANoteRate, "G-Ineligible IA NoteRate");

/* ==========================================================================
 * G-IneligibleIANoteRate
 *
 *
 */
ruleset G-IneligibleIANoteRate(continue)
    rule  G-IneligibleIowaIntRate2nd();

end // ruleset G-IneligibleIANoteRate




alias(ruleset, G-IneligibleLTVRuleset, "G-Ineligible LTV Ruleset");

/* ==========================================================================
 * G-IneligibleLTVRuleset
 *
 *
 */
ruleset G-IneligibleLTVRuleset(true)
    rule  G-IneligibleLTVMaxLTVNotZero();
    rule  G-IneligibleLTVMaxLTVZero();

end // ruleset G-IneligibleLTVRuleset




alias(ruleset, G-IneligibleMaxLoanAmount, "G-Ineligible Max Loan Amount");

/* ==========================================================================
 * G-IneligibleMaxLoanAmount
 *
 *
 */
ruleset G-IneligibleMaxLoanAmount(true)
    rule  G-IneligibleMaxLoanAmount();
    rule  G-IneligibleMaxLoanAmount2();
    rule  G-IneligibleMaxLoanAmount3();

end // ruleset G-IneligibleMaxLoanAmount




alias(ruleset, G-IneligiblePPCheckRuleset, "G-Ineligible PP Check Ruleset");

/* ==========================================================================
 * G-IneligiblePPCheckRuleset
 *
 *
 */
ruleset G-IneligiblePPCheckRuleset(true)
    rule  G-Ineligible4MonthPrepay();
    rule  G-UserTypeNotBrokerorRetention();
    rule  G-IneligiblePP-CONoteRate();
    rule  G-IneligiblePP-WY1st();
    rule  G-IneligiblePP-FL2ndNoteRate();
    rule  G-IneligiblePP-WY2nd();
    rule  G-IneligiblePP-IA1st();
    rule  G-IneligiblePP-IA2nd();
    rule  G-IneligiblePP-ILNoteRate();
    rule  G-IneligiblePP-KS();
    rule  G-IneligiblePP-MD();
    rule  G-IneligiblePPTerm2ndMD();
    rule  G-IneligiblePP-ME1st();
    rule  G-IneligiblePP-ME2nd();
    rule  G-IneligiblePPTerm-MN();
    rule  G-IneligiblePPTerm2nd-MN();
    rule  G-IneligiblePP-NCLoanAmt();
    rule  G-IneligiblePP-NCTerm();
    rule  G-IneligiblePP-NJ();
    rule  G-IneligiblePPTerm-NM();
    rule  G-IneligiblePP-NY2nd();
    rule  G-IneligiblePPNY2ndBalloons();
    rule  G-IneligiblePP-NYARMInitFixedPeriod();
    rule  G-IneligiblePP-NYTermARM();
    rule  G-IneligiblePP-NYTermFixed();
    rule  G-IneligiblePP-OK();
    rule  G-IneligiblePP-PA();
    rule  G-IneligiblePP-RI();
    rule  G-IneligiblePP-SC1st();
    rule  G-IneligiblePP-SC2nd();
    rule  G-IneligiblePP-TXNoteRate();
    rule  G-IneligiblePP-TXCO();
    rule  G-IneligiblePP-UT();
    rule  G-IneligiblePP-VT();
    rule  G-IneligiblePP-VT2nd();
    rule  G-IneligiblePP-WA();
    rule  G-IneligiblePP-WI2nd();
    rule  G-IneligiblePP-WIARM();

end // ruleset G-IneligiblePPCheckRuleset




alias(ruleset, G-IneligiblePPStatesRTNChnl, "G-Ineligible PP StatesRTNChnl");

/* ==========================================================================
 * G-IneligiblePPStatesRTNChnl
 *
 *
 */
ruleset G-IneligiblePPStatesRTNChnl(true)
    rule  G-IneligibleStatesRtnChannel();
    rule  G-IneligiblePP-WV();

end // ruleset G-IneligiblePPStatesRTNChnl




alias(ruleset, G-IneligibleProducts, "G-Ineligible Products");

/* ==========================================================================
 * G-IneligibleProducts
 *
 *
 */
ruleset G-IneligibleProducts(continue)
    rule  G-NoPrePayPenaltyFixedProducts();
    rule  G-No40due30();
    rule  G-No26MoLibor();
    rule  G-Ineligible6MoLiborMaxLtv80();

end // ruleset G-IneligibleProducts




alias(ruleset, G-IneligibleSecondaryFinance, "G-Ineligible SecondaryFinance");

/* ==========================================================================
 * G-IneligibleSecondaryFinance
 *
 *
 */
ruleset G-IneligibleSecondaryFinance(continue)
    rule  G-IneligibleSecondaryFinSOaProgram();

end // ruleset G-IneligibleSecondaryFinance





/* ==========================================================================
 * G-InheritedMaxCoLtvCltv
 *
 *
 */
ruleset G-InheritedMaxCoLtvCltv(continue)
    rule  G-InheritedPropMaxLtvCo();
    rule  G-InheritedPropMaxCltvCo();

end // ruleset G-InheritedMaxCoLtvCltv





/* ==========================================================================
 * G-Initialization
 *
 *
 */
ruleset G-Initialization(true)
    rule  G-Initialization-1();

end // ruleset G-Initialization





/* ==========================================================================
 * G-Integrate
 *
 *
 */
ruleset G-Integrate(continue)
    rule  CMT-NormalizeBkRules();
    rule  G-IntegrateBKs();
    rule  G-Integrate-NormalizeBk7();
    rule  G-Integrate-NormalizeBk13();
    rule  G-IntegrateForeclosures();
    rule  G-IntegrateMtgLates();

end // ruleset G-Integrate





/* ==========================================================================
 * G-Kansas
 *
 *
 */
ruleset G-Kansas(continue)
    rule  G-IneligibleKansas40or50DueIn30();
    rule  G-IneligibleKSNoteRate();

end // ruleset G-Kansas




alias(ruleset, G-MaineRuleset, "G-Maine Ruleset");

/* ==========================================================================
 * G-MaineRuleset
 *
 *
 */
ruleset G-MaineRuleset(continue)
    rule  G-IneligibleMaineProduct();
    rule  G-IneligibleMaineInterestRate2nd();

end // ruleset G-MaineRuleset




alias(ruleset, G-MarginAdjustmentsInit, "G-Margin Adjustments Init");

/* ==========================================================================
 * G-MarginAdjustmentsInit
 *
 *
 */
ruleset G-MarginAdjustmentsInit(true)
    rule  G-MarginAdjustmentsInit-1();

end // ruleset G-MarginAdjustmentsInit




alias(ruleset, G-MaxPPNoteRateRuleset, "G-Max PP Note Rate Ruleset");

/* ==========================================================================
 * G-MaxPPNoteRateRuleset
 *
 *
 */
ruleset G-MaxPPNoteRateRuleset(true)
    rule  G-UserTypeNotBrokerorRetention();
    rule  G-MaxPPNoteRateRule2();
    rule  G-MaxPPNoteRateRule3();
    rule  G-MaxPPNoteRateRule4();
    rule  G-MaxPPNoteRateRule1();
    rule  G-MaxPPNoteRateRule5();
    rule  G-MaxPPNoteRateCO();
    rule  G-MaxPPNoteRateFL();
    rule  G-MaxPPNoteRateMD();
    rule  G-MaxPPNoteRateME();
    rule  G-MaxPPNoteRateNYFixed();
    rule  G-MaxPPNoteRateNYARM();
    rule  G-MaxPPNoteRateNY2nd();
    rule  G-MaxPPNoteRateOK();
    rule  G-MaxPPNoteRateVT();
    rule  G-MaxPPNoteRateWY();

end // ruleset G-MaxPPNoteRateRuleset





/* ==========================================================================
 * G-MiActivation
 *
 *
 */
ruleset G-MiActivation(continue)
    rule  G-MiActivation();
    rule  G-CorrMiActivationCond();

end // ruleset G-MiActivation




alias(ruleset, G-MinLoanAmtExceptionRuleset, "G-Min Loan Amt Exception Ruleset");

/* ==========================================================================
 * G-MinLoanAmtExceptionRuleset
 *
 *
 */
ruleset G-MinLoanAmtExceptionRuleset(true)
    rule  G-IneligibleMinLoanAmtTXCORule();
    rule  G-IneligibleMinLoanAmount();

end // ruleset G-MinLoanAmtExceptionRuleset




alias(ruleset, G-MinnesotaRuleset, "G-Minnesota Ruleset");

/* ==========================================================================
 * G-MinnesotaRuleset
 *
 *
 */
ruleset G-MinnesotaRuleset(continue)
    rule  G-IneligibleMinnesotaDocType();
    rule  G-IneligibleMinnesotaProduct();

end // ruleset G-MinnesotaRuleset





/* ==========================================================================
 * G-MtgLateExceptions
 *
 *
 */
ruleset G-MtgLateExceptions(true)
    rule  G-IneligibleMtgLate();
    rule  G-IneligibleMtgLateJumbo();

end // ruleset G-MtgLateExceptions





/* ==========================================================================
 * G-Non-OccCoBorr
 *
 *
 */
ruleset G-Non-OccCoBorr(continue)
    rule  G-IneligibleNon-OccCo-Borr();
    rule  G-IneligibleNon-OccCo-BorrDocType();
    rule  G-IneligibleNon-OccCo-BorrMaxCltv();

end // ruleset G-Non-OccCoBorr





/* ==========================================================================
 * G-OccCoBorrFico
 *
 *
 */
ruleset G-OccCoBorrFico(continue)
    rule  G-OccCoBorr2FicoNoTL();
    rule  G-OccCoBorr3FicoNoTL();
    rule  G-OccCoBorr4FicoNoTL();
    rule  G-OccCoBorr5FicoNoTL();
    rule  G-OccCoBorrFico();

end // ruleset G-OccCoBorrFico





/* ==========================================================================
 * G-PaymentShockExceeded
 *
 *
 */
ruleset G-PaymentShockExceeded(continue)
    rule  G-PaymentShockReservesCk();
    rule  G-PaymentShockReservesFTHB();

end // ruleset G-PaymentShockExceeded





/* ==========================================================================
 * G-PermResidentAlienException
 *
 *
 */
ruleset G-PermResidentAlienException(true)
    rule  G-IneligiblePermResRule1();

end // ruleset G-PermResidentAlienException




alias(ruleset, G-PriceAdjustmentsInit, "G-Price Adjustments Init");

/* ==========================================================================
 * G-PriceAdjustmentsInit
 *
 *
 */
ruleset G-PriceAdjustmentsInit(true)
    rule  G-PriceAdjustmentsInit-1();

end // ruleset G-PriceAdjustmentsInit





/* ==========================================================================
 * G-PriResRetentionSet
 *
 *
 */
ruleset G-PriResRetentionSet(continue)
    rule  G-PriRetainResidenceInit();
    rule  G-PriResPendingSaleSold();
    rule  G-IneligiblePriResRetained();
    rule  G-IneligiblePriResNULL();

end // ruleset G-PriResRetentionSet




alias(ruleset, G-PropertyValueRuleset, "G-Property Value Ruleset");

/* ==========================================================================
 * G-PropertyValueRuleset
 *
 *
 */
ruleset G-PropertyValueRuleset(continue)
    rule  G-PropertyReviewValue();
    rule  G-PropertyValueAppraised();
    rule  G-PropertyValuePurchase();
    rule  G-PropertyValueRefinance();

end // ruleset G-PropertyValueRuleset




alias(ruleset, G-PurposeAbbrevRuleset, "G-Purpose Abbrev Ruleset");

/* ==========================================================================
 * G-PurposeAbbrevRuleset
 *
 *
 */
ruleset G-PurposeAbbrevRuleset(true)
    rule  G-PurposeAbbrevPurchase();
    rule  G-PurposeAbbrevCashOut();
    rule  G-PurposeAbbrevRateandTermRefi();

end // ruleset G-PurposeAbbrevRuleset




alias(ruleset, G-PurposeAbbrevRuleset2, "G-Purpose Abbrev Ruleset 2");

/* ==========================================================================
 * G-PurposeAbbrevRuleset2
 *
 *
 */
ruleset G-PurposeAbbrevRuleset2(true)
    rule  G-PurposeAbbrevPurchase();
    rule  G-PurposeAbbrevRateandTermRefi();
    rule  G-PurposeAbbrevCashOut();

end // ruleset G-PurposeAbbrevRuleset2




alias(ruleset, G-RateAdjustmentsInit, "G-Rate Adjustments Init");

/* ==========================================================================
 * G-RateAdjustmentsInit
 *
 *
 */
ruleset G-RateAdjustmentsInit(true)
    rule  G-RateAdjustmentsInit-1();

end // ruleset G-RateAdjustmentsInit




alias(ruleset, G-RatePriceDisplayRuleset, "G-Rate Price Display Ruleset");

/* ==========================================================================
 * G-RatePriceDisplayRuleset
 *
 *
 */
ruleset G-RatePriceDisplayRuleset(continue)
    rule  G-HandleDeprecatedLockPeriod1st();
    rule  G-HandleDeprecatedLockPeriod2nd();
    rule  G-RatePriceDisplayRule1();
    rule  G-RatePriceDisplayRule2();

end // ruleset G-RatePriceDisplayRuleset





/* ==========================================================================
 * G-ReservesCalcUsingCO
 *
 *
 */
ruleset G-ReservesCalcUsingCO(continue)
    rule  G-ReservesCalcUseCO1();
    rule  G-ReservesCalcUseCO2();

end // ruleset G-ReservesCalcUsingCO





/* ==========================================================================
 * G-ReservesNetofLoanProceeds
 *
 *
 */
ruleset G-ReservesNetofLoanProceeds(continue)
    rule  G-CondReservesNetOfProceeds();

end // ruleset G-ReservesNetofLoanProceeds





/* ==========================================================================
 * G-SelfEmployedFlag
 *
 *
 */
ruleset G-SelfEmployedFlag(continue)
    rule  G-SetSelfEmployedFlag();

end // ruleset G-SelfEmployedFlag





/* ==========================================================================
 * G-SelfEmployedRestrictions
 *
 *
 */
ruleset G-SelfEmployedRestrictions(true)
    rule  G-IneligibleNonSelfEmp-NoRatio();
    rule  G-IneligibleNonSelfEmp-SVLL();

end // ruleset G-SelfEmployedRestrictions





/* ==========================================================================
 * G-SetCOPropertyValue
 *
 *
 */
ruleset G-SetCOPropertyValue(continue)
    rule  G-PropertyReviewValue();
    rule  G-SetCOPropertyValue-Under75CLTV();
    rule  G-SetCOPropertyValue-Over75CLTV();

end // ruleset G-SetCOPropertyValue





/* ==========================================================================
 * G-SetCreditScoreIfSingleScore
 *
 *
 */
ruleset G-SetCreditScoreIfSingleScore(true)
    rule  G-ExitIfCreditScoreSet();
    rule  G-SetCreditScoreFromSingleScore();
    rule  G-MinCreditModelRestriction();

end // ruleset G-SetCreditScoreIfSingleScore





/* ==========================================================================
 * G-SetMinLoanAmount
 *
 *
 */
ruleset G-SetMinLoanAmount(true)
    rule  G-SetMinLoanAmount();

end // ruleset G-SetMinLoanAmount





/* ==========================================================================
 * G-SetMinMaxAbbrev
 *
 *
 */
ruleset G-SetMinMaxAbbrev(true)
    rule  G-SetMinMaxAbb-PRTOO1();
    rule  G-SetMinMaxAbb-PRTOO2-4();
    rule  G-SetMinMaxAbb-PRTSH1-2();
    rule  G-SetMinMaxAbb-PRTNOO1-2();
    rule  G-SetMinMaxAbb-PRTNOO3-4();
    rule  G-SetMinMaxAbb-COOO1();
    rule  G-SetMinMaxAbb-COOO2-4();
    rule  G-SetMinMaxAbb-COSH1-2();
    rule  G-SetMinMaxAbb-CONOO1-2();
    rule  G-SetMinMaxAbb-CONOO3-4();

end // ruleset G-SetMinMaxAbbrev





/* ==========================================================================
 * G-SetMinMaxAbbrevNEW
 *
 *
 */
ruleset G-SetMinMaxAbbrevNEW(true)
    rule  G-SetMinMaxAbb-PRTOO2UnitNew();
    rule  G-SetMinMaxAbb-PRTOO3UnitNew();
    rule  G-SetMinMaxAbb-PRTOO4UnitNew();
    rule  G-SetMinMaxAbb-PRTNOO1UnitNew();
    rule  G-SetMinMaxAbb-PRTNOO2UnitNew();
    rule  G-SetMinMaxAbb-PRTNOO3UnitNew();
    rule  G-SetMinMaxAbb-PRTNOO4UnitNew();
    rule  G-SetMinMaxAbb-COOO2UnitNew();
    rule  G-SetMinMaxAbb-COOO3UnitNew();
    rule  G-SetMinMaxAbb-COOO4UnitNew();
    rule  G-SetMinMaxAbb-CONOO1UnitNew();
    rule  G-SetMinMaxAbb-CONOO2UnitNew();
    rule  G-SetMinMaxAbb-CONOO3UnitNew();
    rule  G-SetMinMaxAbb-CONOO4UnitNew();

end // ruleset G-SetMinMaxAbbrevNEW





/* ==========================================================================
 * G-SetMinReservesRequired
 *
 *
 */
ruleset G-SetMinReservesRequired(true)
    rule  G-ReservesRequiredNoDocNoRatGT1Mil();
    rule  G-ReservesRequiredLivRntFreeGT90();
    rule  G-ReservesRequiredSivaLitePriGT90();
    rule  G-ReservesRequiredPri();
    rule  G-ReservesRequiredSecInvestment();

end // ruleset G-SetMinReservesRequired





/* ==========================================================================
 * G-SetMtgLateCounts
 *
 *
 */
ruleset G-SetMtgLateCounts(continue)
    rule  G-SetMtgTradelineCounts-12Mo();
    rule  G-SetMtgTradelineCounts-24Mo();

end // ruleset G-SetMtgLateCounts




alias(ruleset, G-TexasRuleset, "G-Texas Ruleset");

/* ==========================================================================
 * G-TexasRuleset
 *
 *
 */
ruleset G-TexasRuleset(continue)
    rule  G-IneligibleTexasInterestRate2nd();

end // ruleset G-TexasRuleset




alias(ruleset, G-ThresholdRuleset, "G-Threshold Ruleset");

/* ==========================================================================
 * G-ThresholdRuleset
 *
 *
 */
ruleset G-ThresholdRuleset(continue)
    rule  CMT-Threshold();
    rule  G-SetThresholdIndex();
    rule  G-SetThresholdGenericState();
    rule  G-GetThresholdAdj();
    rule  G-GetThresholdIllinoisChicago();
    rule  G-GetThresholdRhodeIslandProvidence();
    rule  G-IsThresholdNotRequiredOccupancy();
    rule  G-IsThresholdNotRequiredLoanAmt();
    rule  G-IsThresholdNotRequiredPurpose1st();
    rule  G-IsThresholdNotRequiredPurpose2nd();
    rule  G-IsThresholdNotRequiredChicagoRule1();
    rule  G-IsThresholdNotRequiredChicagoRule2();
    rule  G-IsThresholdNotRequiredProvidence();
    rule  G-IsThresholdNotRequiredTexas();
    rule  G-GetThresholdTennesseeLtE15yr2nd();
    rule  G-GetThresholdTennesseeEQ20yr2nd();
    rule  G-GetThresholdTennesseeGT20yr2nd();
    rule  G-GetThresholdArkansas2nd();
    rule  G-SetThresholdMaxRate1st();
    rule  G-SetThresholdMaxRate2nd();
    rule  G-SetThresholdMaxPPRate1st();
    rule  G-SetThresholdMaxPPRate2nd();
    rule  G-IneligibleThresholdMaxRate1st();
    rule  G-IneligibleThresholdMaxRate2nd();
    rule  G-CondThresholdIllinois();

end // ruleset G-ThresholdRuleset




alias(ruleset, G-TotalFCBKCCCSLast6YrRuleset, "G-Total FC BK CCCS Last 6 Yr Ruleset");

/* ==========================================================================
 * G-TotalFCBKCCCSLast6YrRuleset
 *
 *
 */
ruleset G-TotalFCBKCCCSLast6YrRuleset(continue)
    rule  G-TotalFCBKCCCSLast6YrRule1();
    rule  G-TotalFCBKCCCSLast6YrRule2();
    rule  G-TotalFCBKCCCSLast6YrRule3();
    rule  G-TotalFCBKCCCSLast6YrRule4();

end // ruleset G-TotalFCBKCCCSLast6YrRuleset




alias(ruleset, G-UnifiRuleset, "G-Unifi Ruleset");

/* ==========================================================================
 * G-UnifiRuleset
 *
 *
 */
ruleset G-UnifiRuleset(continue)
    rule  G-UnifiBankruptcyCheckRule();
    rule  G-UnifiForeclosureCheckRule();
    rule  G-UnifiBorr1FICORule();
    rule  G-UnifiBorr2FICORule();
    rule  G-UnifiBorr3FICORule();
    rule  G-UnifiBorr4FICORule();
    rule  G-UnifiBorr5FICORule();
    rule  G-UnifiIOTerm();
    rule  G-UnifiPaymentShock();

end // ruleset G-UnifiRuleset





/* ==========================================================================
 * G-ZipCodeRestrictions
 *
 *
 */
ruleset G-ZipCodeRestrictions(continue)
    rule  G-MaxLTV80Zip();
    rule  G-MaxLTV85Zip();
    rule  Exptn-PoconoPa();

end // ruleset G-ZipCodeRestrictions





/* ==========================================================================
 * InitFlags
 *
 *
 */
ruleset InitFlags(continue)
    rule  InitIsForeignNatl();
    rule  InitIsFTHB();
    rule  InitIsFixed();
    rule  InitIsInterestOnly();
    rule  InitIsCashOut();
    rule  InitIsNonWarrantable();
    rule  InitIsLeasehold();
    rule  InitIsHudRepo();
    rule  InitIsNoEscrow();
    rule  InitIsNoMI();
    rule  InitHasSubFinancing();
    rule  InitIsCondo();
    rule  InitIsMixedUse();
    rule  InitIsRestrictedState();
    rule  InitIsSelfEmployed();

end // ruleset InitFlags





/* ==========================================================================
 * SetZipCodeRestrictionFlags
 *
 *
 */
ruleset SetZipCodeRestrictionFlags(continue)
    rule  G-SetLTVZipRestrictionFlag();
    rule  SetZipPoconoRuralFlag();

end // ruleset SetZipCodeRestrictionFlags




alias(ruleset, ZDbgAltARuleset, "ZDbg AltA Ruleset");

/* ==========================================================================
 * ZDbgAltARuleset
 *
 *
 */
ruleset ZDbgAltARuleset(continue)
    rule  ZDbg-DebugFlagInit();
    rule  ZDbg-AltACheck();
    rule  ZDbg-DbgFlagTrace();
    rule  ZDbg-LTVCLTVTrace();
    rule  ZDbg-LTV1stTrace();
    rule  ZDbg-MaxLTVCLTVTrace();
    rule  ZDbg-LoanAmountInit();
    rule  ZDbg-LoanAmountTrace();
    rule  ZDbg-LoanAmount1stTrace();
    rule  ZDbg-LoanAmount2ndTrace();
    rule  ZDbg-MaxLoanAmountTrace();
    rule  ZDbg-MarginTrace();
    rule  ZDbg-CreditScoreTrace();
    rule  ZDbg-MtgLatesTrace();
    rule  ZDbg-PriceAdj-TotalTrace();
    rule  ZDbg-RateAdj-TotalTrace();
    rule  ZDbg-MarginAdj-TotalTrace();
    rule  ZDbg-ComboInit();
    rule  ZDbg-ComboTrace();
    rule  ZDbg-PPIndicatorTrace();
    rule  ZDbg-PropertyTypeTrace();
    rule  ZDbg-LookupNameTrace();
    rule  ZDbg-DbgVarTrace();
    rule  ZDbg-ForceRefer();

end // ruleset ZDbgAltARuleset








// ++++++++++++++++++++++++ Guideline Definition ++++++++++++++++++++++++
		
/* ==========================================================================
 * ALTA-AU Guideline
 *
 * ID:         11
 * Version:    63519
 * Start Date: Dec  4 2007  1:35PM
 *
 */
guideline("ALTA-AU Guideline")

    rule  G-InvalidUserType();
    ruleset  G-DeprecatedDPMs();
    ruleset  G-Initialization();
    rule  G-InitializationCalcs();
    ruleset  AltA-Initialization();
    ruleset  InitFlags();
    rule  G-1stLoanAmount();
    rule  G-ForeignNational();
    ruleset  G-ForeignNationalNoFICORuleset();
    ruleset  AltA-PrimaryBorrowerRuleset();
    ruleset  AltA-RepFICOScoreRuleset();
    ruleset  G-SetCreditScoreIfSingleScore();
    ruleset  AltA-FTHBRuleset();
    rule  G-BorrowerType();
    ruleset  G-PurposeAbbrevRuleset();
    rule  G-SetPropTypeIndicator-SFR();
    rule  AltA-SetFullDocFlag();
    ruleset  SetZipCodeRestrictionFlags();
    ruleset  G-PropertyValueRuleset();
    rule  G-LTVCLTVCalc();
    ruleset  G-SetCOPropertyValue();
    rule  G-LTVCLTVRe-CalcforCO();
    rule  G-TotalCurrentHousingExpensesCalc();
    ruleset  G-CalcTotalIncomeAmt();
    rule  G-CalcEarnestDeposit();
    rule  G-GeneralCalculations();
    rule  G-Cashto_fromBorrower();
    ruleset  G-SetMtgLateCounts();
    rule  G-PurposeAbbrevPRT();
    ruleset  G-SetMinMaxAbbrev();
    ruleset  G-SetMinMaxAbbrevNEW();
    ruleset  G-SetMinLoanAmount();
    rule  G-ForeignNatlFICO();
    ruleset  AltA-SetDocTypeAbbrev();
    ruleset  AltA-RetentionMaxLTV();
    ruleset  AltA-MinMax();
    rule  AltA-NoMIPricingNonWarrCondoLeasehold();
    ruleset  AltA-MaxCashOut();
    ruleset  AltA-MaxDTILimitsCalcRuleset();
    ruleset  G-PurposeAbbrevRuleset2();
    ruleset  AltA-MaxLimitsReductionCalcRuleset();
    rule  AltA-MaxLTVRednRuralProperty2();
    rule  AltA-MaxCLTVRednRuralProperty2();
    ruleset  G-InheritedMaxCoLtvCltv();
    ruleset  G-CLTVNoDocExceptions();
    rule  G-RetentionRTRefiCoBorr();
    ruleset  G-PriceAdjustmentsInit();
    ruleset  G-MarginAdjustmentsInit();
    ruleset  G-RateAdjustmentsInit();
    rule  G-ForeignNatl660();
    rule  InsertPricingGuidelineRule();
    ruleset  G-HawaiiMaxLoanAmt();
    rule  G-ForeignNatl720();
    ruleset  AltA-NoMICheck();
    ruleset  G-SetMinReservesRequired();
    rule  G-Calc6MoReserves();
    ruleset  G-FloridaPropertyRestrictions();
    ruleset  G-ZipCodeRestrictions();
    ruleset  G-IneligibleCLTVRuleset();
    ruleset  G-IneligibleLTVRuleset();
    ruleset  G-IneligibleSecondaryFinance();
    ruleset  G-IneligibleMaxLoanAmount();
    rule  G-IneligibleCreditScore();
    rule  G-IneligibleCo-BorrowerCreditScore();
    ruleset  G-SelfEmployedFlag();
    ruleset  G-PaymentShockExceeded();
    ruleset  G-CondPaymentShockExceeded();
    rule  G-CondPaymentShock80SIVA();
    ruleset  G-Ineligible-PaymentShock();
    ruleset  G-IneligibleEmploymentField();
    ruleset  G-SelfEmployedRestrictions();
    ruleset  G-ConditionsGeneral();
    ruleset  G-PriResRetentionSet();
    ruleset  G-MiActivation();
    rule  G-PoaNotAllowed();
    ruleset  G-APRStateRestrictions();
    rule  Override-MA();
    rule  G-RestrictedState();
    rule  G-IneligibleMSRetention();
    ruleset  G-IneligiblePPCheckRuleset();
    ruleset  G-IneligiblePPStatesRTNChnl();
    ruleset  G-IneligibleBalloonState();
    ruleset  G-IneligibleIANoteRate();
    rule  G-IneligibleINNoteRate();
    ruleset  G-ColoradoRuleset();
    ruleset  G-Kansas();
    ruleset  G-MaineRuleset();
    ruleset  G-MinnesotaRuleset();
    ruleset  G-TexasRuleset();
    rule  AltA-IneligibleState();
    rule  G-IneligibleSCInterestRate2nd();
    rule  G-Ineligible40DueIn30();
    rule  G-IneligibleIncomeCheck();
    ruleset  AltA-DTIExceptionRuleset();
    ruleset  G-OccCoBorrFico();
    rule  AltA-WaiveTdlBkCheck();
    ruleset  AltA-TradelinesExceptionRuleset();
    rule  G-IsNonTradationalTLReqd();
    ruleset  AltA-FTHBExceptionRuleset();
    ruleset  G-MtgLateExceptions();
    ruleset  AltA-Chapter7BKExceptionRuleset();
    ruleset  AltA-Chapter13BKExceptionRuleset();
    ruleset  AltA-CCCSExceptionRuleset();
    ruleset  AltA-ForeclosureExceptionRuleset();
    ruleset  G-TotalFCBKCCCSLast6YrRuleset();
    ruleset  AltA-ForeignNationalExceptionRuleset();
    rule  G-IneligibleLTVSeasoning();
    rule  G-IneligibleCLTVSeasoning();
    ruleset  G-Non-OccCoBorr();
    ruleset  AltA-Non-PermanentResidentAliensExceptionRules();
    ruleset  G-PermResidentAlienException();
    ruleset  AltA-SourceofFundsExceptionRuleset();
    rule  AltA-IneligibleMixedUse();
    rule  AltA-IneligibleWaiveEscrow();
    ruleset  AltA-TexasCORefiExceptionRuleset();
    ruleset  AltA-OccupancyExceptionRuleset();
    ruleset  G-IneligibleCondo();
    rule  AltA-IneligibleSecondHome2-4Units();
    ruleset  G-MinLoanAmtExceptionRuleset();
    rule  AltA-IneligibleOneUnits();
    rule  AltA-IneligibleIncomeRule();
    rule  AltA-IneligibleRuralNOO();
    rule  G-IneligibleComboHUDRepoRule();
    rule  G-IneligiblePrepayTermHUDRepoRule();
    rule  G-IneligibleOtherFinancingHUDRepoRule();
    rule  G-IneligiblePropTypeMHLBRule();
    rule  G-IneligibleLivingRentFree();
    ruleset  AltA-ConditionsGeneralRuleset();
    ruleset  AltA-LoanAmountConditionsRuleset();
    ruleset  AltA-CondSellerContribution();
    rule  AltA-CondSubPropGrossRents();
    ruleset  AltA-ReservesConditionsRuleset();
    ruleset  G-ReservesCalcUsingCO();
    ruleset  G-ReservesNetofLoanProceeds();
    ruleset  G-ConditionsGrossRentRuleset();
    rule  AltA-CondNotFTHBMortHist();
    ruleset  AltA-DocRequirementConditionsRuleset();
    ruleset  AltA-CondPublicRecordsRuleset();
    ruleset  AltA-CondCitizenRulesetRuleset();
    ruleset  AltA-ForNatlCondRuleset();
    ruleset  AltA-CondNon-OccCo-BorrIRuleset();
    ruleset  AltA-CondNon-OccCoBorrIIRuleset();
    rule  AltA-CondNonOccCoBorrTitle();
    ruleset  AltA-CondGiftFundsRuleset();
    rule  AltA-CondRural();
    ruleset  G-CondRateTermRefi();
    ruleset  AltA-CondSubFinRuleset();
    ruleset  G-CondREOsGrossRentRuleset();
    rule  AltA-CondREOsGrossRent3();
    ruleset  AltA-CondGiftofEquityRuleset();
    rule  AltA-CondMaxCashOut();
    ruleset  AltA-CondTransTypeRuleset();
    rule  AltA-CondLeasehold();
    ruleset  AltA-CondVOMVORRuleset();
    ruleset  AltA-CondEarnestDepositRuleset();
    ruleset  AltA-CondOccRuleset();
    rule  SubP-ComboLoansClosingCondition();
    ruleset  AltA-CondRe-estdTLNRuleset();
    ruleset  AltA-DownPaymentConditionRuleset();
    rule  G-PurchaseContactConditionRule();
    rule  G-ConditionsConditionset1Rule8();
    rule  G-CondMortLiabilitiesNoREOAssoc();
    rule  G-CondNYCity();
    ruleset  G-CondNetTangibleBenefit();
    ruleset  G-CondDeclarationsRuleset();
    ruleset  G-CondNonTraditionalTDLNGT1Mil();
    rule  AltA-CondConsumerDeliquentAccts();
    rule  G-ClosingCostReqdRule1();
    rule  G-CondLiqofFunds();
    rule  G-CondCPL();
    rule  G-CondBaileeLetter();
    rule  G-CondCorrHUD();
    rule  G-CondCorrVOE();
    rule  G-ModelHomeLeasebackNOOConditionRule();
    rule  G-EscrowHoldbackConditionRule();
    rule  G-InheritedPropCOConditionRule();
    rule  G-InheritedPropRTConditionRule();
    rule  G-InheritedPropConditionRule();
    rule  G-RowHomeConditionRule();
    ruleset  AltA-VirtualFCConditionRuleset();
    rule  G-IneligibleFCBKCCCSRule();
    rule  G-CondInsufficientDownPmt();
    rule  AltA-Ineligible26IOARM();
    rule  AltA-IneligibleSIVA2ndNOOCO();
    rule  G-IneligibleModelHomeLeaseback();
    rule  G-IneligibleNYAttachedPropSIVA();
    rule  G-IneligibleReservesReqd();
    ruleset  G-Ineligible-DocType();
    ruleset  G-IneligibleProducts();
    rule  AltA-IneligibleInterestOnly80LTV();
    rule  AltA-LivingRentFreeCheck();
    ruleset  G-CheckOtherFinancingRuleset();
    ruleset  G-RatePriceDisplayRuleset();
    rule  G-RatePriceDisplayQualRateRule();
    ruleset  G-UnifiRuleset();
    ruleset  G-Integrate();
    ruleset  G-MaxPPNoteRateRuleset();
    ruleset  G-ThresholdRuleset();
    ruleset  G-Cond-GdlExpiration();
    rule  G-ForeignNatl0();
    rule  G-SetDecisionValue();
    ruleset  G-DefaultMessages();
    ruleset  ZDbgAltARuleset();


end // guideline ALTA-AU Guideline
